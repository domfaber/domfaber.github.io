var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    init_react_inject();
    var l = Symbol.for("react.element");
    var n = Symbol.for("react.portal");
    var p = Symbol.for("react.fragment");
    var q = Symbol.for("react.strict_mode");
    var r = Symbol.for("react.profiler");
    var t = Symbol.for("react.provider");
    var u = Symbol.for("react.context");
    var v = Symbol.for("react.forward_ref");
    var w = Symbol.for("react.suspense");
    var x = Symbol.for("react.memo");
    var y = Symbol.for("react.lazy");
    var z = Symbol.iterator;
    function A(a) {
      if (null === a || "object" !== typeof a) return null;
      a = z && a[z] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var B = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var C = Object.assign;
    var D = {};
    function E(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }
    E.prototype.isReactComponent = {};
    E.prototype.setState = function(a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    E.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E.prototype;
    function G(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D;
      this.updater = e || B;
    }
    var H = G.prototype = new F();
    H.constructor = G;
    C(H, E.prototype);
    H.isPureReactComponent = true;
    var I = Array.isArray;
    var J = Object.prototype.hasOwnProperty;
    var K = { current: null };
    var L = { key: true, ref: true, __self: true, __source: true };
    function M(a, b, e) {
      var d, c = {}, k = null, h = null;
      if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
      var g = arguments.length - 2;
      if (1 === g) c.children = e;
      else if (1 < g) {
        for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
        c.children = f;
      }
      if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
      return { $$typeof: l, type: a, key: k, ref: h, props: c, _owner: K.current };
    }
    function N(a, b) {
      return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var P = /\/+/g;
    function Q(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
    }
    function R(a, b, e, d, c) {
      var k = typeof a;
      if ("undefined" === k || "boolean" === k) a = null;
      var h = false;
      if (null === a) h = true;
      else switch (k) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case l:
            case n:
              h = true;
          }
      }
      if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function(a2) {
        return a2;
      })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
      h = 0;
      d = "" === d ? "." : d + ":";
      if (I(a)) for (var g = 0; g < a.length; g++) {
        k = a[g];
        var f = d + Q(k, g);
        h += R(k, b, e, f, c);
      }
      else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done; ) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);
      else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S(a, b, e) {
      if (null == a) return a;
      var d = [], c = 0;
      R(a, d, "", "", function(a2) {
        return b.call(e, a2, c++);
      });
      return d;
    }
    function T(a) {
      if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b2) {
          if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
        }, function(b2) {
          if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
        });
        -1 === a._status && (a._status = 0, a._result = b);
      }
      if (1 === a._status) return a._result.default;
      throw a._result;
    }
    var U = { current: null };
    var V = { transition: null };
    var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
    function X() {
      throw Error("act(...) is not supported in production builds of React.");
    }
    exports.Children = { map: S, forEach: function(a, b, e) {
      S(a, function() {
        b.apply(this, arguments);
      }, e);
    }, count: function(a) {
      var b = 0;
      S(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return S(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    exports.Component = E;
    exports.Fragment = p;
    exports.Profiler = r;
    exports.PureComponent = G;
    exports.StrictMode = q;
    exports.Suspense = w;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
    exports.act = X;
    exports.cloneElement = function(a, b, e) {
      if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = C({}, a.props), c = a.key, k = a.ref, h = a._owner;
      if (null != b) {
        void 0 !== b.ref && (k = b.ref, h = K.current);
        void 0 !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
      }
      var f = arguments.length - 2;
      if (1 === f) d.children = e;
      else if (1 < f) {
        g = Array(f);
        for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
        d.children = g;
      }
      return { $$typeof: l, type: a.type, key: c, ref: k, props: d, _owner: h };
    };
    exports.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t, _context: a };
      return a.Consumer = a;
    };
    exports.createElement = M;
    exports.createFactory = function(a) {
      var b = M.bind(null, a);
      b.type = a;
      return b;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a) {
      return { $$typeof: v, render: a };
    };
    exports.isValidElement = O;
    exports.lazy = function(a) {
      return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T };
    };
    exports.memo = function(a, b) {
      return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
    };
    exports.startTransition = function(a) {
      var b = V.transition;
      V.transition = {};
      try {
        a();
      } finally {
        V.transition = b;
      }
    };
    exports.unstable_act = X;
    exports.useCallback = function(a, b) {
      return U.current.useCallback(a, b);
    };
    exports.useContext = function(a) {
      return U.current.useContext(a);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a) {
      return U.current.useDeferredValue(a);
    };
    exports.useEffect = function(a, b) {
      return U.current.useEffect(a, b);
    };
    exports.useId = function() {
      return U.current.useId();
    };
    exports.useImperativeHandle = function(a, b, e) {
      return U.current.useImperativeHandle(a, b, e);
    };
    exports.useInsertionEffect = function(a, b) {
      return U.current.useInsertionEffect(a, b);
    };
    exports.useLayoutEffect = function(a, b) {
      return U.current.useLayoutEffect(a, b);
    };
    exports.useMemo = function(a, b) {
      return U.current.useMemo(a, b);
    };
    exports.useReducer = function(a, b, e) {
      return U.current.useReducer(a, b, e);
    };
    exports.useRef = function(a) {
      return U.current.useRef(a);
    };
    exports.useState = function(a) {
      return U.current.useState(a);
    };
    exports.useSyncExternalStore = function(a, b, e) {
      return U.current.useSyncExternalStore(a, b, e);
    };
    exports.useTransition = function() {
      return U.current.useTransition();
    };
    exports.version = "18.3.1";
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.3.1";
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          // Used to reproduce behavior of `batchedUpdates` in legacy mode.
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type,
            key,
            ref,
            props,
            // Record the component responsible for creating this element.
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement(type, config, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                    // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                    // eslint-disable-next-line react-internal/safe-string-coercion
                    escapeUserProvidedKey("" + mappedChild.key) + "/"
                  ) : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
            // Add these to use same hidden class in VM as ServerContext
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
            // Inner props are checked in the reconciler.
            type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentNameFromType(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments);
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope, options) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module && module[requireString];
              enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error2) {
              popActScope(prevActScopeDepth);
              throw error2;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActScopeDepth);
                    reject(error2);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    } else {
                      resolve(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve, reject) {
                    resolve(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  }
                });
              } catch (error2) {
                reject(error2);
              }
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(true);
                  } while (callback !== null);
                }
                queue.length = 0;
              } catch (error2) {
                queue = queue.slice(i + 1);
                throw error2;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.act = act;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef;
        exports.isValidElement = isValidElement;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback;
        exports.useContext = useContext;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect;
        exports.useId = useId;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect;
        exports.useMemo = useMemo;
        exports.useReducer = useReducer;
        exports.useRef = useRef;
        exports.useState = useState;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV === "production") {
      module.exports = require_react_production_min();
    } else {
      module.exports = require_react_development();
    }
  }
});

// react-inject.js
var import_react;
var init_react_inject = __esm({
  "react-inject.js"() {
    import_react = __toESM(require_react(), 1);
  }
});

// node_modules/lucide-react/dist/cjs/lucide-react.js
var require_lucide_react = __commonJS({
  "node_modules/lucide-react/dist/cjs/lucide-react.js"(exports) {
    "use strict";
    init_react_inject();
    var react = require_react();
    var toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    var mergeClasses = (...classes) => classes.filter((className, index2, array) => {
      return Boolean(className) && className.trim() !== "" && array.indexOf(className) === index2;
    }).join(" ").trim();
    var defaultAttributes = {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    };
    var Icon = react.forwardRef(
      ({
        color = "currentColor",
        size = 24,
        strokeWidth = 2,
        absoluteStrokeWidth,
        className = "",
        children,
        iconNode,
        ...rest
      }, ref) => {
        return react.createElement(
          "svg",
          {
            ref,
            ...defaultAttributes,
            width: size,
            height: size,
            stroke: color,
            strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
            className: mergeClasses("lucide", className),
            ...rest
          },
          [
            ...iconNode.map(([tag, attrs]) => react.createElement(tag, attrs)),
            ...Array.isArray(children) ? children : [children]
          ]
        );
      }
    );
    var createLucideIcon = (iconName, iconNode) => {
      const Component2 = react.forwardRef(
        ({ className, ...props }, ref) => react.createElement(Icon, {
          ref,
          iconNode,
          className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),
          ...props
        })
      );
      Component2.displayName = `${iconName}`;
      return Component2;
    };
    var AArrowDown = createLucideIcon("AArrowDown", [
      ["path", { d: "M3.5 13h6", key: "p1my2r" }],
      ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
      ["path", { d: "M18 7v9", key: "pknjwm" }],
      ["path", { d: "m14 12 4 4 4-4", key: "buelq4" }]
    ]);
    var AArrowUp = createLucideIcon("AArrowUp", [
      ["path", { d: "M3.5 13h6", key: "p1my2r" }],
      ["path", { d: "m2 16 4.5-9 4.5 9", key: "ndf0b3" }],
      ["path", { d: "M18 16V7", key: "ty0viw" }],
      ["path", { d: "m14 11 4-4 4 4", key: "1pu57t" }]
    ]);
    var ALargeSmall = createLucideIcon("ALargeSmall", [
      ["path", { d: "M21 14h-5", key: "1vh23k" }],
      ["path", { d: "M16 16v-3.5a2.5 2.5 0 0 1 5 0V16", key: "1wh10o" }],
      ["path", { d: "M4.5 13h6", key: "dfilno" }],
      ["path", { d: "m3 16 4.5-9 4.5 9", key: "2dxa0e" }]
    ]);
    var Accessibility = createLucideIcon("Accessibility", [
      ["circle", { cx: "16", cy: "4", r: "1", key: "1grugj" }],
      ["path", { d: "m18 19 1-7-6 1", key: "r0i19z" }],
      ["path", { d: "m5 8 3-3 5.5 3-2.36 3.5", key: "9ptxx2" }],
      ["path", { d: "M4.24 14.5a5 5 0 0 0 6.88 6", key: "10kmtu" }],
      ["path", { d: "M13.76 17.5a5 5 0 0 0-6.88-6", key: "2qq6rc" }]
    ]);
    var Activity = createLucideIcon("Activity", [
      [
        "path",
        {
          d: "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2",
          key: "169zse"
        }
      ]
    ]);
    var AirVent = createLucideIcon("AirVent", [
      [
        "path",
        {
          d: "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
          key: "larmp2"
        }
      ],
      ["path", { d: "M6 8h12", key: "6g4wlu" }],
      ["path", { d: "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12", key: "1bo8pg" }],
      ["path", { d: "M6.6 15.6A2 2 0 1 0 10 17v-5", key: "t9h90c" }]
    ]);
    var Airplay = createLucideIcon("Airplay", [
      [
        "path",
        {
          d: "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1",
          key: "ns4c3b"
        }
      ],
      ["path", { d: "m12 15 5 6H7Z", key: "14qnn2" }]
    ]);
    var AlarmClockCheck = createLucideIcon("AlarmClockCheck", [
      ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
      ["path", { d: "M5 3 2 6", key: "18tl5t" }],
      ["path", { d: "m22 6-3-3", key: "1opdir" }],
      ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
      ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
      ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
    ]);
    var AlarmClockMinus = createLucideIcon("AlarmClockMinus", [
      ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
      ["path", { d: "M5 3 2 6", key: "18tl5t" }],
      ["path", { d: "m22 6-3-3", key: "1opdir" }],
      ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
      ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
      ["path", { d: "M9 13h6", key: "1uhe8q" }]
    ]);
    var AlarmClockOff = createLucideIcon("AlarmClockOff", [
      ["path", { d: "M6.87 6.87a8 8 0 1 0 11.26 11.26", key: "3on8tj" }],
      ["path", { d: "M19.9 14.25a8 8 0 0 0-9.15-9.15", key: "15ghsc" }],
      ["path", { d: "m22 6-3-3", key: "1opdir" }],
      ["path", { d: "M6.26 18.67 4 21", key: "yzmioq" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M4 4 2 6", key: "1ycko6" }]
    ]);
    var AlarmClockPlus = createLucideIcon("AlarmClockPlus", [
      ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
      ["path", { d: "M5 3 2 6", key: "18tl5t" }],
      ["path", { d: "m22 6-3-3", key: "1opdir" }],
      ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
      ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }],
      ["path", { d: "M12 10v6", key: "1bos4e" }],
      ["path", { d: "M9 13h6", key: "1uhe8q" }]
    ]);
    var AlarmClock = createLucideIcon("AlarmClock", [
      ["circle", { cx: "12", cy: "13", r: "8", key: "3y4lt7" }],
      ["path", { d: "M12 9v4l2 2", key: "1c63tq" }],
      ["path", { d: "M5 3 2 6", key: "18tl5t" }],
      ["path", { d: "m22 6-3-3", key: "1opdir" }],
      ["path", { d: "M6.38 18.7 4 21", key: "17xu3x" }],
      ["path", { d: "M17.64 18.67 20 21", key: "kv2oe2" }]
    ]);
    var AlarmSmoke = createLucideIcon("AlarmSmoke", [
      ["path", { d: "M11 21c0-2.5 2-2.5 2-5", key: "1sicvv" }],
      ["path", { d: "M16 21c0-2.5 2-2.5 2-5", key: "1o3eny" }],
      ["path", { d: "m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8", key: "1bvca4" }],
      [
        "path",
        { d: "M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z", key: "x3qr1j" }
      ],
      ["path", { d: "M6 21c0-2.5 2-2.5 2-5", key: "i3w1gp" }]
    ]);
    var Album = createLucideIcon("Album", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["polyline", { points: "11 3 11 11 14 8 17 11 17 3", key: "1wcwz3" }]
    ]);
    var AlignCenterHorizontal = createLucideIcon("AlignCenterHorizontal", [
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4", key: "11f1s0" }],
      ["path", { d: "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4", key: "t14dx9" }],
      ["path", { d: "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1", key: "1w07xs" }],
      ["path", { d: "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1", key: "1apec2" }]
    ]);
    var AlignCenterVertical = createLucideIcon("AlignCenterVertical", [
      ["path", { d: "M12 2v20", key: "t6zp3m" }],
      ["path", { d: "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4", key: "14d6g8" }],
      ["path", { d: "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4", key: "1e2lrw" }],
      ["path", { d: "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1", key: "1fkdwx" }],
      ["path", { d: "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1", key: "1euafb" }]
    ]);
    var AlignCenter = createLucideIcon("AlignCenter", [
      ["path", { d: "M17 12H7", key: "16if0g" }],
      ["path", { d: "M19 18H5", key: "18s9l3" }],
      ["path", { d: "M21 6H3", key: "1jwq7v" }]
    ]);
    var AlignEndHorizontal = createLucideIcon("AlignEndHorizontal", [
      ["rect", { width: "6", height: "16", x: "4", y: "2", rx: "2", key: "z5wdxg" }],
      ["rect", { width: "6", height: "9", x: "14", y: "9", rx: "2", key: "um7a8w" }],
      ["path", { d: "M22 22H2", key: "19qnx5" }]
    ]);
    var AlignEndVertical = createLucideIcon("AlignEndVertical", [
      ["rect", { width: "16", height: "6", x: "2", y: "4", rx: "2", key: "10wcwx" }],
      ["rect", { width: "9", height: "6", x: "9", y: "14", rx: "2", key: "4p5bwg" }],
      ["path", { d: "M22 22V2", key: "12ipfv" }]
    ]);
    var AlignHorizontalDistributeCenter = createLucideIcon("AlignHorizontalDistributeCenter", [
      ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
      ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
      ["path", { d: "M17 22v-5", key: "4b6g73" }],
      ["path", { d: "M17 7V2", key: "hnrr36" }],
      ["path", { d: "M7 22v-3", key: "1r4jpn" }],
      ["path", { d: "M7 5V2", key: "liy1u9" }]
    ]);
    var AlignHorizontalDistributeEnd = createLucideIcon("AlignHorizontalDistributeEnd", [
      ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
      ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
      ["path", { d: "M10 2v20", key: "uyc634" }],
      ["path", { d: "M20 2v20", key: "1tx262" }]
    ]);
    var AlignHorizontalDistributeStart = createLucideIcon("AlignHorizontalDistributeStart", [
      ["rect", { width: "6", height: "14", x: "4", y: "5", rx: "2", key: "1wwnby" }],
      ["rect", { width: "6", height: "10", x: "14", y: "7", rx: "2", key: "1fe6j6" }],
      ["path", { d: "M4 2v20", key: "gtpd5x" }],
      ["path", { d: "M14 2v20", key: "tg6bpw" }]
    ]);
    var AlignHorizontalJustifyCenter = createLucideIcon("AlignHorizontalJustifyCenter", [
      ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
      ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
      ["path", { d: "M12 2v20", key: "t6zp3m" }]
    ]);
    var AlignHorizontalJustifyEnd = createLucideIcon("AlignHorizontalJustifyEnd", [
      ["rect", { width: "6", height: "14", x: "2", y: "5", rx: "2", key: "dy24zr" }],
      ["rect", { width: "6", height: "10", x: "12", y: "7", rx: "2", key: "1ht384" }],
      ["path", { d: "M22 2v20", key: "40qfg1" }]
    ]);
    var AlignHorizontalJustifyStart = createLucideIcon("AlignHorizontalJustifyStart", [
      ["rect", { width: "6", height: "14", x: "6", y: "5", rx: "2", key: "hsirpf" }],
      ["rect", { width: "6", height: "10", x: "16", y: "7", rx: "2", key: "13zkjt" }],
      ["path", { d: "M2 2v20", key: "1ivd8o" }]
    ]);
    var AlignHorizontalSpaceAround = createLucideIcon("AlignHorizontalSpaceAround", [
      ["rect", { width: "6", height: "10", x: "9", y: "7", rx: "2", key: "yn7j0q" }],
      ["path", { d: "M4 22V2", key: "tsjzd3" }],
      ["path", { d: "M20 22V2", key: "1bnhr8" }]
    ]);
    var AlignHorizontalSpaceBetween = createLucideIcon("AlignHorizontalSpaceBetween", [
      ["rect", { width: "6", height: "14", x: "3", y: "5", rx: "2", key: "j77dae" }],
      ["rect", { width: "6", height: "10", x: "15", y: "7", rx: "2", key: "bq30hj" }],
      ["path", { d: "M3 2v20", key: "1d2pfg" }],
      ["path", { d: "M21 2v20", key: "p059bm" }]
    ]);
    var AlignJustify = createLucideIcon("AlignJustify", [
      ["path", { d: "M3 12h18", key: "1i2n21" }],
      ["path", { d: "M3 18h18", key: "1h113x" }],
      ["path", { d: "M3 6h18", key: "d0wm0j" }]
    ]);
    var AlignLeft = createLucideIcon("AlignLeft", [
      ["path", { d: "M15 12H3", key: "6jk70r" }],
      ["path", { d: "M17 18H3", key: "1amg6g" }],
      ["path", { d: "M21 6H3", key: "1jwq7v" }]
    ]);
    var AlignRight = createLucideIcon("AlignRight", [
      ["path", { d: "M21 12H9", key: "dn1m92" }],
      ["path", { d: "M21 18H7", key: "1ygte8" }],
      ["path", { d: "M21 6H3", key: "1jwq7v" }]
    ]);
    var AlignStartHorizontal = createLucideIcon("AlignStartHorizontal", [
      ["rect", { width: "6", height: "16", x: "4", y: "6", rx: "2", key: "1n4dg1" }],
      ["rect", { width: "6", height: "9", x: "14", y: "6", rx: "2", key: "17khns" }],
      ["path", { d: "M22 2H2", key: "fhrpnj" }]
    ]);
    var AlignStartVertical = createLucideIcon("AlignStartVertical", [
      ["rect", { width: "9", height: "6", x: "6", y: "14", rx: "2", key: "lpm2y7" }],
      ["rect", { width: "16", height: "6", x: "6", y: "4", rx: "2", key: "rdj6ps" }],
      ["path", { d: "M2 2v20", key: "1ivd8o" }]
    ]);
    var AlignVerticalDistributeCenter = createLucideIcon("AlignVerticalDistributeCenter", [
      ["path", { d: "M22 17h-3", key: "1lwga1" }],
      ["path", { d: "M22 7h-5", key: "o2endc" }],
      ["path", { d: "M5 17H2", key: "1gx9xc" }],
      ["path", { d: "M7 7H2", key: "6bq26l" }],
      ["rect", { x: "5", y: "14", width: "14", height: "6", rx: "2", key: "1qrzuf" }],
      ["rect", { x: "7", y: "4", width: "10", height: "6", rx: "2", key: "we8e9z" }]
    ]);
    var AlignVerticalDistributeEnd = createLucideIcon("AlignVerticalDistributeEnd", [
      ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
      ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
      ["path", { d: "M2 20h20", key: "owomy5" }],
      ["path", { d: "M2 10h20", key: "1ir3d8" }]
    ]);
    var AlignVerticalDistributeStart = createLucideIcon("AlignVerticalDistributeStart", [
      ["rect", { width: "14", height: "6", x: "5", y: "14", rx: "2", key: "jmoj9s" }],
      ["rect", { width: "10", height: "6", x: "7", y: "4", rx: "2", key: "aza5on" }],
      ["path", { d: "M2 14h20", key: "myj16y" }],
      ["path", { d: "M2 4h20", key: "mda7wb" }]
    ]);
    var AlignVerticalJustifyCenter = createLucideIcon("AlignVerticalJustifyCenter", [
      ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
      ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }]
    ]);
    var AlignVerticalJustifyEnd = createLucideIcon("AlignVerticalJustifyEnd", [
      ["rect", { width: "14", height: "6", x: "5", y: "12", rx: "2", key: "4l4tp2" }],
      ["rect", { width: "10", height: "6", x: "7", y: "2", rx: "2", key: "ypihtt" }],
      ["path", { d: "M2 22h20", key: "272qi7" }]
    ]);
    var AlignVerticalJustifyStart = createLucideIcon("AlignVerticalJustifyStart", [
      ["rect", { width: "14", height: "6", x: "5", y: "16", rx: "2", key: "1i8z2d" }],
      ["rect", { width: "10", height: "6", x: "7", y: "6", rx: "2", key: "13squh" }],
      ["path", { d: "M2 2h20", key: "1ennik" }]
    ]);
    var AlignVerticalSpaceAround = createLucideIcon("AlignVerticalSpaceAround", [
      ["rect", { width: "10", height: "6", x: "7", y: "9", rx: "2", key: "b1zbii" }],
      ["path", { d: "M22 20H2", key: "1p1f7z" }],
      ["path", { d: "M22 4H2", key: "1b7qnq" }]
    ]);
    var AlignVerticalSpaceBetween = createLucideIcon("AlignVerticalSpaceBetween", [
      ["rect", { width: "14", height: "6", x: "5", y: "15", rx: "2", key: "1w91an" }],
      ["rect", { width: "10", height: "6", x: "7", y: "3", rx: "2", key: "17wqzy" }],
      ["path", { d: "M2 21h20", key: "1nyx9w" }],
      ["path", { d: "M2 3h20", key: "91anmk" }]
    ]);
    var Ambulance = createLucideIcon("Ambulance", [
      ["path", { d: "M10 10H6", key: "1bsnug" }],
      ["path", { d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2", key: "wrbu53" }],
      [
        "path",
        {
          d: "M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14",
          key: "lrkjwd"
        }
      ],
      ["path", { d: "M8 8v4", key: "1fwk8c" }],
      ["path", { d: "M9 18h6", key: "x1upvd" }],
      ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }],
      ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }]
    ]);
    var Ampersand = createLucideIcon("Ampersand", [
      [
        "path",
        {
          d: "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13",
          key: "1o9ehi"
        }
      ],
      ["path", { d: "M16 12h3", key: "4uvgyw" }]
    ]);
    var Ampersands = createLucideIcon("Ampersands", [
      [
        "path",
        {
          d: "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
          key: "12lh1k"
        }
      ],
      [
        "path",
        {
          d: "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5",
          key: "173c68"
        }
      ]
    ]);
    var Amphora = createLucideIcon("Amphora", [
      [
        "path",
        { d: "M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8", key: "1h8rid" }
      ],
      ["path", { d: "M10 5H8a2 2 0 0 0 0 4h.68", key: "3ezsi6" }],
      ["path", { d: "M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8", key: "yt6q09" }],
      ["path", { d: "M14 5h2a2 2 0 0 1 0 4h-.68", key: "8f95yk" }],
      ["path", { d: "M18 22H6", key: "mg6kv4" }],
      ["path", { d: "M9 2h6", key: "1jrp98" }]
    ]);
    var Anchor = createLucideIcon("Anchor", [
      ["path", { d: "M12 22V8", key: "qkxhtm" }],
      ["path", { d: "M5 12H2a10 10 0 0 0 20 0h-3", key: "1hv3nh" }],
      ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }]
    ]);
    var Angry = createLucideIcon("Angry", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
      ["path", { d: "M7.5 8 10 9", key: "olxxln" }],
      ["path", { d: "m14 9 2.5-1", key: "1j6cij" }],
      ["path", { d: "M9 10h.01", key: "qbtxuw" }],
      ["path", { d: "M15 10h.01", key: "1qmjsl" }]
    ]);
    var Annoyed = createLucideIcon("Annoyed", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M8 15h8", key: "45n4r" }],
      ["path", { d: "M8 9h2", key: "1g203m" }],
      ["path", { d: "M14 9h2", key: "116p9w" }]
    ]);
    var Antenna = createLucideIcon("Antenna", [
      ["path", { d: "M2 12 7 2", key: "117k30" }],
      ["path", { d: "m7 12 5-10", key: "1tvx22" }],
      ["path", { d: "m12 12 5-10", key: "ev1o1a" }],
      ["path", { d: "m17 12 5-10", key: "1e4ti3" }],
      ["path", { d: "M4.5 7h15", key: "vlsxkz" }],
      ["path", { d: "M12 16v6", key: "c8a4gj" }]
    ]);
    var Anvil = createLucideIcon("Anvil", [
      ["path", { d: "M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4", key: "1hjpb6" }],
      [
        "path",
        { d: "M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z", key: "1qn45f" }
      ],
      ["path", { d: "M9 12v5", key: "3anwtq" }],
      ["path", { d: "M15 12v5", key: "5xh3zn" }],
      [
        "path",
        { d: "M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1", key: "1fi4x8" }
      ]
    ]);
    var Aperture = createLucideIcon("Aperture", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m14.31 8 5.74 9.94", key: "1y6ab4" }],
      ["path", { d: "M9.69 8h11.48", key: "1wxppr" }],
      ["path", { d: "m7.38 12 5.74-9.94", key: "1grp0k" }],
      ["path", { d: "M9.69 16 3.95 6.06", key: "libnyf" }],
      ["path", { d: "M14.31 16H2.83", key: "x5fava" }],
      ["path", { d: "m16.62 12-5.74 9.94", key: "1vwawt" }]
    ]);
    var AppWindowMac = createLucideIcon("AppWindowMac", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M6 8h.01", key: "x9i8wu" }],
      ["path", { d: "M10 8h.01", key: "1r9ogq" }],
      ["path", { d: "M14 8h.01", key: "1primd" }]
    ]);
    var AppWindow = createLucideIcon("AppWindow", [
      ["rect", { x: "2", y: "4", width: "20", height: "16", rx: "2", key: "izxlao" }],
      ["path", { d: "M10 4v4", key: "pp8u80" }],
      ["path", { d: "M2 8h20", key: "d11cs7" }],
      ["path", { d: "M6 4v4", key: "1svtjw" }]
    ]);
    var Apple = createLucideIcon("Apple", [
      [
        "path",
        {
          d: "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z",
          key: "3s7exb"
        }
      ],
      ["path", { d: "M10 2c1 .5 2 2 2 5", key: "fcco2y" }]
    ]);
    var ArchiveRestore = createLucideIcon("ArchiveRestore", [
      ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
      ["path", { d: "M4 8v11a2 2 0 0 0 2 2h2", key: "tvwodi" }],
      ["path", { d: "M20 8v11a2 2 0 0 1-2 2h-2", key: "1gkqxj" }],
      ["path", { d: "m9 15 3-3 3 3", key: "1pd0qc" }],
      ["path", { d: "M12 12v9", key: "192myk" }]
    ]);
    var ArchiveX = createLucideIcon("ArchiveX", [
      ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
      ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
      ["path", { d: "m9.5 17 5-5", key: "nakeu6" }],
      ["path", { d: "m9.5 12 5 5", key: "1hccrj" }]
    ]);
    var Archive = createLucideIcon("Archive", [
      ["rect", { width: "20", height: "5", x: "2", y: "3", rx: "1", key: "1wp1u1" }],
      ["path", { d: "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8", key: "1s80jp" }],
      ["path", { d: "M10 12h4", key: "a56b0p" }]
    ]);
    var Armchair = createLucideIcon("Armchair", [
      ["path", { d: "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3", key: "irtipd" }],
      [
        "path",
        {
          d: "M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z",
          key: "1qyhux"
        }
      ],
      ["path", { d: "M5 18v2", key: "ppbyun" }],
      ["path", { d: "M19 18v2", key: "gy7782" }]
    ]);
    var ArrowBigDownDash = createLucideIcon("ArrowBigDownDash", [
      ["path", { d: "M15 5H9", key: "1tp3ed" }],
      ["path", { d: "M15 9v3h4l-7 7-7-7h4V9z", key: "ncdc4b" }]
    ]);
    var ArrowBigDown = createLucideIcon("ArrowBigDown", [
      ["path", { d: "M15 6v6h4l-7 7-7-7h4V6h6z", key: "1thax2" }]
    ]);
    var ArrowBigLeftDash = createLucideIcon("ArrowBigLeftDash", [
      ["path", { d: "M19 15V9", key: "1hci5f" }],
      ["path", { d: "M15 15h-3v4l-7-7 7-7v4h3v6z", key: "16tjna" }]
    ]);
    var ArrowBigLeft = createLucideIcon("ArrowBigLeft", [
      ["path", { d: "M18 15h-6v4l-7-7 7-7v4h6v6z", key: "lbrdak" }]
    ]);
    var ArrowBigRightDash = createLucideIcon("ArrowBigRightDash", [
      ["path", { d: "M5 9v6", key: "158jrl" }],
      ["path", { d: "M9 9h3V5l7 7-7 7v-4H9V9z", key: "1sg2xn" }]
    ]);
    var ArrowBigRight = createLucideIcon("ArrowBigRight", [
      ["path", { d: "M6 9h6V5l7 7-7 7v-4H6V9z", key: "7fvt9c" }]
    ]);
    var ArrowBigUpDash = createLucideIcon("ArrowBigUpDash", [
      ["path", { d: "M9 19h6", key: "456am0" }],
      ["path", { d: "M9 15v-3H5l7-7 7 7h-4v3H9z", key: "1r2uve" }]
    ]);
    var ArrowBigUp = createLucideIcon("ArrowBigUp", [
      ["path", { d: "M9 18v-6H5l7-7 7 7h-4v6H9z", key: "1x06kx" }]
    ]);
    var ArrowDown01 = createLucideIcon("ArrowDown01", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
      ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
      ["path", { d: "M15 20h4", key: "1j968p" }]
    ]);
    var ArrowDown10 = createLucideIcon("ArrowDown10", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
      ["path", { d: "M15 10h4", key: "id2lce" }],
      ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
    ]);
    var ArrowDownAZ = createLucideIcon("ArrowDownAZ", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["path", { d: "M20 8h-5", key: "1vsyxs" }],
      ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
      ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
    ]);
    var ArrowDownFromLine = createLucideIcon("ArrowDownFromLine", [
      ["path", { d: "M19 3H5", key: "1236rx" }],
      ["path", { d: "M12 21V7", key: "gj6g52" }],
      ["path", { d: "m6 15 6 6 6-6", key: "h15q88" }]
    ]);
    var ArrowDownLeft = createLucideIcon("ArrowDownLeft", [
      ["path", { d: "M17 7 7 17", key: "15tmo1" }],
      ["path", { d: "M17 17H7V7", key: "1org7z" }]
    ]);
    var ArrowDownNarrowWide = createLucideIcon("ArrowDownNarrowWide", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["path", { d: "M11 4h4", key: "6d7r33" }],
      ["path", { d: "M11 8h7", key: "djye34" }],
      ["path", { d: "M11 12h10", key: "1438ji" }]
    ]);
    var ArrowDownRight = createLucideIcon("ArrowDownRight", [
      ["path", { d: "m7 7 10 10", key: "1fmybs" }],
      ["path", { d: "M17 7v10H7", key: "6fjiku" }]
    ]);
    var ArrowDownToDot = createLucideIcon("ArrowDownToDot", [
      ["path", { d: "M12 2v14", key: "jyx4ut" }],
      ["path", { d: "m19 9-7 7-7-7", key: "1oe3oy" }],
      ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
    ]);
    var ArrowDownToLine = createLucideIcon("ArrowDownToLine", [
      ["path", { d: "M12 17V3", key: "1cwfxf" }],
      ["path", { d: "m6 11 6 6 6-6", key: "12ii2o" }],
      ["path", { d: "M19 21H5", key: "150jfl" }]
    ]);
    var ArrowDownUp = createLucideIcon("ArrowDownUp", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["path", { d: "m21 8-4-4-4 4", key: "1c9v7m" }],
      ["path", { d: "M17 4v16", key: "7dpous" }]
    ]);
    var ArrowDownWideNarrow = createLucideIcon("ArrowDownWideNarrow", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 20V4", key: "1yoxec" }],
      ["path", { d: "M11 4h10", key: "1w87gc" }],
      ["path", { d: "M11 8h7", key: "djye34" }],
      ["path", { d: "M11 12h4", key: "q8tih4" }]
    ]);
    var ArrowDownZA = createLucideIcon("ArrowDownZA", [
      ["path", { d: "m3 16 4 4 4-4", key: "1co6wj" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
      ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
      ["path", { d: "M20 18h-5", key: "18j1r2" }]
    ]);
    var ArrowDown = createLucideIcon("ArrowDown", [
      ["path", { d: "M12 5v14", key: "s699le" }],
      ["path", { d: "m19 12-7 7-7-7", key: "1idqje" }]
    ]);
    var ArrowLeftFromLine = createLucideIcon("ArrowLeftFromLine", [
      ["path", { d: "m9 6-6 6 6 6", key: "7v63n9" }],
      ["path", { d: "M3 12h14", key: "13k4hi" }],
      ["path", { d: "M21 19V5", key: "b4bplr" }]
    ]);
    var ArrowLeftRight = createLucideIcon("ArrowLeftRight", [
      ["path", { d: "M8 3 4 7l4 4", key: "9rb6wj" }],
      ["path", { d: "M4 7h16", key: "6tx8e3" }],
      ["path", { d: "m16 21 4-4-4-4", key: "siv7j2" }],
      ["path", { d: "M20 17H4", key: "h6l3hr" }]
    ]);
    var ArrowLeftToLine = createLucideIcon("ArrowLeftToLine", [
      ["path", { d: "M3 19V5", key: "rwsyhb" }],
      ["path", { d: "m13 6-6 6 6 6", key: "1yhaz7" }],
      ["path", { d: "M7 12h14", key: "uoisry" }]
    ]);
    var ArrowLeft2 = createLucideIcon("ArrowLeft", [
      ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
      ["path", { d: "M19 12H5", key: "x3x0zl" }]
    ]);
    var ArrowRightFromLine = createLucideIcon("ArrowRightFromLine", [
      ["path", { d: "M3 5v14", key: "1nt18q" }],
      ["path", { d: "M21 12H7", key: "13ipq5" }],
      ["path", { d: "m15 18 6-6-6-6", key: "6tx3qv" }]
    ]);
    var ArrowRightLeft = createLucideIcon("ArrowRightLeft", [
      ["path", { d: "m16 3 4 4-4 4", key: "1x1c3m" }],
      ["path", { d: "M20 7H4", key: "zbl0bi" }],
      ["path", { d: "m8 21-4-4 4-4", key: "h9nckh" }],
      ["path", { d: "M4 17h16", key: "g4d7ey" }]
    ]);
    var ArrowRightToLine = createLucideIcon("ArrowRightToLine", [
      ["path", { d: "M17 12H3", key: "8awo09" }],
      ["path", { d: "m11 18 6-6-6-6", key: "8c2y43" }],
      ["path", { d: "M21 5v14", key: "nzette" }]
    ]);
    var ArrowRight = createLucideIcon("ArrowRight", [
      ["path", { d: "M5 12h14", key: "1ays0h" }],
      ["path", { d: "m12 5 7 7-7 7", key: "xquz4c" }]
    ]);
    var ArrowUp01 = createLucideIcon("ArrowUp01", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["rect", { x: "15", y: "4", width: "4", height: "6", ry: "2", key: "1bwicg" }],
      ["path", { d: "M17 20v-6h-2", key: "1qp1so" }],
      ["path", { d: "M15 20h4", key: "1j968p" }]
    ]);
    var ArrowUp10 = createLucideIcon("ArrowUp10", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M17 10V4h-2", key: "zcsr5x" }],
      ["path", { d: "M15 10h4", key: "id2lce" }],
      ["rect", { x: "15", y: "14", width: "4", height: "6", ry: "2", key: "33xykx" }]
    ]);
    var ArrowUpAZ = createLucideIcon("ArrowUpAZ", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M20 8h-5", key: "1vsyxs" }],
      ["path", { d: "M15 10V6.5a2.5 2.5 0 0 1 5 0V10", key: "ag13bf" }],
      ["path", { d: "M15 14h5l-5 6h5", key: "ur5jdg" }]
    ]);
    var ArrowUpDown = createLucideIcon("ArrowUpDown", [
      ["path", { d: "m21 16-4 4-4-4", key: "f6ql7i" }],
      ["path", { d: "M17 20V4", key: "1ejh1v" }],
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }]
    ]);
    var ArrowUpFromDot = createLucideIcon("ArrowUpFromDot", [
      ["path", { d: "m5 9 7-7 7 7", key: "1hw5ic" }],
      ["path", { d: "M12 16V2", key: "ywoabb" }],
      ["circle", { cx: "12", cy: "21", r: "1", key: "o0uj5v" }]
    ]);
    var ArrowUpFromLine = createLucideIcon("ArrowUpFromLine", [
      ["path", { d: "m18 9-6-6-6 6", key: "kcunyi" }],
      ["path", { d: "M12 3v14", key: "7cf3v8" }],
      ["path", { d: "M5 21h14", key: "11awu3" }]
    ]);
    var ArrowUpLeft = createLucideIcon("ArrowUpLeft", [
      ["path", { d: "M7 17V7h10", key: "11bw93" }],
      ["path", { d: "M17 17 7 7", key: "2786uv" }]
    ]);
    var ArrowUpNarrowWide = createLucideIcon("ArrowUpNarrowWide", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M11 12h4", key: "q8tih4" }],
      ["path", { d: "M11 16h7", key: "uosisv" }],
      ["path", { d: "M11 20h10", key: "jvxblo" }]
    ]);
    var ArrowUpRight = createLucideIcon("ArrowUpRight", [
      ["path", { d: "M7 7h10v10", key: "1tivn9" }],
      ["path", { d: "M7 17 17 7", key: "1vkiza" }]
    ]);
    var ArrowUpToLine = createLucideIcon("ArrowUpToLine", [
      ["path", { d: "M5 3h14", key: "7usisc" }],
      ["path", { d: "m18 13-6-6-6 6", key: "1kf1n9" }],
      ["path", { d: "M12 7v14", key: "1akyts" }]
    ]);
    var ArrowUpWideNarrow = createLucideIcon("ArrowUpWideNarrow", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M11 12h10", key: "1438ji" }],
      ["path", { d: "M11 16h7", key: "uosisv" }],
      ["path", { d: "M11 20h4", key: "1krc32" }]
    ]);
    var ArrowUpZA = createLucideIcon("ArrowUpZA", [
      ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
      ["path", { d: "M7 4v16", key: "1glfcx" }],
      ["path", { d: "M15 4h5l-5 6h5", key: "8asdl1" }],
      ["path", { d: "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20", key: "r6l5cz" }],
      ["path", { d: "M20 18h-5", key: "18j1r2" }]
    ]);
    var ArrowUp = createLucideIcon("ArrowUp", [
      ["path", { d: "m5 12 7-7 7 7", key: "hav0vg" }],
      ["path", { d: "M12 19V5", key: "x0mq9r" }]
    ]);
    var ArrowsUpFromLine = createLucideIcon("ArrowsUpFromLine", [
      ["path", { d: "m4 6 3-3 3 3", key: "9aidw8" }],
      ["path", { d: "M7 17V3", key: "19qxw1" }],
      ["path", { d: "m14 6 3-3 3 3", key: "6iy689" }],
      ["path", { d: "M17 17V3", key: "o0fmgi" }],
      ["path", { d: "M4 21h16", key: "1h09gz" }]
    ]);
    var Asterisk = createLucideIcon("Asterisk", [
      ["path", { d: "M12 6v12", key: "1vza4d" }],
      ["path", { d: "M17.196 9 6.804 15", key: "1ah31z" }],
      ["path", { d: "m6.804 9 10.392 6", key: "1b6pxd" }]
    ]);
    var AtSign = createLucideIcon("AtSign", [
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["path", { d: "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8", key: "7n84p3" }]
    ]);
    var Atom = createLucideIcon("Atom", [
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      [
        "path",
        {
          d: "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z",
          key: "1l2ple"
        }
      ],
      [
        "path",
        {
          d: "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z",
          key: "1wam0m"
        }
      ]
    ]);
    var AudioLines = createLucideIcon("AudioLines", [
      ["path", { d: "M2 10v3", key: "1fnikh" }],
      ["path", { d: "M6 6v11", key: "11sgs0" }],
      ["path", { d: "M10 3v18", key: "yhl04a" }],
      ["path", { d: "M14 8v7", key: "3a1oy3" }],
      ["path", { d: "M18 5v13", key: "123xd1" }],
      ["path", { d: "M22 10v3", key: "154ddg" }]
    ]);
    var AudioWaveform = createLucideIcon("AudioWaveform", [
      [
        "path",
        {
          d: "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2",
          key: "57tc96"
        }
      ]
    ]);
    var Award = createLucideIcon("Award", [
      [
        "path",
        {
          d: "m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526",
          key: "1yiouv"
        }
      ],
      ["circle", { cx: "12", cy: "8", r: "6", key: "1vp47v" }]
    ]);
    var Axe = createLucideIcon("Axe", [
      ["path", { d: "m14 12-8.5 8.5a2.12 2.12 0 1 1-3-3L11 9", key: "csbz4o" }],
      ["path", { d: "M15 13 9 7l4-4 6 6h3a8 8 0 0 1-7 7z", key: "113wfo" }]
    ]);
    var Axis3d = createLucideIcon("Axis3d", [
      ["path", { d: "M4 4v16h16", key: "1s015l" }],
      ["path", { d: "m4 20 7-7", key: "17qe9y" }]
    ]);
    var Baby = createLucideIcon("Baby", [
      ["path", { d: "M9 12h.01", key: "157uk2" }],
      ["path", { d: "M15 12h.01", key: "1k8ypt" }],
      ["path", { d: "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5", key: "1u7htd" }],
      [
        "path",
        {
          d: "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1",
          key: "5yv0yz"
        }
      ]
    ]);
    var Backpack = createLucideIcon("Backpack", [
      [
        "path",
        { d: "M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z", key: "1ol0lm" }
      ],
      ["path", { d: "M8 10h8", key: "c7uz4u" }],
      ["path", { d: "M8 18h8", key: "1no2b1" }],
      ["path", { d: "M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6", key: "1fr6do" }],
      ["path", { d: "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2", key: "donm21" }]
    ]);
    var BadgeAlert = createLucideIcon("BadgeAlert", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
      ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
    ]);
    var BadgeCent = createLucideIcon("BadgeCent", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M12 7v10", key: "jspqdw" }],
      ["path", { d: "M15.4 10a4 4 0 1 0 0 4", key: "2eqtx8" }]
    ]);
    var BadgeCheck = createLucideIcon("BadgeCheck", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
    ]);
    var BadgeDollarSign = createLucideIcon("BadgeDollarSign", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }]
    ]);
    var BadgeEuro = createLucideIcon("BadgeEuro", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M7 12h5", key: "gblrwe" }],
      ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
    ]);
    var BadgeHelp = createLucideIcon("BadgeHelp", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
      ["line", { x1: "12", x2: "12.01", y1: "17", y2: "17", key: "io3f8k" }]
    ]);
    var BadgeIndianRupee = createLucideIcon("BadgeIndianRupee", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M8 8h8", key: "1bis0t" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "m13 17-5-1h1a4 4 0 0 0 0-8", key: "nu2bwa" }]
    ]);
    var BadgeInfo = createLucideIcon("BadgeInfo", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["line", { x1: "12", x2: "12", y1: "16", y2: "12", key: "1y1yb1" }],
      ["line", { x1: "12", x2: "12.01", y1: "8", y2: "8", key: "110wyk" }]
    ]);
    var BadgeJapaneseYen = createLucideIcon("BadgeJapaneseYen", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "m9 8 3 3v7", key: "17yadx" }],
      ["path", { d: "m12 11 3-3", key: "p4cfq1" }],
      ["path", { d: "M9 12h6", key: "1c52cq" }],
      ["path", { d: "M9 16h6", key: "8wimt3" }]
    ]);
    var BadgeMinus = createLucideIcon("BadgeMinus", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
    ]);
    var BadgePercent = createLucideIcon("BadgePercent", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["path", { d: "M15 15h.01", key: "lqbp3k" }]
    ]);
    var BadgePlus = createLucideIcon("BadgePlus", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "16", key: "10p56q" }],
      ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
    ]);
    var BadgePoundSterling = createLucideIcon("BadgePoundSterling", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M8 12h4", key: "qz6y1c" }],
      ["path", { d: "M10 16V9.5a2.5 2.5 0 0 1 5 0", key: "3mlbjk" }],
      ["path", { d: "M8 16h7", key: "sbedsn" }]
    ]);
    var BadgeRussianRuble = createLucideIcon("BadgeRussianRuble", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M9 16h5", key: "1syiyw" }],
      ["path", { d: "M9 12h5a2 2 0 1 0 0-4h-3v9", key: "1ge9c1" }]
    ]);
    var BadgeSwissFranc = createLucideIcon("BadgeSwissFranc", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["path", { d: "M11 17V8h4", key: "1bfq6y" }],
      ["path", { d: "M11 12h3", key: "2eqnfz" }],
      ["path", { d: "M9 16h4", key: "1skf3a" }]
    ]);
    var BadgeX = createLucideIcon("BadgeX", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ],
      ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
      ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
    ]);
    var Badge = createLucideIcon("Badge", [
      [
        "path",
        {
          d: "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",
          key: "3c2336"
        }
      ]
    ]);
    var BaggageClaim = createLucideIcon("BaggageClaim", [
      ["path", { d: "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2", key: "4irg2o" }],
      ["path", { d: "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10", key: "14fcyx" }],
      ["rect", { width: "13", height: "8", x: "8", y: "6", rx: "1", key: "o6oiis" }],
      ["circle", { cx: "18", cy: "20", r: "2", key: "t9985n" }],
      ["circle", { cx: "9", cy: "20", r: "2", key: "e5v82j" }]
    ]);
    var Ban = createLucideIcon("Ban", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m4.9 4.9 14.2 14.2", key: "1m5liu" }]
    ]);
    var Banana = createLucideIcon("Banana", [
      ["path", { d: "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5", key: "1cscit" }],
      [
        "path",
        {
          d: "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z",
          key: "1y1nbv"
        }
      ]
    ]);
    var Bandage = createLucideIcon("Bandage", [
      ["path", { d: "M10 10.01h.01", key: "1e9xi7" }],
      ["path", { d: "M10 14.01h.01", key: "ac23bv" }],
      ["path", { d: "M14 10.01h.01", key: "2wfrvf" }],
      ["path", { d: "M14 14.01h.01", key: "8tw8yn" }],
      ["path", { d: "M18 6v11.5", key: "dkbidh" }],
      ["path", { d: "M6 6v12", key: "vkc79e" }],
      ["rect", { x: "2", y: "6", width: "20", height: "12", rx: "2", key: "1wpnh2" }]
    ]);
    var Banknote = createLucideIcon("Banknote", [
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "M6 12h.01M18 12h.01", key: "113zkx" }]
    ]);
    var Barcode = createLucideIcon("Barcode", [
      ["path", { d: "M3 5v14", key: "1nt18q" }],
      ["path", { d: "M8 5v14", key: "1ybrkv" }],
      ["path", { d: "M12 5v14", key: "s699le" }],
      ["path", { d: "M17 5v14", key: "ycjyhj" }],
      ["path", { d: "M21 5v14", key: "nzette" }]
    ]);
    var Baseline = createLucideIcon("Baseline", [
      ["path", { d: "M4 20h16", key: "14thso" }],
      ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var Bath = createLucideIcon("Bath", [
      ["path", { d: "M10 4 8 6", key: "1rru8s" }],
      ["path", { d: "M17 19v2", key: "ts1sot" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "M7 19v2", key: "12npes" }],
      [
        "path",
        {
          d: "M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5",
          key: "14ym8i"
        }
      ]
    ]);
    var BatteryCharging = createLucideIcon("BatteryCharging", [
      ["path", { d: "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1sdynx" }],
      ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1", key: "1gkd3k" }],
      ["path", { d: "m11 7-3 5h4l-3 5", key: "b4a64w" }],
      ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
    ]);
    var BatteryFull = createLucideIcon("BatteryFull", [
      ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
      ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
      ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
      ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }],
      ["line", { x1: "14", x2: "14", y1: "11", y2: "13", key: "c6fn6x" }]
    ]);
    var BatteryLow = createLucideIcon("BatteryLow", [
      ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
      ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
      ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }]
    ]);
    var BatteryMedium = createLucideIcon("BatteryMedium", [
      ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
      ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }],
      ["line", { x1: "6", x2: "6", y1: "11", y2: "13", key: "1wd6dw" }],
      ["line", { x1: "10", x2: "10", y1: "11", y2: "13", key: "haxvl5" }]
    ]);
    var BatteryWarning = createLucideIcon("BatteryWarning", [
      ["path", { d: "M10 17h.01", key: "nbq80n" }],
      ["path", { d: "M10 7v6", key: "nne03l" }],
      ["path", { d: "M14 7h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2", key: "1x5o8m" }],
      ["path", { d: "M22 11v2", key: "1wo06k" }],
      ["path", { d: "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2", key: "1mdjgh" }]
    ]);
    var Battery = createLucideIcon("Battery", [
      ["rect", { width: "16", height: "10", x: "2", y: "7", rx: "2", ry: "2", key: "1w10f2" }],
      ["line", { x1: "22", x2: "22", y1: "11", y2: "13", key: "4dh1rd" }]
    ]);
    var Beaker = createLucideIcon("Beaker", [
      ["path", { d: "M4.5 3h15", key: "c7n0jr" }],
      ["path", { d: "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3", key: "m1uhx7" }],
      ["path", { d: "M6 14h12", key: "4cwo0f" }]
    ]);
    var BeanOff = createLucideIcon("BeanOff", [
      [
        "path",
        {
          d: "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1",
          key: "bq3udt"
        }
      ],
      ["path", { d: "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66", key: "17ccse" }],
      [
        "path",
        {
          d: "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04",
          key: "18zqgq"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Bean = createLucideIcon("Bean", [
      [
        "path",
        {
          d: "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z",
          key: "1tvzk7"
        }
      ],
      ["path", { d: "M5.341 10.62a4 4 0 1 0 5.279-5.28", key: "2cyri2" }]
    ]);
    var BedDouble = createLucideIcon("BedDouble", [
      ["path", { d: "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8", key: "1k78r4" }],
      ["path", { d: "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "fb3tl2" }],
      ["path", { d: "M12 4v6", key: "1dcgq2" }],
      ["path", { d: "M2 18h20", key: "ajqnye" }]
    ]);
    var BedSingle = createLucideIcon("BedSingle", [
      ["path", { d: "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8", key: "1wm6mi" }],
      ["path", { d: "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4", key: "4k93s5" }],
      ["path", { d: "M3 18h18", key: "1h113x" }]
    ]);
    var Bed = createLucideIcon("Bed", [
      ["path", { d: "M2 4v16", key: "vw9hq8" }],
      ["path", { d: "M2 8h18a2 2 0 0 1 2 2v10", key: "1dgv2r" }],
      ["path", { d: "M2 17h20", key: "18nfp3" }],
      ["path", { d: "M6 8v9", key: "1yriud" }]
    ]);
    var Beef = createLucideIcon("Beef", [
      ["circle", { cx: "12.5", cy: "8.5", r: "2.5", key: "9738u8" }],
      [
        "path",
        {
          d: "M12.5 2a6.5 6.5 0 0 0-6.22 4.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3A6.5 6.5 0 0 0 12.5 2Z",
          key: "o0f6za"
        }
      ],
      [
        "path",
        {
          d: "m18.5 6 2.19 4.5a6.48 6.48 0 0 1 .31 2 6.49 6.49 0 0 1-2.6 5.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5",
          key: "k7p6i0"
        }
      ]
    ]);
    var BeerOff = createLucideIcon("BeerOff", [
      ["path", { d: "M13 13v5", key: "igwfh0" }],
      ["path", { d: "M17 11.47V8", key: "16yw0g" }],
      ["path", { d: "M17 11h1a3 3 0 0 1 2.745 4.211", key: "1xbt65" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3", key: "c55o3e" }],
      [
        "path",
        { d: "M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268", key: "1ydug7" }
      ],
      [
        "path",
        {
          d: "M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12",
          key: "q81o7q"
        }
      ],
      ["path", { d: "M9 14.6V18", key: "20ek98" }]
    ]);
    var Beer = createLucideIcon("Beer", [
      ["path", { d: "M17 11h1a3 3 0 0 1 0 6h-1", key: "1yp76v" }],
      ["path", { d: "M9 12v6", key: "1u1cab" }],
      ["path", { d: "M13 12v6", key: "1sugkk" }],
      [
        "path",
        {
          d: "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z",
          key: "1510fo"
        }
      ],
      ["path", { d: "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8", key: "19jb7n" }]
    ]);
    var BellDot = createLucideIcon("BellDot", [
      [
        "path",
        {
          d: "M19.4 14.9C20.2 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 .7 0 1.3.1 1.9.3",
          key: "xcehk"
        }
      ],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
      ["circle", { cx: "18", cy: "8", r: "3", key: "1g0gzu" }]
    ]);
    var BellElectric = createLucideIcon("BellElectric", [
      ["path", { d: "M18.8 4A6.3 8.7 0 0 1 20 9", key: "xve1fh" }],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
      ["rect", { width: "10", height: "6", x: "4", y: "16", rx: "2", key: "17f3te" }],
      ["path", { d: "M14 19c3 0 4.6-1.6 4.6-1.6", key: "n7odp6" }],
      ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }]
    ]);
    var BellMinus = createLucideIcon("BellMinus", [
      [
        "path",
        { d: "M18.4 12c.8 3.8 2.6 5 2.6 5H3s3-2 3-9c0-3.3 2.7-6 6-6 1.8 0 3.4.8 4.5 2", key: "eck70s" }
      ],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
      ["path", { d: "M15 8h6", key: "8ybuxh" }]
    ]);
    var BellOff = createLucideIcon("BellOff", [
      ["path", { d: "M8.7 3A6 6 0 0 1 18 8a21.3 21.3 0 0 0 .6 5", key: "o7mx20" }],
      ["path", { d: "M17 17H3s3-2 3-9a4.67 4.67 0 0 1 .3-1.7", key: "16f1lm" }],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var BellPlus = createLucideIcon("BellPlus", [
      [
        "path",
        {
          d: "M19.3 14.8C20.1 16.4 21 17 21 17H3s3-2 3-9c0-3.3 2.7-6 6-6 1 0 1.9.2 2.8.7",
          key: "guizqy"
        }
      ],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
      ["path", { d: "M15 8h6", key: "8ybuxh" }],
      ["path", { d: "M18 5v6", key: "g5ayrv" }]
    ]);
    var BellRing = createLucideIcon("BellRing", [
      ["path", { d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9", key: "1qo2s2" }],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }],
      ["path", { d: "M4 2C2.8 3.7 2 5.7 2 8", key: "tap9e0" }],
      ["path", { d: "M22 8c0-2.3-.8-4.3-2-6", key: "5bb3ad" }]
    ]);
    var Bell = createLucideIcon("Bell", [
      ["path", { d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9", key: "1qo2s2" }],
      ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }]
    ]);
    var BetweenHorizontalEnd = createLucideIcon("BetweenHorizontalEnd", [
      ["rect", { width: "13", height: "7", x: "3", y: "3", rx: "1", key: "11xb64" }],
      ["path", { d: "m22 15-3-3 3-3", key: "26chmm" }],
      ["rect", { width: "13", height: "7", x: "3", y: "14", rx: "1", key: "k6ky7n" }]
    ]);
    var BetweenHorizontalStart = createLucideIcon("BetweenHorizontalStart", [
      ["rect", { width: "13", height: "7", x: "8", y: "3", rx: "1", key: "pkso9a" }],
      ["path", { d: "m2 9 3 3-3 3", key: "1agib5" }],
      ["rect", { width: "13", height: "7", x: "8", y: "14", rx: "1", key: "1q5fc1" }]
    ]);
    var BetweenVerticalEnd = createLucideIcon("BetweenVerticalEnd", [
      ["rect", { width: "7", height: "13", x: "3", y: "3", rx: "1", key: "1fdu0f" }],
      ["path", { d: "m9 22 3-3 3 3", key: "17z65a" }],
      ["rect", { width: "7", height: "13", x: "14", y: "3", rx: "1", key: "1squn4" }]
    ]);
    var BetweenVerticalStart = createLucideIcon("BetweenVerticalStart", [
      ["rect", { width: "7", height: "13", x: "3", y: "8", rx: "1", key: "1fjrkv" }],
      ["path", { d: "m15 2-3 3-3-3", key: "1uh6eb" }],
      ["rect", { width: "7", height: "13", x: "14", y: "8", rx: "1", key: "w3fjg8" }]
    ]);
    var BicepsFlexed = createLucideIcon("BicepsFlexed", [
      [
        "path",
        {
          d: "M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1",
          key: "1pmlyh"
        }
      ],
      ["path", { d: "M15 14a5 5 0 0 0-7.584 2", key: "5rb254" }],
      ["path", { d: "M9.964 6.825C8.019 7.977 9.5 13 8 15", key: "kbvsx9" }]
    ]);
    var Bike = createLucideIcon("Bike", [
      ["circle", { cx: "18.5", cy: "17.5", r: "3.5", key: "15x4ox" }],
      ["circle", { cx: "5.5", cy: "17.5", r: "3.5", key: "1noe27" }],
      ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
      ["path", { d: "M12 17.5V14l-3-3 4-3 2 3h2", key: "1npguv" }]
    ]);
    var Binary = createLucideIcon("Binary", [
      ["rect", { x: "14", y: "14", width: "4", height: "6", rx: "2", key: "p02svl" }],
      ["rect", { x: "6", y: "4", width: "4", height: "6", rx: "2", key: "xm4xkj" }],
      ["path", { d: "M6 20h4", key: "1i6q5t" }],
      ["path", { d: "M14 10h4", key: "ru81e7" }],
      ["path", { d: "M6 14h2v6", key: "16z9wg" }],
      ["path", { d: "M14 4h2v6", key: "1idq9u" }]
    ]);
    var Binoculars = createLucideIcon("Binoculars", [
      ["path", { d: "M10 10h4", key: "tcdvrf" }],
      ["path", { d: "M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3", key: "3apit1" }],
      [
        "path",
        {
          d: "M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z",
          key: "rhpgnw"
        }
      ],
      ["path", { d: "M 22 16 L 2 16", key: "14lkq7" }],
      [
        "path",
        {
          d: "M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z",
          key: "104b3k"
        }
      ],
      ["path", { d: "M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3", key: "14fczp" }]
    ]);
    var Biohazard = createLucideIcon("Biohazard", [
      ["circle", { cx: "12", cy: "11.9", r: "2", key: "e8h31w" }],
      ["path", { d: "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6", key: "17bolr" }],
      ["path", { d: "m8.9 10.1 1.4.8", key: "15ezny" }],
      ["path", { d: "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5", key: "wtwa5u" }],
      ["path", { d: "m15.1 10.1-1.4.8", key: "1r0b28" }],
      ["path", { d: "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2", key: "m7qszh" }],
      ["path", { d: "M12 13.9v1.6", key: "zfyyim" }],
      ["path", { d: "M13.5 5.4c-1-.2-2-.2-3 0", key: "1bi9q0" }],
      ["path", { d: "M17 16.4c.7-.7 1.2-1.6 1.5-2.5", key: "1rhjqw" }],
      ["path", { d: "M5.5 13.9c.3.9.8 1.8 1.5 2.5", key: "8gsud3" }]
    ]);
    var Bird = createLucideIcon("Bird", [
      ["path", { d: "M16 7h.01", key: "1kdx03" }],
      ["path", { d: "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20", key: "oj1oa8" }],
      ["path", { d: "m20 7 2 .5-2 .5", key: "12nv4d" }],
      ["path", { d: "M10 18v3", key: "1yea0a" }],
      ["path", { d: "M14 17.75V21", key: "1pymcb" }],
      ["path", { d: "M7 18a6 6 0 0 0 3.84-10.61", key: "1npnn0" }]
    ]);
    var Bitcoin = createLucideIcon("Bitcoin", [
      [
        "path",
        {
          d: "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727",
          key: "yr8idg"
        }
      ]
    ]);
    var Blend = createLucideIcon("Blend", [
      ["circle", { cx: "9", cy: "9", r: "7", key: "p2h5vp" }],
      ["circle", { cx: "15", cy: "15", r: "7", key: "19ennj" }]
    ]);
    var Blinds = createLucideIcon("Blinds", [
      ["path", { d: "M3 3h18", key: "o7r712" }],
      ["path", { d: "M20 7H8", key: "gd2fo2" }],
      ["path", { d: "M20 11H8", key: "1ynp89" }],
      ["path", { d: "M10 19h10", key: "19hjk5" }],
      ["path", { d: "M8 15h12", key: "1yqzne" }],
      ["path", { d: "M4 3v14", key: "fggqzn" }],
      ["circle", { cx: "4", cy: "19", r: "2", key: "p3m9r0" }]
    ]);
    var Blocks = createLucideIcon("Blocks", [
      ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
      [
        "path",
        {
          d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3",
          key: "1fpvtg"
        }
      ]
    ]);
    var BluetoothConnected = createLucideIcon("BluetoothConnected", [
      ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
      ["line", { x1: "18", x2: "21", y1: "12", y2: "12", key: "1rsjjs" }],
      ["line", { x1: "3", x2: "6", y1: "12", y2: "12", key: "11yl8c" }]
    ]);
    var BluetoothOff = createLucideIcon("BluetoothOff", [
      ["path", { d: "m17 17-5 5V12l-5 5", key: "v5aci6" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M14.5 9.5 17 7l-5-5v4.5", key: "1kddfz" }]
    ]);
    var BluetoothSearching = createLucideIcon("BluetoothSearching", [
      ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }],
      ["path", { d: "M20.83 14.83a4 4 0 0 0 0-5.66", key: "k8tn1j" }],
      ["path", { d: "M18 12h.01", key: "yjnet6" }]
    ]);
    var Bluetooth = createLucideIcon("Bluetooth", [
      ["path", { d: "m7 7 10 10-5 5V2l5 5L7 17", key: "1q5490" }]
    ]);
    var Bold = createLucideIcon("Bold", [
      [
        "path",
        { d: "M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8", key: "mg9rjx" }
      ]
    ]);
    var Bolt = createLucideIcon("Bolt", [
      [
        "path",
        {
          d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
          key: "yt0hxn"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
    ]);
    var Bomb = createLucideIcon("Bomb", [
      ["circle", { cx: "11", cy: "13", r: "9", key: "hd149" }],
      [
        "path",
        {
          d: "M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95",
          key: "jp4j1b"
        }
      ],
      ["path", { d: "m22 2-1.5 1.5", key: "ay92ug" }]
    ]);
    var Bone = createLucideIcon("Bone", [
      [
        "path",
        {
          d: "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z",
          key: "w610uw"
        }
      ]
    ]);
    var BookA = createLucideIcon("BookA", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "m8 13 4-7 4 7", key: "4rari8" }],
      ["path", { d: "M9.1 11h5.7", key: "1gkovt" }]
    ]);
    var BookAudio = createLucideIcon("BookAudio", [
      ["path", { d: "M12 6v7", key: "1f6ttz" }],
      ["path", { d: "M16 8v3", key: "gejaml" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "M8 8v3", key: "1qzp49" }]
    ]);
    var BookCheck = createLucideIcon("BookCheck", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "m9 9.5 2 2 4-4", key: "1dth82" }]
    ]);
    var BookCopy = createLucideIcon("BookCopy", [
      ["path", { d: "M2 16V4a2 2 0 0 1 2-2h11", key: "spzkk5" }],
      [
        "path",
        {
          d: "M22 18H11a2 2 0 1 0 0 4h10.5a.5.5 0 0 0 .5-.5v-15a.5.5 0 0 0-.5-.5H11a2 2 0 0 0-2 2v12",
          key: "1wz07i"
        }
      ],
      ["path", { d: "M5 14H4a2 2 0 1 0 0 4h1", key: "16gqf9" }]
    ]);
    var BookDashed = createLucideIcon("BookDashed", [
      ["path", { d: "M12 17h2", key: "13u4lk" }],
      ["path", { d: "M12 22h2", key: "kn7ki6" }],
      ["path", { d: "M12 2h2", key: "cvn524" }],
      ["path", { d: "M18 22h1a1 1 0 0 0 1-1", key: "w6gbqz" }],
      ["path", { d: "M18 2h1a1 1 0 0 1 1 1v1", key: "1vpra5" }],
      ["path", { d: "M20 15v2h-2", key: "fph276" }],
      ["path", { d: "M20 8v3", key: "deu0bs" }],
      ["path", { d: "M4 11V9", key: "v3xsx8" }],
      ["path", { d: "M4 19.5V15", key: "6gr39e" }],
      ["path", { d: "M4 5v-.5A2.5 2.5 0 0 1 6.5 2H8", key: "wywhs9" }],
      ["path", { d: "M8 22H6.5a1 1 0 0 1 0-5H8", key: "1cu73q" }]
    ]);
    var BookDown = createLucideIcon("BookDown", [
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "m9 10 3 3 3-3", key: "zt5b4y" }]
    ]);
    var BookHeadphones = createLucideIcon("BookHeadphones", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "M8 12v-2a4 4 0 0 1 8 0v2", key: "1vsqkj" }],
      ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
      ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }]
    ]);
    var BookHeart = createLucideIcon("BookHeart", [
      [
        "path",
        {
          d: "M16 8.2A2.22 2.22 0 0 0 13.8 6c-.8 0-1.4.3-1.8.9-.4-.6-1-.9-1.8-.9A2.22 2.22 0 0 0 8 8.2c0 .6.3 1.2.7 1.6A226.652 226.652 0 0 0 12 13a404 404 0 0 0 3.3-3.1 2.413 2.413 0 0 0 .7-1.7",
          key: "1t75a8"
        }
      ],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ]
    ]);
    var BookImage = createLucideIcon("BookImage", [
      ["path", { d: "m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17", key: "q6ojf0" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["circle", { cx: "10", cy: "8", r: "2", key: "2qkj4p" }]
    ]);
    var BookKey = createLucideIcon("BookKey", [
      ["path", { d: "m19 3 1 1", key: "ze14oc" }],
      ["path", { d: "m20 2-4.5 4.5", key: "1sppr8" }],
      ["path", { d: "M20 8v13a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "1ocbpn" }],
      ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H14", key: "1gfsgw" }],
      ["circle", { cx: "14", cy: "8", r: "2", key: "u49eql" }]
    ]);
    var BookLock = createLucideIcon("BookLock", [
      ["path", { d: "M18 6V4a2 2 0 1 0-4 0v2", key: "1aquzs" }],
      ["path", { d: "M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "1rkj32" }],
      ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10", key: "18wgow" }],
      ["rect", { x: "12", y: "6", width: "8", height: "5", rx: "1", key: "73l30o" }]
    ]);
    var BookMarked = createLucideIcon("BookMarked", [
      ["path", { d: "M10 2v8l3-3 3 3V2", key: "sqw3rj" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ]
    ]);
    var BookMinus = createLucideIcon("BookMinus", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var BookOpenCheck = createLucideIcon("BookOpenCheck", [
      ["path", { d: "M12 21V7", key: "gj6g52" }],
      ["path", { d: "m16 12 2 2 4-4", key: "mdajum" }],
      [
        "path",
        {
          d: "M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3",
          key: "8arnkb"
        }
      ]
    ]);
    var BookOpenText = createLucideIcon("BookOpenText", [
      ["path", { d: "M12 7v14", key: "1akyts" }],
      ["path", { d: "M16 12h2", key: "7q9ll5" }],
      ["path", { d: "M16 8h2", key: "msurwy" }],
      [
        "path",
        {
          d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
          key: "ruj8y"
        }
      ],
      ["path", { d: "M6 12h2", key: "32wvfc" }],
      ["path", { d: "M6 8h2", key: "30oboj" }]
    ]);
    var BookOpen = createLucideIcon("BookOpen", [
      ["path", { d: "M12 7v14", key: "1akyts" }],
      [
        "path",
        {
          d: "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z",
          key: "ruj8y"
        }
      ]
    ]);
    var BookPlus = createLucideIcon("BookPlus", [
      ["path", { d: "M12 7v6", key: "lw1j43" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var BookText = createLucideIcon("BookText", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "M8 11h8", key: "vwpz6n" }],
      ["path", { d: "M8 7h6", key: "1f0q6e" }]
    ]);
    var BookType = createLucideIcon("BookType", [
      ["path", { d: "M10 13h4", key: "ytezjc" }],
      ["path", { d: "M12 6v7", key: "1f6ttz" }],
      ["path", { d: "M16 8V6H8v2", key: "x8j6u4" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ]
    ]);
    var BookUp2 = createLucideIcon("BookUp2", [
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      ["path", { d: "M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20", key: "161d7n" }],
      ["path", { d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2", key: "1lorq7" }],
      ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
      ["path", { d: "m9 5 3-3 3 3", key: "l8vdw6" }]
    ]);
    var BookUp = createLucideIcon("BookUp", [
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
    ]);
    var BookUser = createLucideIcon("BookUser", [
      ["path", { d: "M15 13a3 3 0 1 0-6 0", key: "10j68g" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }]
    ]);
    var BookX = createLucideIcon("BookX", [
      ["path", { d: "m14.5 7-5 5", key: "dy991v" }],
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ],
      ["path", { d: "m9.5 7 5 5", key: "s45iea" }]
    ]);
    var Book = createLucideIcon("Book", [
      [
        "path",
        {
          d: "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20",
          key: "k3hazp"
        }
      ]
    ]);
    var BookmarkCheck = createLucideIcon("BookmarkCheck", [
      ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
      ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }]
    ]);
    var BookmarkMinus = createLucideIcon("BookmarkMinus", [
      ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
      ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
    ]);
    var BookmarkPlus = createLucideIcon("BookmarkPlus", [
      ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }],
      ["line", { x1: "12", x2: "12", y1: "7", y2: "13", key: "1cppfj" }],
      ["line", { x1: "15", x2: "9", y1: "10", y2: "10", key: "1gty7f" }]
    ]);
    var BookmarkX = createLucideIcon("BookmarkX", [
      ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z", key: "169p4p" }],
      ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
      ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
    ]);
    var Bookmark = createLucideIcon("Bookmark", [
      ["path", { d: "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z", key: "1fy3hk" }]
    ]);
    var BoomBox = createLucideIcon("BoomBox", [
      ["path", { d: "M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4", key: "vvzvr1" }],
      ["path", { d: "M8 8v1", key: "xcqmfk" }],
      ["path", { d: "M12 8v1", key: "1rj8u4" }],
      ["path", { d: "M16 8v1", key: "1q12zr" }],
      ["rect", { width: "20", height: "12", x: "2", y: "9", rx: "2", key: "igpb89" }],
      ["circle", { cx: "8", cy: "15", r: "2", key: "fa4a8s" }],
      ["circle", { cx: "16", cy: "15", r: "2", key: "14c3ya" }]
    ]);
    var BotMessageSquare = createLucideIcon("BotMessageSquare", [
      ["path", { d: "M12 6V2H8", key: "1155em" }],
      ["path", { d: "m8 18-4 4V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2Z", key: "w2lp3e" }],
      ["path", { d: "M2 12h2", key: "1t8f8n" }],
      ["path", { d: "M9 11v2", key: "1ueba0" }],
      ["path", { d: "M15 11v2", key: "i11awn" }],
      ["path", { d: "M20 12h2", key: "1q8mjw" }]
    ]);
    var BotOff = createLucideIcon("BotOff", [
      ["path", { d: "M13.67 8H18a2 2 0 0 1 2 2v4.33", key: "7az073" }],
      ["path", { d: "M2 14h2", key: "vft8re" }],
      ["path", { d: "M20 14h2", key: "4cs60a" }],
      ["path", { d: "M22 22 2 2", key: "1r8tn9" }],
      ["path", { d: "M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586", key: "s09a7a" }],
      ["path", { d: "M9 13v2", key: "rq6x2g" }],
      ["path", { d: "M9.67 4H12v2.33", key: "110xot" }]
    ]);
    var Bot = createLucideIcon("Bot", [
      ["path", { d: "M12 8V4H8", key: "hb8ula" }],
      ["rect", { width: "16", height: "12", x: "4", y: "8", rx: "2", key: "enze0r" }],
      ["path", { d: "M2 14h2", key: "vft8re" }],
      ["path", { d: "M20 14h2", key: "4cs60a" }],
      ["path", { d: "M15 13v2", key: "1xurst" }],
      ["path", { d: "M9 13v2", key: "rq6x2g" }]
    ]);
    var Box = createLucideIcon("Box", [
      [
        "path",
        {
          d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
          key: "hh9hay"
        }
      ],
      ["path", { d: "m3.3 7 8.7 5 8.7-5", key: "g66t2b" }],
      ["path", { d: "M12 22V12", key: "d0xqtd" }]
    ]);
    var Boxes = createLucideIcon("Boxes", [
      [
        "path",
        {
          d: "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z",
          key: "lc1i9w"
        }
      ],
      ["path", { d: "m7 16.5-4.74-2.85", key: "1o9zyk" }],
      ["path", { d: "m7 16.5 5-3", key: "va8pkn" }],
      ["path", { d: "M7 16.5v5.17", key: "jnp8gn" }],
      [
        "path",
        {
          d: "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z",
          key: "8zsnat"
        }
      ],
      ["path", { d: "m17 16.5-5-3", key: "8arw3v" }],
      ["path", { d: "m17 16.5 4.74-2.85", key: "8rfmw" }],
      ["path", { d: "M17 16.5v5.17", key: "k6z78m" }],
      [
        "path",
        {
          d: "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z",
          key: "1xygjf"
        }
      ],
      ["path", { d: "M12 8 7.26 5.15", key: "1vbdud" }],
      ["path", { d: "m12 8 4.74-2.85", key: "3rx089" }],
      ["path", { d: "M12 13.5V8", key: "1io7kd" }]
    ]);
    var Braces = createLucideIcon("Braces", [
      [
        "path",
        { d: "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1", key: "ezmyqa" }
      ],
      [
        "path",
        {
          d: "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1",
          key: "e1hn23"
        }
      ]
    ]);
    var Brackets = createLucideIcon("Brackets", [
      ["path", { d: "M16 3h3v18h-3", key: "1yor1f" }],
      ["path", { d: "M8 21H5V3h3", key: "1qrfwo" }]
    ]);
    var BrainCircuit = createLucideIcon("BrainCircuit", [
      [
        "path",
        {
          d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
          key: "l5xja"
        }
      ],
      ["path", { d: "M9 13a4.5 4.5 0 0 0 3-4", key: "10igwf" }],
      ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
      ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
      ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
      ["path", { d: "M12 13h4", key: "1ku699" }],
      ["path", { d: "M12 18h6a2 2 0 0 1 2 2v1", key: "105ag5" }],
      ["path", { d: "M12 8h8", key: "1lhi5i" }],
      ["path", { d: "M16 8V5a2 2 0 0 1 2-2", key: "u6izg6" }],
      ["circle", { cx: "16", cy: "13", r: ".5", key: "ry7gng" }],
      ["circle", { cx: "18", cy: "3", r: ".5", key: "1aiba7" }],
      ["circle", { cx: "20", cy: "21", r: ".5", key: "yhc1fs" }],
      ["circle", { cx: "20", cy: "8", r: ".5", key: "1e43v0" }]
    ]);
    var BrainCog = createLucideIcon("BrainCog", [
      [
        "path",
        {
          d: "M12 5a3 3 0 1 0-5.997.142 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588 4 4 0 0 0 7.636 2.106 3.2 3.2 0 0 0 .164-.546c.028-.13.306-.13.335 0a3.2 3.2 0 0 0 .163.546 4 4 0 0 0 7.636-2.106 4 4 0 0 0 .556-6.588 4 4 0 0 0-2.526-5.77A3 3 0 1 0 12 5",
          key: "1kgmhc"
        }
      ],
      ["path", { d: "M17.599 6.5a3 3 0 0 0 .399-1.375", key: "tmeiqw" }],
      ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
      ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
      ["path", { d: "M19.938 10.5a4 4 0 0 1 .585.396", key: "1qfode" }],
      ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
      ["path", { d: "M19.967 17.484A4 4 0 0 1 18 18", key: "159ez6" }],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["path", { d: "m15.7 10.4-.9.4", key: "ayzo6p" }],
      ["path", { d: "m9.2 13.2-.9.4", key: "1uzb3g" }],
      ["path", { d: "m13.6 15.7-.4-.9", key: "11ifqf" }],
      ["path", { d: "m10.8 9.2-.4-.9", key: "1pmk2v" }],
      ["path", { d: "m15.7 13.5-.9-.4", key: "7ng02m" }],
      ["path", { d: "m9.2 10.9-.9-.4", key: "1x66zd" }],
      ["path", { d: "m10.5 15.7.4-.9", key: "3js94g" }],
      ["path", { d: "m13.1 9.2.4-.9", key: "18n7mc" }]
    ]);
    var Brain = createLucideIcon("Brain", [
      [
        "path",
        {
          d: "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z",
          key: "l5xja"
        }
      ],
      [
        "path",
        {
          d: "M12 5a3 3 0 1 1 5.997.125 4 4 0 0 1 2.526 5.77 4 4 0 0 1-.556 6.588A4 4 0 1 1 12 18Z",
          key: "ep3f8r"
        }
      ],
      ["path", { d: "M15 13a4.5 4.5 0 0 1-3-4 4.5 4.5 0 0 1-3 4", key: "1p4c4q" }],
      ["path", { d: "M17.599 6.5a3 3 0 0 0 .399-1.375", key: "tmeiqw" }],
      ["path", { d: "M6.003 5.125A3 3 0 0 0 6.401 6.5", key: "105sqy" }],
      ["path", { d: "M3.477 10.896a4 4 0 0 1 .585-.396", key: "ql3yin" }],
      ["path", { d: "M19.938 10.5a4 4 0 0 1 .585.396", key: "1qfode" }],
      ["path", { d: "M6 18a4 4 0 0 1-1.967-.516", key: "2e4loj" }],
      ["path", { d: "M19.967 17.484A4 4 0 0 1 18 18", key: "159ez6" }]
    ]);
    var BrickWall = createLucideIcon("BrickWall", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M12 9v6", key: "199k2o" }],
      ["path", { d: "M16 15v6", key: "8rj2es" }],
      ["path", { d: "M16 3v6", key: "1j6rpj" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "M8 15v6", key: "1stoo3" }],
      ["path", { d: "M8 3v6", key: "vlvjmk" }]
    ]);
    var BriefcaseBusiness = createLucideIcon("BriefcaseBusiness", [
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2", key: "1ksdt3" }],
      ["path", { d: "M22 13a18.15 18.15 0 0 1-20 0", key: "12hx5q" }],
      ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
    ]);
    var BriefcaseConveyorBelt = createLucideIcon("BriefcaseConveyorBelt", [
      ["path", { d: "M10 20v2", key: "1n8e1g" }],
      ["path", { d: "M14 20v2", key: "1lq872" }],
      ["path", { d: "M18 20v2", key: "10uadw" }],
      ["path", { d: "M21 20H3", key: "kdqkdp" }],
      ["path", { d: "M6 20v2", key: "a9bc87" }],
      ["path", { d: "M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12", key: "17n9tx" }],
      ["rect", { x: "4", y: "6", width: "16", height: "10", rx: "2", key: "1097i5" }]
    ]);
    var BriefcaseMedical = createLucideIcon("BriefcaseMedical", [
      ["path", { d: "M12 11v4", key: "a6ujw6" }],
      ["path", { d: "M14 13h-4", key: "1pl8zg" }],
      ["path", { d: "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2", key: "1ksdt3" }],
      ["path", { d: "M18 6v14", key: "1mu4gy" }],
      ["path", { d: "M6 6v14", key: "1s15cj" }],
      ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
    ]);
    var Briefcase = createLucideIcon("Briefcase", [
      ["path", { d: "M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16", key: "jecpp" }],
      ["rect", { width: "20", height: "14", x: "2", y: "6", rx: "2", key: "i6l2r4" }]
    ]);
    var BringToFront = createLucideIcon("BringToFront", [
      ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "2", key: "yj20xf" }],
      ["path", { d: "M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2", key: "1ltk23" }],
      ["path", { d: "M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2", key: "1q24h9" }]
    ]);
    var Brush = createLucideIcon("Brush", [
      ["path", { d: "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08", key: "1styjt" }],
      [
        "path",
        {
          d: "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z",
          key: "z0l1mu"
        }
      ]
    ]);
    var BugOff = createLucideIcon("BugOff", [
      ["path", { d: "M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2", key: "vl8zik" }],
      ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
      ["path", { d: "M22 13h-4v-2a4 4 0 0 0-4-4h-1.3", key: "1ou0bd" }],
      ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13", key: "1njkjs" }],
      ["path", { d: "M12 20v-8", key: "i3yub9" }],
      ["path", { d: "M6 13H2", key: "82j7cp" }],
      ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }]
    ]);
    var BugPlay = createLucideIcon("BugPlay", [
      [
        "path",
        {
          d: "M12.765 21.522a.5.5 0 0 1-.765-.424v-8.196a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z",
          key: "17shqo"
        }
      ],
      ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
      ["path", { d: "M18 11a4 4 0 0 0-4-4h-4a4 4 0 0 0-4 4v3a6.1 6.1 0 0 0 2 4.5", key: "1tjixy" }],
      ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
      ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
      ["path", { d: "M6 13H2", key: "82j7cp" }],
      ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
      ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
      ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }]
    ]);
    var Bug = createLucideIcon("Bug", [
      ["path", { d: "m8 2 1.88 1.88", key: "fmnt4t" }],
      ["path", { d: "M14.12 3.88 16 2", key: "qol33r" }],
      ["path", { d: "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1", key: "d7y7pr" }],
      [
        "path",
        {
          d: "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6",
          key: "xs1cw7"
        }
      ],
      ["path", { d: "M12 20v-9", key: "1qisl0" }],
      ["path", { d: "M6.53 9C4.6 8.8 3 7.1 3 5", key: "32zzws" }],
      ["path", { d: "M6 13H2", key: "82j7cp" }],
      ["path", { d: "M3 21c0-2.1 1.7-3.9 3.8-4", key: "4p0ekp" }],
      ["path", { d: "M20.97 5c0 2.1-1.6 3.8-3.5 4", key: "18gb23" }],
      ["path", { d: "M22 13h-4", key: "1jl80f" }],
      ["path", { d: "M17.2 17c2.1.1 3.8 1.9 3.8 4", key: "k3fwyw" }]
    ]);
    var Building2 = createLucideIcon("Building2", [
      ["path", { d: "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z", key: "1b4qmf" }],
      ["path", { d: "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2", key: "i71pzd" }],
      ["path", { d: "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2", key: "10jefs" }],
      ["path", { d: "M10 6h4", key: "1itunk" }],
      ["path", { d: "M10 10h4", key: "tcdvrf" }],
      ["path", { d: "M10 14h4", key: "kelpxr" }],
      ["path", { d: "M10 18h4", key: "1ulq68" }]
    ]);
    var Building = createLucideIcon("Building", [
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
      ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
      ["path", { d: "M8 6h.01", key: "1dz90k" }],
      ["path", { d: "M16 6h.01", key: "1x0f13" }],
      ["path", { d: "M12 6h.01", key: "1vi96p" }],
      ["path", { d: "M12 10h.01", key: "1nrarc" }],
      ["path", { d: "M12 14h.01", key: "1etili" }],
      ["path", { d: "M16 10h.01", key: "1m94wz" }],
      ["path", { d: "M16 14h.01", key: "1gbofw" }],
      ["path", { d: "M8 10h.01", key: "19clt8" }],
      ["path", { d: "M8 14h.01", key: "6423bh" }]
    ]);
    var BusFront = createLucideIcon("BusFront", [
      ["path", { d: "M4 6 2 7", key: "1mqr15" }],
      ["path", { d: "M10 6h4", key: "1itunk" }],
      ["path", { d: "m22 7-2-1", key: "1umjhc" }],
      ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
      ["path", { d: "M4 11h16", key: "mpoxn0" }],
      ["path", { d: "M8 15h.01", key: "a7atzg" }],
      ["path", { d: "M16 15h.01", key: "rnfrdf" }],
      ["path", { d: "M6 19v2", key: "1loha6" }],
      ["path", { d: "M18 21v-2", key: "sqyl04" }]
    ]);
    var Bus = createLucideIcon("Bus", [
      ["path", { d: "M8 6v6", key: "18i7km" }],
      ["path", { d: "M15 6v6", key: "1sg6z9" }],
      ["path", { d: "M2 12h19.6", key: "de5uta" }],
      [
        "path",
        {
          d: "M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3",
          key: "1wwztk"
        }
      ],
      ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }],
      ["path", { d: "M9 18h5", key: "lrx6i" }],
      ["circle", { cx: "16", cy: "18", r: "2", key: "1v4tcr" }]
    ]);
    var CableCar = createLucideIcon("CableCar", [
      ["path", { d: "M10 3h.01", key: "lbucoy" }],
      ["path", { d: "M14 2h.01", key: "1k8aa1" }],
      ["path", { d: "m2 9 20-5", key: "1kz0j5" }],
      ["path", { d: "M12 12V6.5", key: "1vbrij" }],
      ["rect", { width: "16", height: "10", x: "4", y: "12", rx: "3", key: "if91er" }],
      ["path", { d: "M9 12v5", key: "3anwtq" }],
      ["path", { d: "M15 12v5", key: "5xh3zn" }],
      ["path", { d: "M4 17h16", key: "g4d7ey" }]
    ]);
    var Cable = createLucideIcon("Cable", [
      [
        "path",
        {
          d: "M17 21v-2a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1",
          key: "10bnsj"
        }
      ],
      ["path", { d: "M19 15V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V9", key: "1eqmu1" }],
      ["path", { d: "M21 21v-2h-4", key: "14zm7j" }],
      ["path", { d: "M3 5h4V3", key: "z442eg" }],
      [
        "path",
        { d: "M7 5a1 1 0 0 1 1 1v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1V3", key: "ebdjd7" }
      ]
    ]);
    var CakeSlice = createLucideIcon("CakeSlice", [
      ["circle", { cx: "9", cy: "7", r: "2", key: "1305pl" }],
      [
        "path",
        { d: "M7.2 7.9 3 11v9c0 .6.4 1 1 1h16c.6 0 1-.4 1-1v-9c0-2-3-6-7-8l-3.6 2.6", key: "xle13f" }
      ],
      ["path", { d: "M16 13H3", key: "1wpj08" }],
      ["path", { d: "M16 17H3", key: "3lvfcd" }]
    ]);
    var Cake = createLucideIcon("Cake", [
      ["path", { d: "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8", key: "1w3rig" }],
      ["path", { d: "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1", key: "n2jgmb" }],
      ["path", { d: "M2 21h20", key: "1nyx9w" }],
      ["path", { d: "M7 8v3", key: "1qtyvj" }],
      ["path", { d: "M12 8v3", key: "hwp4zt" }],
      ["path", { d: "M17 8v3", key: "1i6e5u" }],
      ["path", { d: "M7 4h.01", key: "1bh4kh" }],
      ["path", { d: "M12 4h.01", key: "1ujb9j" }],
      ["path", { d: "M17 4h.01", key: "1upcoc" }]
    ]);
    var Calculator = createLucideIcon("Calculator", [
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
      ["line", { x1: "8", x2: "16", y1: "6", y2: "6", key: "x4nwl0" }],
      ["line", { x1: "16", x2: "16", y1: "14", y2: "18", key: "wjye3r" }],
      ["path", { d: "M16 10h.01", key: "1m94wz" }],
      ["path", { d: "M12 10h.01", key: "1nrarc" }],
      ["path", { d: "M8 10h.01", key: "19clt8" }],
      ["path", { d: "M12 14h.01", key: "1etili" }],
      ["path", { d: "M8 14h.01", key: "6423bh" }],
      ["path", { d: "M12 18h.01", key: "mhygvu" }],
      ["path", { d: "M8 18h.01", key: "lrp35t" }]
    ]);
    var Calendar1 = createLucideIcon("Calendar1", [
      ["path", { d: "M11 14h1v4", key: "fy54vd" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
    ]);
    var CalendarArrowDown = createLucideIcon("CalendarArrowDown", [
      ["path", { d: "m14 18 4 4 4-4", key: "1waygx" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M18 14v8", key: "irew45" }],
      [
        "path",
        { d: "M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343", key: "bse4f3" }
      ],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }]
    ]);
    var CalendarArrowUp = createLucideIcon("CalendarArrowUp", [
      ["path", { d: "m14 18 4-4 4 4", key: "ftkppy" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M18 22v-8", key: "su0gjh" }],
      ["path", { d: "M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9", key: "1exg90" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }]
    ]);
    var CalendarCheck2 = createLucideIcon("CalendarCheck2", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "bce9hv" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
    ]);
    var CalendarCheck = createLucideIcon("CalendarCheck", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "m9 16 2 2 4-4", key: "19s6y9" }]
    ]);
    var CalendarClock = createLucideIcon("CalendarClock", [
      ["path", { d: "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5", key: "1osxxc" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M3 10h5", key: "r794hk" }],
      ["path", { d: "M17.5 17.5 16 16.3V14", key: "akvzfd" }],
      ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }]
    ]);
    var CalendarCog = createLucideIcon("CalendarCog", [
      ["path", { d: "m15.2 16.9-.9-.4", key: "1r0w5f" }],
      ["path", { d: "m15.2 19.1-.9.4", key: "j188fs" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "m16.9 15.2-.4-.9", key: "699xu" }],
      ["path", { d: "m16.9 20.8-.4.9", key: "dfjc4z" }],
      ["path", { d: "m19.5 14.3-.4.9", key: "1eb35c" }],
      ["path", { d: "m19.5 21.7-.4-.9", key: "1tonu5" }],
      ["path", { d: "M21 10.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "11kmuh" }],
      ["path", { d: "m21.7 16.5-.9.4", key: "1knoei" }],
      ["path", { d: "m21.7 19.5-.9-.4", key: "q4dx6b" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
    ]);
    var CalendarDays = createLucideIcon("CalendarDays", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 14h.01", key: "6423bh" }],
      ["path", { d: "M12 14h.01", key: "1etili" }],
      ["path", { d: "M16 14h.01", key: "1gbofw" }],
      ["path", { d: "M8 18h.01", key: "lrp35t" }],
      ["path", { d: "M12 18h.01", key: "mhygvu" }],
      ["path", { d: "M16 18h.01", key: "kzsmim" }]
    ]);
    var CalendarFold = createLucideIcon("CalendarFold", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z", key: "kg77oy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M15 22v-4a2 2 0 0 1 2-2h4", key: "1gnbqr" }]
    ]);
    var CalendarHeart = createLucideIcon("CalendarHeart", [
      ["path", { d: "M3 10h18V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7", key: "136lmk" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      [
        "path",
        {
          d: "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
          key: "1t7hil"
        }
      ]
    ]);
    var CalendarMinus2 = createLucideIcon("CalendarMinus2", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M10 16h4", key: "17e571" }]
    ]);
    var CalendarMinus = createLucideIcon("CalendarMinus", [
      ["path", { d: "M16 19h6", key: "xwg31i" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5", key: "1scpom" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }]
    ]);
    var CalendarOff = createLucideIcon("CalendarOff", [
      ["path", { d: "M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18", key: "16swn3" }],
      ["path", { d: "M21 15.5V6a2 2 0 0 0-2-2H9.5", key: "yhw86o" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M3 10h7", key: "1wap6i" }],
      ["path", { d: "M21 10h-5.5", key: "quycpq" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var CalendarPlus2 = createLucideIcon("CalendarPlus2", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M10 16h4", key: "17e571" }],
      ["path", { d: "M12 14v4", key: "1thi36" }]
    ]);
    var CalendarPlus = createLucideIcon("CalendarPlus", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M16 19h6", key: "xwg31i" }],
      ["path", { d: "M19 16v6", key: "tddt3s" }]
    ]);
    var CalendarRange = createLucideIcon("CalendarRange", [
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M17 14h-6", key: "bkmgh3" }],
      ["path", { d: "M13 18H7", key: "bb0bb7" }],
      ["path", { d: "M7 14h.01", key: "1qa3f1" }],
      ["path", { d: "M17 18h.01", key: "1bdyru" }]
    ]);
    var CalendarSearch = createLucideIcon("CalendarSearch", [
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25", key: "1jrsq6" }],
      ["path", { d: "m22 22-1.875-1.875", key: "13zax7" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
    ]);
    var CalendarSync = createLucideIcon("CalendarSync", [
      ["path", { d: "M11 10v4h4", key: "172dkj" }],
      ["path", { d: "m11 14 1.535-1.605a5 5 0 0 1 8 1.5", key: "vu0qm5" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "m21 18-1.535 1.605a5 5 0 0 1-8-1.5", key: "1qgeyt" }],
      ["path", { d: "M21 22v-4h-4", key: "hrummi" }],
      ["path", { d: "M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3", key: "mctw84" }],
      ["path", { d: "M3 10h4", key: "1el30a" }],
      ["path", { d: "M8 2v4", key: "1cmpym" }]
    ]);
    var CalendarX2 = createLucideIcon("CalendarX2", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8", key: "3spt84" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "m17 22 5-5", key: "1k6ppv" }],
      ["path", { d: "m17 17 5 5", key: "p7ous7" }]
    ]);
    var CalendarX = createLucideIcon("CalendarX", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }],
      ["path", { d: "m14 14-4 4", key: "rymu2i" }],
      ["path", { d: "m10 14 4 4", key: "3sz06r" }]
    ]);
    var Calendar2 = createLucideIcon("Calendar", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
      ["path", { d: "M3 10h18", key: "8toen8" }]
    ]);
    var CameraOff = createLucideIcon("CameraOff", [
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
      ["path", { d: "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16", key: "qmtpty" }],
      ["path", { d: "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5", key: "1ufyfc" }],
      ["path", { d: "M14.121 15.121A3 3 0 1 1 9.88 10.88", key: "11zox6" }]
    ]);
    var Camera = createLucideIcon("Camera", [
      [
        "path",
        {
          d: "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z",
          key: "1tc9qg"
        }
      ],
      ["circle", { cx: "12", cy: "13", r: "3", key: "1vg3eu" }]
    ]);
    var CandyCane = createLucideIcon("CandyCane", [
      [
        "path",
        {
          d: "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z",
          key: "isaq8g"
        }
      ],
      ["path", { d: "M17.75 7 15 2.1", key: "12x7e8" }],
      ["path", { d: "M10.9 4.8 13 9", key: "100a87" }],
      ["path", { d: "m7.9 9.7 2 4.4", key: "ntfhaj" }],
      ["path", { d: "M4.9 14.7 7 18.9", key: "1x43jy" }]
    ]);
    var CandyOff = createLucideIcon("CandyOff", [
      ["path", { d: "m8.5 8.5-1 1a4.95 4.95 0 0 0 7 7l1-1", key: "1ff4ui" }],
      [
        "path",
        { d: "M11.843 6.187A4.947 4.947 0 0 1 16.5 7.5a4.947 4.947 0 0 1 1.313 4.657", key: "1sbrv4" }
      ],
      ["path", { d: "M14 16.5V14", key: "1maf8j" }],
      ["path", { d: "M14 6.5v1.843", key: "1a6u6t" }],
      ["path", { d: "M10 10v7.5", key: "80pj65" }],
      [
        "path",
        {
          d: "m16 7 1-5 1.367.683A3 3 0 0 0 19.708 3H21v1.292a3 3 0 0 0 .317 1.341L22 7l-5 1",
          key: "11a9mt"
        }
      ],
      [
        "path",
        {
          d: "m8 17-1 5-1.367-.683A3 3 0 0 0 4.292 21H3v-1.292a3 3 0 0 0-.317-1.341L2 17l5-1",
          key: "3mjmon"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Candy = createLucideIcon("Candy", [
      ["path", { d: "m9.5 7.5-2 2a4.95 4.95 0 1 0 7 7l2-2a4.95 4.95 0 1 0-7-7Z", key: "ue6khb" }],
      ["path", { d: "M14 6.5v10", key: "5xnk7c" }],
      ["path", { d: "M10 7.5v10", key: "1uew51" }],
      [
        "path",
        { d: "m16 7 1-5 1.37.68A3 3 0 0 0 19.7 3H21v1.3c0 .46.1.92.32 1.33L22 7l-5 1", key: "b9cp6k" }
      ],
      [
        "path",
        { d: "m8 17-1 5-1.37-.68A3 3 0 0 0 4.3 21H3v-1.3a3 3 0 0 0-.32-1.33L2 17l5-1", key: "5lney8" }
      ]
    ]);
    var Cannabis = createLucideIcon("Cannabis", [
      ["path", { d: "M12 22v-4", key: "1utk9m" }],
      [
        "path",
        {
          d: "M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6",
          key: "1mezod"
        }
      ]
    ]);
    var CaptionsOff = createLucideIcon("CaptionsOff", [
      ["path", { d: "M10.5 5H19a2 2 0 0 1 2 2v8.5", key: "jqtk4d" }],
      ["path", { d: "M17 11h-.5", key: "1961ue" }],
      ["path", { d: "M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2", key: "1keqsi" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M7 11h4", key: "1o1z6v" }],
      ["path", { d: "M7 15h2.5", key: "1ina1g" }]
    ]);
    var Captions = createLucideIcon("Captions", [
      ["rect", { width: "18", height: "14", x: "3", y: "5", rx: "2", ry: "2", key: "12ruh7" }],
      ["path", { d: "M7 15h4M15 15h2M7 11h2M13 11h4", key: "1ueiar" }]
    ]);
    var CarFront = createLucideIcon("CarFront", [
      [
        "path",
        { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
      ],
      ["path", { d: "M7 14h.01", key: "1qa3f1" }],
      ["path", { d: "M17 14h.01", key: "7oqj8z" }],
      ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
      ["path", { d: "M5 18v2", key: "ppbyun" }],
      ["path", { d: "M19 18v2", key: "gy7782" }]
    ]);
    var CarTaxiFront = createLucideIcon("CarTaxiFront", [
      ["path", { d: "M10 2h4", key: "n1abiw" }],
      [
        "path",
        { d: "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8", key: "1imjwt" }
      ],
      ["path", { d: "M7 14h.01", key: "1qa3f1" }],
      ["path", { d: "M17 14h.01", key: "7oqj8z" }],
      ["rect", { width: "18", height: "8", x: "3", y: "10", rx: "2", key: "a7itu8" }],
      ["path", { d: "M5 18v2", key: "ppbyun" }],
      ["path", { d: "M19 18v2", key: "gy7782" }]
    ]);
    var Car = createLucideIcon("Car", [
      [
        "path",
        {
          d: "M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2",
          key: "5owen"
        }
      ],
      ["circle", { cx: "7", cy: "17", r: "2", key: "u2ysq9" }],
      ["path", { d: "M9 17h6", key: "r8uit2" }],
      ["circle", { cx: "17", cy: "17", r: "2", key: "axvx0g" }]
    ]);
    var Caravan = createLucideIcon("Caravan", [
      ["path", { d: "M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2", key: "19jm3t" }],
      ["path", { d: "M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2", key: "13hakp" }],
      ["path", { d: "M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9", key: "1crci8" }],
      ["circle", { cx: "8", cy: "19", r: "2", key: "t8fc5s" }]
    ]);
    var Carrot = createLucideIcon("Carrot", [
      [
        "path",
        {
          d: "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46",
          key: "rfqxbe"
        }
      ],
      ["path", { d: "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z", key: "6b25w4" }],
      ["path", { d: "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z", key: "fn65lo" }]
    ]);
    var CaseLower = createLucideIcon("CaseLower", [
      ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
      ["path", { d: "M10 9v6", key: "17i7lo" }],
      ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
      ["path", { d: "M14 7v8", key: "dl84cr" }]
    ]);
    var CaseSensitive = createLucideIcon("CaseSensitive", [
      ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
      ["path", { d: "M4 13h6", key: "1r9ots" }],
      ["circle", { cx: "18", cy: "12", r: "3", key: "1kchzo" }],
      ["path", { d: "M21 9v6", key: "anns31" }]
    ]);
    var CaseUpper = createLucideIcon("CaseUpper", [
      ["path", { d: "m3 15 4-8 4 8", key: "1vwr6u" }],
      ["path", { d: "M4 13h6", key: "1r9ots" }],
      ["path", { d: "M15 11h4.5a2 2 0 0 1 0 4H15V7h4a2 2 0 0 1 0 4", key: "1sqfas" }]
    ]);
    var CassetteTape = createLucideIcon("CassetteTape", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["circle", { cx: "8", cy: "10", r: "2", key: "1xl4ub" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["circle", { cx: "16", cy: "10", r: "2", key: "r14t7q" }],
      ["path", { d: "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3", key: "l01ucn" }]
    ]);
    var Cast = createLucideIcon("Cast", [
      ["path", { d: "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6", key: "3zrzxg" }],
      ["path", { d: "M2 12a9 9 0 0 1 8 8", key: "g6cvee" }],
      ["path", { d: "M2 16a5 5 0 0 1 4 4", key: "1y1dii" }],
      ["line", { x1: "2", x2: "2.01", y1: "20", y2: "20", key: "xu2jvo" }]
    ]);
    var Castle = createLucideIcon("Castle", [
      ["path", { d: "M22 20v-9H2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2Z", key: "109fe4" }],
      ["path", { d: "M18 11V4H6v7", key: "mon5oj" }],
      ["path", { d: "M15 22v-4a3 3 0 0 0-3-3a3 3 0 0 0-3 3v4", key: "1k4jtn" }],
      ["path", { d: "M22 11V9", key: "3zbp94" }],
      ["path", { d: "M2 11V9", key: "1x5rnq" }],
      ["path", { d: "M6 4V2", key: "1rsq15" }],
      ["path", { d: "M18 4V2", key: "1jsdo1" }],
      ["path", { d: "M10 4V2", key: "75d9ly" }],
      ["path", { d: "M14 4V2", key: "8nj3z6" }]
    ]);
    var Cat = createLucideIcon("Cat", [
      [
        "path",
        {
          d: "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z",
          key: "x6xyqk"
        }
      ],
      ["path", { d: "M8 14v.5", key: "1nzgdb" }],
      ["path", { d: "M16 14v.5", key: "1lajdz" }],
      ["path", { d: "M11.25 16.25h1.5L12 17l-.75-.75Z", key: "12kq1m" }]
    ]);
    var Cctv = createLucideIcon("Cctv", [
      [
        "path",
        {
          d: "M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97",
          key: "ir91b5"
        }
      ],
      [
        "path",
        {
          d: "M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z",
          key: "jlp8i1"
        }
      ],
      ["path", { d: "M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15", key: "19bib8" }],
      ["path", { d: "M2 21v-4", key: "l40lih" }],
      ["path", { d: "M7 9h.01", key: "19b3jx" }]
    ]);
    var ChartArea = createLucideIcon("ChartArea", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      [
        "path",
        {
          d: "M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z",
          key: "q0gr47"
        }
      ]
    ]);
    var ChartBarBig = createLucideIcon("ChartBarBig", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["rect", { x: "7", y: "13", width: "9", height: "4", rx: "1", key: "1iip1u" }],
      ["rect", { x: "7", y: "5", width: "12", height: "4", rx: "1", key: "1anskk" }]
    ]);
    var ChartBarDecreasing = createLucideIcon("ChartBarDecreasing", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M7 11h8", key: "1feolt" }],
      ["path", { d: "M7 16h3", key: "ur6vzw" }],
      ["path", { d: "M7 6h12", key: "sz5b0d" }]
    ]);
    var ChartBarIncreasing = createLucideIcon("ChartBarIncreasing", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M7 11h8", key: "1feolt" }],
      ["path", { d: "M7 16h12", key: "wsnu98" }],
      ["path", { d: "M7 6h3", key: "w9rmul" }]
    ]);
    var ChartBarStacked = createLucideIcon("ChartBarStacked", [
      ["path", { d: "M11 13v4", key: "vyy2rb" }],
      ["path", { d: "M15 5v4", key: "1gx88a" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["rect", { x: "7", y: "13", width: "9", height: "4", rx: "1", key: "1iip1u" }],
      ["rect", { x: "7", y: "5", width: "12", height: "4", rx: "1", key: "1anskk" }]
    ]);
    var ChartBar = createLucideIcon("ChartBar", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M7 16h8", key: "srdodz" }],
      ["path", { d: "M7 11h12", key: "127s9w" }],
      ["path", { d: "M7 6h3", key: "w9rmul" }]
    ]);
    var ChartCandlestick = createLucideIcon("ChartCandlestick", [
      ["path", { d: "M9 5v4", key: "14uxtq" }],
      ["rect", { width: "4", height: "6", x: "7", y: "9", rx: "1", key: "f4fvz0" }],
      ["path", { d: "M9 15v2", key: "r5rk32" }],
      ["path", { d: "M17 3v2", key: "1l2re6" }],
      ["rect", { width: "4", height: "8", x: "15", y: "5", rx: "1", key: "z38je5" }],
      ["path", { d: "M17 13v3", key: "5l0wba" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }]
    ]);
    var ChartColumnBig = createLucideIcon("ChartColumnBig", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["rect", { x: "15", y: "5", width: "4", height: "12", rx: "1", key: "q8uenq" }],
      ["rect", { x: "7", y: "8", width: "4", height: "9", rx: "1", key: "sr5ea" }]
    ]);
    var ChartColumnDecreasing = createLucideIcon("ChartColumnDecreasing", [
      ["path", { d: "M13 17V9", key: "1fwyjl" }],
      ["path", { d: "M18 17v-3", key: "1sqioe" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M8 17V5", key: "1wzmnc" }]
    ]);
    var ChartColumnIncreasing = createLucideIcon("ChartColumnIncreasing", [
      ["path", { d: "M13 17V9", key: "1fwyjl" }],
      ["path", { d: "M18 17V5", key: "sfb6ij" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M8 17v-3", key: "17ska0" }]
    ]);
    var ChartColumnStacked = createLucideIcon("ChartColumnStacked", [
      ["path", { d: "M11 13H7", key: "t0o9gq" }],
      ["path", { d: "M19 9h-4", key: "rera1j" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["rect", { x: "15", y: "5", width: "4", height: "12", rx: "1", key: "q8uenq" }],
      ["rect", { x: "7", y: "8", width: "4", height: "9", rx: "1", key: "sr5ea" }]
    ]);
    var ChartColumn = createLucideIcon("ChartColumn", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M18 17V9", key: "2bz60n" }],
      ["path", { d: "M13 17V5", key: "1frdt8" }],
      ["path", { d: "M8 17v-3", key: "17ska0" }]
    ]);
    var ChartGantt = createLucideIcon("ChartGantt", [
      ["path", { d: "M10 6h8", key: "zvc2xc" }],
      ["path", { d: "M12 16h6", key: "yi5mkt" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M8 11h7", key: "wz2hg0" }]
    ]);
    var ChartLine = createLucideIcon("ChartLine", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "m19 9-5 5-4-4-3 3", key: "2osh9i" }]
    ]);
    var ChartNetwork = createLucideIcon("ChartNetwork", [
      ["path", { d: "m13.11 7.664 1.78 2.672", key: "go2gg9" }],
      ["path", { d: "m14.162 12.788-3.324 1.424", key: "11x848" }],
      ["path", { d: "m20 4-6.06 1.515", key: "1wxxh7" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["circle", { cx: "12", cy: "6", r: "2", key: "1jj5th" }],
      ["circle", { cx: "16", cy: "12", r: "2", key: "4ma0v8" }],
      ["circle", { cx: "9", cy: "15", r: "2", key: "lf2ghp" }]
    ]);
    var ChartNoAxesColumnDecreasing = createLucideIcon("ChartNoAxesColumnDecreasing", [
      ["path", { d: "M12 20V10", key: "g8npz5" }],
      ["path", { d: "M18 20v-4", key: "8uic4z" }],
      ["path", { d: "M6 20V4", key: "1w1bmo" }]
    ]);
    var ChartNoAxesColumnIncreasing = createLucideIcon("ChartNoAxesColumnIncreasing", [
      ["line", { x1: "12", x2: "12", y1: "20", y2: "10", key: "1vz5eb" }],
      ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
      ["line", { x1: "6", x2: "6", y1: "20", y2: "16", key: "hq0ia6" }]
    ]);
    var ChartNoAxesColumn = createLucideIcon("ChartNoAxesColumn", [
      ["line", { x1: "18", x2: "18", y1: "20", y2: "10", key: "1xfpm4" }],
      ["line", { x1: "12", x2: "12", y1: "20", y2: "4", key: "be30l9" }],
      ["line", { x1: "6", x2: "6", y1: "20", y2: "14", key: "1r4le6" }]
    ]);
    var ChartNoAxesCombined = createLucideIcon("ChartNoAxesCombined", [
      ["path", { d: "M12 16v5", key: "zza2cw" }],
      ["path", { d: "M16 14v7", key: "1g90b9" }],
      ["path", { d: "M20 10v11", key: "1iqoj0" }],
      [
        "path",
        { d: "m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15", key: "1fw8x9" }
      ],
      ["path", { d: "M4 18v3", key: "1yp0dc" }],
      ["path", { d: "M8 14v7", key: "n3cwzv" }]
    ]);
    var ChartNoAxesGantt = createLucideIcon("ChartNoAxesGantt", [
      ["path", { d: "M8 6h10", key: "9lnwnk" }],
      ["path", { d: "M6 12h9", key: "1g9pqf" }],
      ["path", { d: "M11 18h7", key: "c8dzvl" }]
    ]);
    var ChartPie = createLucideIcon("ChartPie", [
      [
        "path",
        {
          d: "M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z",
          key: "pzmjnu"
        }
      ],
      ["path", { d: "M21.21 15.89A10 10 0 1 1 8 2.83", key: "k2fpak" }]
    ]);
    var ChartScatter = createLucideIcon("ChartScatter", [
      ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
      ["circle", { cx: "18.5", cy: "5.5", r: ".5", fill: "currentColor", key: "lysivs" }],
      ["circle", { cx: "11.5", cy: "11.5", r: ".5", fill: "currentColor", key: "byv1b8" }],
      ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
      ["circle", { cx: "17.5", cy: "14.5", r: ".5", fill: "currentColor", key: "1gjh6j" }],
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }]
    ]);
    var ChartSpline = createLucideIcon("ChartSpline", [
      ["path", { d: "M3 3v16a2 2 0 0 0 2 2h16", key: "c24i48" }],
      ["path", { d: "M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7", key: "lw07rv" }]
    ]);
    var CheckCheck = createLucideIcon("CheckCheck", [
      ["path", { d: "M18 6 7 17l-5-5", key: "116fxf" }],
      ["path", { d: "m22 10-7.5 7.5L13 16", key: "ke71qq" }]
    ]);
    var Check = createLucideIcon("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);
    var ChefHat = createLucideIcon("ChefHat", [
      [
        "path",
        {
          d: "M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z",
          key: "1qvrer"
        }
      ],
      ["path", { d: "M6 17h12", key: "1jwigz" }]
    ]);
    var Cherry = createLucideIcon("Cherry", [
      ["path", { d: "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "cvxqlc" }],
      ["path", { d: "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z", key: "1ostrc" }],
      ["path", { d: "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12", key: "hqx58h" }],
      ["path", { d: "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z", key: "eykp1o" }]
    ]);
    var ChevronDown = createLucideIcon("ChevronDown", [
      ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
    ]);
    var ChevronFirst = createLucideIcon("ChevronFirst", [
      ["path", { d: "m17 18-6-6 6-6", key: "1yerx2" }],
      ["path", { d: "M7 6v12", key: "1p53r6" }]
    ]);
    var ChevronLast = createLucideIcon("ChevronLast", [
      ["path", { d: "m7 18 6-6-6-6", key: "lwmzdw" }],
      ["path", { d: "M17 6v12", key: "1o0aio" }]
    ]);
    var ChevronLeft = createLucideIcon("ChevronLeft", [
      ["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]
    ]);
    var ChevronRight = createLucideIcon("ChevronRight", [
      ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
    ]);
    var ChevronUp = createLucideIcon("ChevronUp", [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]]);
    var ChevronsDownUp = createLucideIcon("ChevronsDownUp", [
      ["path", { d: "m7 20 5-5 5 5", key: "13a0gw" }],
      ["path", { d: "m7 4 5 5 5-5", key: "1kwcof" }]
    ]);
    var ChevronsDown = createLucideIcon("ChevronsDown", [
      ["path", { d: "m7 6 5 5 5-5", key: "1lc07p" }],
      ["path", { d: "m7 13 5 5 5-5", key: "1d48rs" }]
    ]);
    var ChevronsLeftRightEllipsis = createLucideIcon("ChevronsLeftRightEllipsis", [
      ["path", { d: "m18 8 4 4-4 4", key: "1ak13k" }],
      ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
      ["path", { d: "M8 12h.01", key: "czm47f" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M16 12h.01", key: "1l6xoz" }]
    ]);
    var ChevronsLeftRight = createLucideIcon("ChevronsLeftRight", [
      ["path", { d: "m9 7-5 5 5 5", key: "j5w590" }],
      ["path", { d: "m15 7 5 5-5 5", key: "1bl6da" }]
    ]);
    var ChevronsLeft = createLucideIcon("ChevronsLeft", [
      ["path", { d: "m11 17-5-5 5-5", key: "13zhaf" }],
      ["path", { d: "m18 17-5-5 5-5", key: "h8a8et" }]
    ]);
    var ChevronsRightLeft = createLucideIcon("ChevronsRightLeft", [
      ["path", { d: "m20 17-5-5 5-5", key: "30x0n2" }],
      ["path", { d: "m4 17 5-5-5-5", key: "16spf4" }]
    ]);
    var ChevronsRight = createLucideIcon("ChevronsRight", [
      ["path", { d: "m6 17 5-5-5-5", key: "xnjwq" }],
      ["path", { d: "m13 17 5-5-5-5", key: "17xmmf" }]
    ]);
    var ChevronsUpDown = createLucideIcon("ChevronsUpDown", [
      ["path", { d: "m7 15 5 5 5-5", key: "1hf1tw" }],
      ["path", { d: "m7 9 5-5 5 5", key: "sgt6xg" }]
    ]);
    var ChevronsUp = createLucideIcon("ChevronsUp", [
      ["path", { d: "m17 11-5-5-5 5", key: "e8nh98" }],
      ["path", { d: "m17 18-5-5-5 5", key: "2avn1x" }]
    ]);
    var Chrome = createLucideIcon("Chrome", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["line", { x1: "21.17", x2: "12", y1: "8", y2: "8", key: "a0cw5f" }],
      ["line", { x1: "3.95", x2: "8.54", y1: "6.06", y2: "14", key: "1kftof" }],
      ["line", { x1: "10.88", x2: "15.46", y1: "21.94", y2: "14", key: "1ymyh8" }]
    ]);
    var Church = createLucideIcon("Church", [
      ["path", { d: "M10 9h4", key: "u4k05v" }],
      ["path", { d: "M12 7v5", key: "ma6bk" }],
      ["path", { d: "M14 22v-4a2 2 0 0 0-4 0v4", key: "1pdhuj" }],
      [
        "path",
        {
          d: "M18 22V5.618a1 1 0 0 0-.553-.894l-4.553-2.277a2 2 0 0 0-1.788 0L6.553 4.724A1 1 0 0 0 6 5.618V22",
          key: "1rkokr"
        }
      ],
      [
        "path",
        {
          d: "m18 7 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.618a1 1 0 0 1 .553-.894L6 7",
          key: "1w6esw"
        }
      ]
    ]);
    var CigaretteOff = createLucideIcon("CigaretteOff", [
      ["path", { d: "M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13", key: "1gdiyg" }],
      ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866", key: "166zjj" }],
      ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }],
      ["path", { d: "M7 12v4", key: "jqww69" }]
    ]);
    var Cigarette = createLucideIcon("Cigarette", [
      ["path", { d: "M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14", key: "1mb5g1" }],
      ["path", { d: "M18 8c0-2.5-2-2.5-2-5", key: "1il607" }],
      ["path", { d: "M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1", key: "1yl5r7" }],
      ["path", { d: "M22 8c0-2.5-2-2.5-2-5", key: "1gah44" }],
      ["path", { d: "M7 12v4", key: "jqww69" }]
    ]);
    var CircleAlert = createLucideIcon("CircleAlert", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
      ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
    ]);
    var CircleArrowDown = createLucideIcon("CircleArrowDown", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M12 8v8", key: "napkw2" }],
      ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
    ]);
    var CircleArrowLeft = createLucideIcon("CircleArrowLeft", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M16 12H8", key: "1fr5h0" }],
      ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }]
    ]);
    var CircleArrowOutDownLeft = createLucideIcon("CircleArrowOutDownLeft", [
      ["path", { d: "M2 12a10 10 0 1 1 10 10", key: "1yn6ov" }],
      ["path", { d: "m2 22 10-10", key: "28ilpk" }],
      ["path", { d: "M8 22H2v-6", key: "sulq54" }]
    ]);
    var CircleArrowOutDownRight = createLucideIcon("CircleArrowOutDownRight", [
      ["path", { d: "M12 22a10 10 0 1 1 10-10", key: "130bv5" }],
      ["path", { d: "M22 22 12 12", key: "131aw7" }],
      ["path", { d: "M22 16v6h-6", key: "1gvm70" }]
    ]);
    var CircleArrowOutUpLeft = createLucideIcon("CircleArrowOutUpLeft", [
      ["path", { d: "M2 8V2h6", key: "hiwtdz" }],
      ["path", { d: "m2 2 10 10", key: "1oh8rs" }],
      ["path", { d: "M12 2A10 10 0 1 1 2 12", key: "rrk4fa" }]
    ]);
    var CircleArrowOutUpRight = createLucideIcon("CircleArrowOutUpRight", [
      ["path", { d: "M22 12A10 10 0 1 1 12 2", key: "1fm58d" }],
      ["path", { d: "M22 2 12 12", key: "yg2myt" }],
      ["path", { d: "M16 2h6v6", key: "zan5cs" }]
    ]);
    var CircleArrowRight = createLucideIcon("CircleArrowRight", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
    ]);
    var CircleArrowUp = createLucideIcon("CircleArrowUp", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
      ["path", { d: "M12 16V8", key: "1sbj14" }]
    ]);
    var CircleCheckBig = createLucideIcon("CircleCheckBig", [
      ["path", { d: "M21.801 10A10 10 0 1 1 17 3.335", key: "yps3ct" }],
      ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
    ]);
    var CircleCheck = createLucideIcon("CircleCheck", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
    ]);
    var CircleChevronDown = createLucideIcon("CircleChevronDown", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
    ]);
    var CircleChevronLeft = createLucideIcon("CircleChevronLeft", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
    ]);
    var CircleChevronRight = createLucideIcon("CircleChevronRight", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
    ]);
    var CircleChevronUp = createLucideIcon("CircleChevronUp", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
    ]);
    var CircleDashed = createLucideIcon("CircleDashed", [
      ["path", { d: "M10.1 2.182a10 10 0 0 1 3.8 0", key: "5ilxe3" }],
      ["path", { d: "M13.9 21.818a10 10 0 0 1-3.8 0", key: "11zvb9" }],
      ["path", { d: "M17.609 3.721a10 10 0 0 1 2.69 2.7", key: "1iw5b2" }],
      ["path", { d: "M2.182 13.9a10 10 0 0 1 0-3.8", key: "c0bmvh" }],
      ["path", { d: "M20.279 17.609a10 10 0 0 1-2.7 2.69", key: "1ruxm7" }],
      ["path", { d: "M21.818 10.1a10 10 0 0 1 0 3.8", key: "qkgqxc" }],
      ["path", { d: "M3.721 6.391a10 10 0 0 1 2.7-2.69", key: "1mcia2" }],
      ["path", { d: "M6.391 20.279a10 10 0 0 1-2.69-2.7", key: "1fvljs" }]
    ]);
    var CircleDivide = createLucideIcon("CircleDivide", [
      ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
      ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var CircleDollarSign = createLucideIcon("CircleDollarSign", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }]
    ]);
    var CircleDotDashed = createLucideIcon("CircleDotDashed", [
      ["path", { d: "M10.1 2.18a9.93 9.93 0 0 1 3.8 0", key: "1qdqn0" }],
      ["path", { d: "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7", key: "1bq7p6" }],
      ["path", { d: "M21.82 10.1a9.93 9.93 0 0 1 0 3.8", key: "1rlaqf" }],
      ["path", { d: "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69", key: "1xk03u" }],
      ["path", { d: "M13.9 21.82a9.94 9.94 0 0 1-3.8 0", key: "l7re25" }],
      ["path", { d: "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7", key: "1v18p6" }],
      ["path", { d: "M2.18 13.9a9.93 9.93 0 0 1 0-3.8", key: "xdo6bj" }],
      ["path", { d: "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69", key: "1jjmaz" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
    ]);
    var CircleDot = createLucideIcon("CircleDot", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
    ]);
    var CircleEllipsis = createLucideIcon("CircleEllipsis", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M17 12h.01", key: "1m0b6t" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M7 12h.01", key: "eqddd0" }]
    ]);
    var CircleEqual = createLucideIcon("CircleEqual", [
      ["path", { d: "M7 10h10", key: "1101jm" }],
      ["path", { d: "M7 14h10", key: "1mhdw3" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var CircleFadingArrowUp = createLucideIcon("CircleFadingArrowUp", [
      ["path", { d: "M12 2a10 10 0 0 1 7.38 16.75", key: "175t95" }],
      ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
      ["path", { d: "M12 16V8", key: "1sbj14" }],
      ["path", { d: "M2.5 8.875a10 10 0 0 0-.5 3", key: "1vce0s" }],
      ["path", { d: "M2.83 16a10 10 0 0 0 2.43 3.4", key: "o3fkw4" }],
      ["path", { d: "M4.636 5.235a10 10 0 0 1 .891-.857", key: "1szpfk" }],
      ["path", { d: "M8.644 21.42a10 10 0 0 0 7.631-.38", key: "9yhvd4" }]
    ]);
    var CircleFadingPlus = createLucideIcon("CircleFadingPlus", [
      ["path", { d: "M12 2a10 10 0 0 1 7.38 16.75", key: "175t95" }],
      ["path", { d: "M12 8v8", key: "napkw2" }],
      ["path", { d: "M16 12H8", key: "1fr5h0" }],
      ["path", { d: "M2.5 8.875a10 10 0 0 0-.5 3", key: "1vce0s" }],
      ["path", { d: "M2.83 16a10 10 0 0 0 2.43 3.4", key: "o3fkw4" }],
      ["path", { d: "M4.636 5.235a10 10 0 0 1 .891-.857", key: "1szpfk" }],
      ["path", { d: "M8.644 21.42a10 10 0 0 0 7.631-.38", key: "9yhvd4" }]
    ]);
    var CircleGauge = createLucideIcon("CircleGauge", [
      ["path", { d: "M15.6 2.7a10 10 0 1 0 5.7 5.7", key: "1e0p6d" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "M13.4 10.6 19 5", key: "1kr7tw" }]
    ]);
    var CircleHelp = createLucideIcon("CircleHelp", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }]
    ]);
    var CircleMinus = createLucideIcon("CircleMinus", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var CircleOff = createLucideIcon("CircleOff", [
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M8.35 2.69A10 10 0 0 1 21.3 15.65", key: "1pfsoa" }],
      ["path", { d: "M19.08 19.08A10 10 0 1 1 4.92 4.92", key: "1ablyi" }]
    ]);
    var CircleParkingOff = createLucideIcon("CircleParkingOff", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m5 5 14 14", key: "11anup" }],
      ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
      ["path", { d: "M9 17v-2.34", key: "a9qo08" }]
    ]);
    var CircleParking = createLucideIcon("CircleParking", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
    ]);
    var CirclePause = createLucideIcon("CirclePause", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["line", { x1: "10", x2: "10", y1: "15", y2: "9", key: "c1nkhi" }],
      ["line", { x1: "14", x2: "14", y1: "15", y2: "9", key: "h65svq" }]
    ]);
    var CirclePercent = createLucideIcon("CirclePercent", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["path", { d: "M15 15h.01", key: "lqbp3k" }]
    ]);
    var CirclePlay = createLucideIcon("CirclePlay", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polygon", { points: "10 8 16 12 10 16 10 8", key: "1cimsy" }]
    ]);
    var CirclePlus = createLucideIcon("CirclePlus", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "M12 8v8", key: "napkw2" }]
    ]);
    var CirclePower = createLucideIcon("CirclePower", [
      ["path", { d: "M12 7v4", key: "xawao1" }],
      ["path", { d: "M7.998 9.003a5 5 0 1 0 8-.005", key: "1pek45" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var CircleSlash2 = createLucideIcon("CircleSlash2", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M22 2 2 22", key: "y4kqgn" }]
    ]);
    var CircleSlash = createLucideIcon("CircleSlash", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }]
    ]);
    var CircleStop = createLucideIcon("CircleStop", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["rect", { x: "9", y: "9", width: "6", height: "6", rx: "1", key: "1ssd4o" }]
    ]);
    var CircleUserRound = createLucideIcon("CircleUserRound", [
      ["path", { d: "M18 20a6 6 0 0 0-12 0", key: "1qehca" }],
      ["circle", { cx: "12", cy: "10", r: "4", key: "1h16sb" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var CircleUser = createLucideIcon("CircleUser", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662", key: "154egf" }]
    ]);
    var CircleX = createLucideIcon("CircleX", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "m9 9 6 6", key: "z0biqf" }]
    ]);
    var Circle = createLucideIcon("Circle", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var CircuitBoard = createLucideIcon("CircuitBoard", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M11 9h4a2 2 0 0 0 2-2V3", key: "1ve2rv" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
      ["path", { d: "M7 21v-4a2 2 0 0 1 2-2h4", key: "1fwkro" }],
      ["circle", { cx: "15", cy: "15", r: "2", key: "3i40o0" }]
    ]);
    var Citrus = createLucideIcon("Citrus", [
      [
        "path",
        {
          d: "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z",
          key: "4ite01"
        }
      ],
      ["path", { d: "M19.65 15.66A8 8 0 0 1 8.35 4.34", key: "1gxipu" }],
      ["path", { d: "m14 10-5.5 5.5", key: "92pfem" }],
      ["path", { d: "M14 17.85V10H6.15", key: "xqmtsk" }]
    ]);
    var Clapperboard = createLucideIcon("Clapperboard", [
      [
        "path",
        { d: "M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z", key: "1tn4o7" }
      ],
      ["path", { d: "m6.2 5.3 3.1 3.9", key: "iuk76l" }],
      ["path", { d: "m12.4 3.4 3.1 4", key: "6hsd6n" }],
      ["path", { d: "M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z", key: "ltgou9" }]
    ]);
    var ClipboardCheck = createLucideIcon("ClipboardCheck", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "m9 14 2 2 4-4", key: "df797q" }]
    ]);
    var ClipboardCopy = createLucideIcon("ClipboardCopy", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2", key: "4jdomd" }],
      ["path", { d: "M16 4h2a2 2 0 0 1 2 2v4", key: "3hqy98" }],
      ["path", { d: "M21 14H11", key: "1bme5i" }],
      ["path", { d: "m15 10-4 4 4 4", key: "5dvupr" }]
    ]);
    var ClipboardList = createLucideIcon("ClipboardList", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "M12 11h4", key: "1jrz19" }],
      ["path", { d: "M12 16h4", key: "n85exb" }],
      ["path", { d: "M8 11h.01", key: "1dfujw" }],
      ["path", { d: "M8 16h.01", key: "18s6g9" }]
    ]);
    var ClipboardMinus = createLucideIcon("ClipboardMinus", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "M9 14h6", key: "159ibu" }]
    ]);
    var ClipboardPaste = createLucideIcon("ClipboardPaste", [
      [
        "path",
        { d: "M15 2H9a1 1 0 0 0-1 1v2c0 .6.4 1 1 1h6c.6 0 1-.4 1-1V3c0-.6-.4-1-1-1Z", key: "1pp7kr" }
      ],
      [
        "path",
        {
          d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2M16 4h2a2 2 0 0 1 2 2v2M11 14h10",
          key: "2ik1ml"
        }
      ],
      ["path", { d: "m17 10 4 4-4 4", key: "vp2hj1" }]
    ]);
    var ClipboardPenLine = createLucideIcon("ClipboardPenLine", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
      ["path", { d: "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5", key: "1but9f" }],
      ["path", { d: "M16 4h2a2 2 0 0 1 1.73 1", key: "1p8n7l" }],
      ["path", { d: "M8 18h1", key: "13wk12" }],
      [
        "path",
        {
          d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "2t3380"
        }
      ]
    ]);
    var ClipboardPen = createLucideIcon("ClipboardPen", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", key: "1oijnt" }],
      ["path", { d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5", key: "cereej" }],
      ["path", { d: "M4 13.5V6a2 2 0 0 1 2-2h2", key: "5ua5vh" }],
      [
        "path",
        {
          d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "1y4qbx"
        }
      ]
    ]);
    var ClipboardPlus = createLucideIcon("ClipboardPlus", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "M9 14h6", key: "159ibu" }],
      ["path", { d: "M12 17v-6", key: "1y8rbf" }]
    ]);
    var ClipboardType = createLucideIcon("ClipboardType", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "M9 12v-1h6v1", key: "iehl6m" }],
      ["path", { d: "M11 17h2", key: "12w5me" }],
      ["path", { d: "M12 11v6", key: "1bwqyc" }]
    ]);
    var ClipboardX = createLucideIcon("ClipboardX", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ],
      ["path", { d: "m15 11-6 6", key: "1toa9n" }],
      ["path", { d: "m9 11 6 6", key: "wlibny" }]
    ]);
    var Clipboard = createLucideIcon("Clipboard", [
      ["rect", { width: "8", height: "4", x: "8", y: "2", rx: "1", ry: "1", key: "tgr4d6" }],
      [
        "path",
        {
          d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
          key: "116196"
        }
      ]
    ]);
    var Clock1 = createLucideIcon("Clock1", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 14.5 8", key: "12zbmj" }]
    ]);
    var Clock10 = createLucideIcon("Clock10", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 8 10", key: "atfzqc" }]
    ]);
    var Clock11 = createLucideIcon("Clock11", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 9.5 8", key: "l5bg6f" }]
    ]);
    var Clock12 = createLucideIcon("Clock12", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12", key: "1fub01" }]
    ]);
    var Clock2 = createLucideIcon("Clock2", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 16 10", key: "1g230d" }]
    ]);
    var Clock3 = createLucideIcon("Clock3", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 16.5 12", key: "1aq6pp" }]
    ]);
    var Clock4 = createLucideIcon("Clock4", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
    ]);
    var Clock5 = createLucideIcon("Clock5", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 14.5 16", key: "1pcbox" }]
    ]);
    var Clock6 = createLucideIcon("Clock6", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 12 16.5", key: "hb2qv6" }]
    ]);
    var Clock7 = createLucideIcon("Clock7", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 9.5 16", key: "ka3394" }]
    ]);
    var Clock8 = createLucideIcon("Clock8", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 8 14", key: "tmc9b4" }]
    ]);
    var Clock9 = createLucideIcon("Clock9", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 7.5 12", key: "1k60p0" }]
    ]);
    var ClockAlert = createLucideIcon("ClockAlert", [
      ["path", { d: "M12 6v6l4 2", key: "mmk7yg" }],
      ["path", { d: "M16 21.16a10 10 0 1 1 5-13.516", key: "cxo92l" }],
      ["path", { d: "M20 11.5v6", key: "2ei3xq" }],
      ["path", { d: "M20 21.5h.01", key: "1r2dzp" }]
    ]);
    var ClockArrowDown = createLucideIcon("ClockArrowDown", [
      ["path", { d: "M12.338 21.994A10 10 0 1 1 21.925 13.227", key: "1i7shu" }],
      ["path", { d: "M12 6v6l2 1", key: "19cm8n" }],
      ["path", { d: "m14 18 4 4 4-4", key: "1waygx" }],
      ["path", { d: "M18 14v8", key: "irew45" }]
    ]);
    var ClockArrowUp = createLucideIcon("ClockArrowUp", [
      ["path", { d: "M13.228 21.925A10 10 0 1 1 21.994 12.338", key: "1fzlyi" }],
      ["path", { d: "M12 6v6l1.562.781", key: "1ujuk9" }],
      ["path", { d: "m14 18 4-4 4 4", key: "ftkppy" }],
      ["path", { d: "M18 22v-8", key: "su0gjh" }]
    ]);
    var Clock13 = createLucideIcon("Clock", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["polyline", { points: "12 6 12 12 16 14", key: "68esgv" }]
    ]);
    var CloudAlert = createLucideIcon("CloudAlert", [
      ["path", { d: "M12 12v4", key: "tww15h" }],
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708", key: "xsb5ju" }]
    ]);
    var CloudCog = createLucideIcon("CloudCog", [
      ["circle", { cx: "12", cy: "17", r: "3", key: "1spfwm" }],
      ["path", { d: "M4.2 15.1A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2", key: "zaobp" }],
      ["path", { d: "m15.7 18.4-.9-.3", key: "4qxpbn" }],
      ["path", { d: "m9.2 15.9-.9-.3", key: "17q7o2" }],
      ["path", { d: "m10.6 20.7.3-.9", key: "1pf4s2" }],
      ["path", { d: "m13.1 14.2.3-.9", key: "1mnuqm" }],
      ["path", { d: "m13.6 20.7-.4-1", key: "1jpd1m" }],
      ["path", { d: "m10.8 14.3-.4-1", key: "17ugyy" }],
      ["path", { d: "m8.3 18.6 1-.4", key: "s42vdx" }],
      ["path", { d: "m14.7 15.8 1-.4", key: "2wizun" }]
    ]);
    var CloudDownload = createLucideIcon("CloudDownload", [
      ["path", { d: "M12 13v8l-4-4", key: "1f5nwf" }],
      ["path", { d: "m12 21 4-4", key: "1lfcce" }],
      ["path", { d: "M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284", key: "ui1hmy" }]
    ]);
    var CloudDrizzle = createLucideIcon("CloudDrizzle", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "M8 19v1", key: "1dk2by" }],
      ["path", { d: "M8 14v1", key: "84yxot" }],
      ["path", { d: "M16 19v1", key: "v220m7" }],
      ["path", { d: "M16 14v1", key: "g12gj6" }],
      ["path", { d: "M12 21v1", key: "q8vafk" }],
      ["path", { d: "M12 16v1", key: "1mx6rx" }]
    ]);
    var CloudFog = createLucideIcon("CloudFog", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "M16 17H7", key: "pygtm1" }],
      ["path", { d: "M17 21H9", key: "1u2q02" }]
    ]);
    var CloudHail = createLucideIcon("CloudHail", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "M16 14v2", key: "a1is7l" }],
      ["path", { d: "M8 14v2", key: "1e9m6t" }],
      ["path", { d: "M16 20h.01", key: "xwek51" }],
      ["path", { d: "M8 20h.01", key: "1vjney" }],
      ["path", { d: "M12 16v2", key: "z66u1j" }],
      ["path", { d: "M12 22h.01", key: "1urd7a" }]
    ]);
    var CloudLightning = createLucideIcon("CloudLightning", [
      ["path", { d: "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973", key: "1cez44" }],
      ["path", { d: "m13 12-3 5h4l-3 5", key: "1t22er" }]
    ]);
    var CloudMoonRain = createLucideIcon("CloudMoonRain", [
      ["path", { d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197", key: "erj67n" }],
      ["path", { d: "M11 20v2", key: "174qtz" }],
      ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
      ["path", { d: "M7 19v2", key: "12npes" }]
    ]);
    var CloudMoon = createLucideIcon("CloudMoon", [
      ["path", { d: "M10.188 8.5A6 6 0 0 1 16 4a1 1 0 0 0 6 6 6 6 0 0 1-3 5.197", key: "erj67n" }],
      ["path", { d: "M13 16a3 3 0 1 1 0 6H7a5 5 0 1 1 4.9-6Z", key: "p44pc9" }]
    ]);
    var CloudOff = createLucideIcon("CloudOff", [
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193", key: "yfwify" }],
      [
        "path",
        { d: "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07", key: "jlfiyv" }
      ]
    ]);
    var CloudRainWind = createLucideIcon("CloudRainWind", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "m9.2 22 3-7", key: "sb5f6j" }],
      ["path", { d: "m9 13-3 7", key: "500co5" }],
      ["path", { d: "m17 13-3 7", key: "8t2fiy" }]
    ]);
    var CloudRain = createLucideIcon("CloudRain", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "M16 14v6", key: "1j4efv" }],
      ["path", { d: "M8 14v6", key: "17c4r9" }],
      ["path", { d: "M12 16v6", key: "c8a4gj" }]
    ]);
    var CloudSnow = createLucideIcon("CloudSnow", [
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "M8 15h.01", key: "a7atzg" }],
      ["path", { d: "M8 19h.01", key: "puxtts" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }],
      ["path", { d: "M12 21h.01", key: "h35vbk" }],
      ["path", { d: "M16 15h.01", key: "rnfrdf" }],
      ["path", { d: "M16 19h.01", key: "1vcnzz" }]
    ]);
    var CloudSunRain = createLucideIcon("CloudSunRain", [
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
      ["path", { d: "M20 12h2", key: "1q8mjw" }],
      ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
      ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
      ["path", { d: "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24", key: "1qmrp3" }],
      ["path", { d: "M11 20v2", key: "174qtz" }],
      ["path", { d: "M7 19v2", key: "12npes" }]
    ]);
    var CloudSun = createLucideIcon("CloudSun", [
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
      ["path", { d: "M20 12h2", key: "1q8mjw" }],
      ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }],
      ["path", { d: "M15.947 12.65a4 4 0 0 0-5.925-4.128", key: "dpwdj0" }],
      ["path", { d: "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z", key: "s09mg5" }]
    ]);
    var CloudUpload = createLucideIcon("CloudUpload", [
      ["path", { d: "M12 13v8", key: "1l5pq0" }],
      ["path", { d: "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242", key: "1pljnt" }],
      ["path", { d: "m8 17 4-4 4 4", key: "1quai1" }]
    ]);
    var Cloud = createLucideIcon("Cloud", [
      ["path", { d: "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "p7xjir" }]
    ]);
    var Cloudy = createLucideIcon("Cloudy", [
      ["path", { d: "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z", key: "gqqjvc" }],
      ["path", { d: "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5", key: "1p2s76" }]
    ]);
    var Clover = createLucideIcon("Clover", [
      ["path", { d: "M16.17 7.83 2 22", key: "t58vo8" }],
      [
        "path",
        {
          d: "M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12",
          key: "17k36q"
        }
      ],
      ["path", { d: "m7.83 7.83 8.34 8.34", key: "1d7sxk" }]
    ]);
    var Club = createLucideIcon("Club", [
      [
        "path",
        {
          d: "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z",
          key: "27yuqz"
        }
      ],
      ["path", { d: "M12 17.66L12 22", key: "ogfahf" }]
    ]);
    var CodeXml = createLucideIcon("CodeXml", [
      ["path", { d: "m18 16 4-4-4-4", key: "1inbqp" }],
      ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }],
      ["path", { d: "m14.5 4-5 16", key: "e7oirm" }]
    ]);
    var Code = createLucideIcon("Code", [
      ["polyline", { points: "16 18 22 12 16 6", key: "z7tu5w" }],
      ["polyline", { points: "8 6 2 12 8 18", key: "1eg1df" }]
    ]);
    var Codepen = createLucideIcon("Codepen", [
      ["polygon", { points: "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2", key: "srzb37" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "15.5", key: "1t73f2" }],
      ["polyline", { points: "22 8.5 12 15.5 2 8.5", key: "ajlxae" }],
      ["polyline", { points: "2 15.5 12 8.5 22 15.5", key: "susrui" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "8.5", key: "2cldga" }]
    ]);
    var Codesandbox = createLucideIcon("Codesandbox", [
      [
        "path",
        {
          d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
          key: "yt0hxn"
        }
      ],
      ["polyline", { points: "7.5 4.21 12 6.81 16.5 4.21", key: "fabo96" }],
      ["polyline", { points: "7.5 19.79 7.5 14.6 3 12", key: "z377f1" }],
      ["polyline", { points: "21 12 16.5 14.6 16.5 19.79", key: "9nrev1" }],
      ["polyline", { points: "3.27 6.96 12 12.01 20.73 6.96", key: "1180pa" }],
      ["line", { x1: "12", x2: "12", y1: "22.08", y2: "12", key: "3z3uq6" }]
    ]);
    var Coffee = createLucideIcon("Coffee", [
      ["path", { d: "M10 2v2", key: "7u0qdc" }],
      ["path", { d: "M14 2v2", key: "6buw04" }],
      [
        "path",
        {
          d: "M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1",
          key: "pwadti"
        }
      ],
      ["path", { d: "M6 2v2", key: "colzsn" }]
    ]);
    var Cog = createLucideIcon("Cog", [
      ["path", { d: "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z", key: "sobvz5" }],
      ["path", { d: "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z", key: "11i496" }],
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "M12 22v-2", key: "1osdcq" }],
      ["path", { d: "m17 20.66-1-1.73", key: "eq3orb" }],
      ["path", { d: "M11 10.27 7 3.34", key: "16pf9h" }],
      ["path", { d: "m20.66 17-1.73-1", key: "sg0v6f" }],
      ["path", { d: "m3.34 7 1.73 1", key: "1ulond" }],
      ["path", { d: "M14 12h8", key: "4f43i9" }],
      ["path", { d: "M2 12h2", key: "1t8f8n" }],
      ["path", { d: "m20.66 7-1.73 1", key: "1ow05n" }],
      ["path", { d: "m3.34 17 1.73-1", key: "nuk764" }],
      ["path", { d: "m17 3.34-1 1.73", key: "2wel8s" }],
      ["path", { d: "m11 13.73-4 6.93", key: "794ttg" }]
    ]);
    var Coins = createLucideIcon("Coins", [
      ["circle", { cx: "8", cy: "8", r: "6", key: "3yglwk" }],
      ["path", { d: "M18.09 10.37A6 6 0 1 1 10.34 18", key: "t5s6rm" }],
      ["path", { d: "M7 6h1v4", key: "1obek4" }],
      ["path", { d: "m16.71 13.88.7.71-2.82 2.82", key: "1rbuyh" }]
    ]);
    var Columns2 = createLucideIcon("Columns2", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M12 3v18", key: "108xh3" }]
    ]);
    var Columns3 = createLucideIcon("Columns3", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }]
    ]);
    var Columns4 = createLucideIcon("Columns4", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7.5 3v18", key: "w0wo6v" }],
      ["path", { d: "M12 3v18", key: "108xh3" }],
      ["path", { d: "M16.5 3v18", key: "10tjh1" }]
    ]);
    var Combine = createLucideIcon("Combine", [
      ["path", { d: "M10 18H5a3 3 0 0 1-3-3v-1", key: "ru65g8" }],
      ["path", { d: "M14 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "e30een" }],
      ["path", { d: "M20 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "2ahx8o" }],
      ["path", { d: "m7 21 3-3-3-3", key: "127cv2" }],
      ["rect", { x: "14", y: "14", width: "8", height: "8", rx: "2", key: "1b0bso" }],
      ["rect", { x: "2", y: "2", width: "8", height: "8", rx: "2", key: "1x09vl" }]
    ]);
    var Command = createLucideIcon("Command", [
      [
        "path",
        { d: "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3", key: "11bfej" }
      ]
    ]);
    var Compass = createLucideIcon("Compass", [
      [
        "path",
        {
          d: "m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z",
          key: "9ktpf1"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var Component = createLucideIcon("Component", [
      [
        "path",
        {
          d: "M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z",
          key: "1uwlt4"
        }
      ],
      [
        "path",
        {
          d: "M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z",
          key: "10291m"
        }
      ],
      [
        "path",
        {
          d: "M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z",
          key: "1tqoq1"
        }
      ],
      [
        "path",
        {
          d: "M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z",
          key: "1x6lto"
        }
      ]
    ]);
    var Computer = createLucideIcon("Computer", [
      ["rect", { width: "14", height: "8", x: "5", y: "2", rx: "2", key: "wc9tft" }],
      ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
      ["path", { d: "M6 18h2", key: "rwmk9e" }],
      ["path", { d: "M12 18h6", key: "aqd8w3" }]
    ]);
    var ConciergeBell = createLucideIcon("ConciergeBell", [
      [
        "path",
        { d: "M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z", key: "1pvr1r" }
      ],
      ["path", { d: "M20 16a8 8 0 1 0-16 0", key: "1pa543" }],
      ["path", { d: "M12 4v4", key: "1bq03y" }],
      ["path", { d: "M10 4h4", key: "1xpv9s" }]
    ]);
    var Cone = createLucideIcon("Cone", [
      ["path", { d: "m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98", key: "53pte7" }],
      ["ellipse", { cx: "12", cy: "19", rx: "9", ry: "3", key: "1ji25f" }]
    ]);
    var Construction = createLucideIcon("Construction", [
      ["rect", { x: "2", y: "6", width: "20", height: "8", rx: "1", key: "1estib" }],
      ["path", { d: "M17 14v7", key: "7m2elx" }],
      ["path", { d: "M7 14v7", key: "1cm7wv" }],
      ["path", { d: "M17 3v3", key: "1v4jwn" }],
      ["path", { d: "M7 3v3", key: "7o6guu" }],
      ["path", { d: "M10 14 2.3 6.3", key: "1023jk" }],
      ["path", { d: "m14 6 7.7 7.7", key: "1s8pl2" }],
      ["path", { d: "m8 6 8 8", key: "hl96qh" }]
    ]);
    var ContactRound = createLucideIcon("ContactRound", [
      ["path", { d: "M16 2v2", key: "scm5qe" }],
      ["path", { d: "M17.915 22a6 6 0 0 0-12 0", key: "suqz9p" }],
      ["path", { d: "M8 2v2", key: "pbkmx" }],
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
    ]);
    var Contact = createLucideIcon("Contact", [
      ["path", { d: "M16 2v2", key: "scm5qe" }],
      ["path", { d: "M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2", key: "1waht3" }],
      ["path", { d: "M8 2v2", key: "pbkmx" }],
      ["circle", { cx: "12", cy: "11", r: "3", key: "itu57m" }],
      ["rect", { x: "3", y: "4", width: "18", height: "18", rx: "2", key: "12vinp" }]
    ]);
    var Container = createLucideIcon("Container", [
      [
        "path",
        {
          d: "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z",
          key: "1t2lqe"
        }
      ],
      ["path", { d: "M10 21.9V14L2.1 9.1", key: "o7czzq" }],
      ["path", { d: "m10 14 11.9-6.9", key: "zm5e20" }],
      ["path", { d: "M14 19.8v-8.1", key: "159ecu" }],
      ["path", { d: "M18 17.5V9.4", key: "11uown" }]
    ]);
    var Contrast = createLucideIcon("Contrast", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M12 18a6 6 0 0 0 0-12v12z", key: "j4l70d" }]
    ]);
    var Cookie = createLucideIcon("Cookie", [
      ["path", { d: "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5", key: "laymnq" }],
      ["path", { d: "M8.5 8.5v.01", key: "ue8clq" }],
      ["path", { d: "M16 15.5v.01", key: "14dtrp" }],
      ["path", { d: "M12 12v.01", key: "u5ubse" }],
      ["path", { d: "M11 17v.01", key: "1hyl5a" }],
      ["path", { d: "M7 14v.01", key: "uct60s" }]
    ]);
    var CookingPot = createLucideIcon("CookingPot", [
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8", key: "u0tga0" }],
      ["path", { d: "m4 8 16-4", key: "16g0ng" }],
      [
        "path",
        {
          d: "m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8",
          key: "12cejc"
        }
      ]
    ]);
    var CopyCheck = createLucideIcon("CopyCheck", [
      ["path", { d: "m12 15 2 2 4-4", key: "2c609p" }],
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var CopyMinus = createLucideIcon("CopyMinus", [
      ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var CopyPlus = createLucideIcon("CopyPlus", [
      ["line", { x1: "15", x2: "15", y1: "12", y2: "18", key: "1p7wdc" }],
      ["line", { x1: "12", x2: "18", y1: "15", y2: "15", key: "1nscbv" }],
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var CopySlash = createLucideIcon("CopySlash", [
      ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var CopyX = createLucideIcon("CopyX", [
      ["line", { x1: "12", x2: "18", y1: "12", y2: "18", key: "1rg63v" }],
      ["line", { x1: "12", x2: "18", y1: "18", y2: "12", key: "ebkxgr" }],
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var Copy = createLucideIcon("Copy", [
      ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
      ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
    ]);
    var Copyleft = createLucideIcon("Copyleft", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M9.17 14.83a4 4 0 1 0 0-5.66", key: "1sveal" }]
    ]);
    var Copyright = createLucideIcon("Copyright", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M14.83 14.83a4 4 0 1 1 0-5.66", key: "1i56pz" }]
    ]);
    var CornerDownLeft = createLucideIcon("CornerDownLeft", [
      ["polyline", { points: "9 10 4 15 9 20", key: "r3jprv" }],
      ["path", { d: "M20 4v7a4 4 0 0 1-4 4H4", key: "6o5b7l" }]
    ]);
    var CornerDownRight = createLucideIcon("CornerDownRight", [
      ["polyline", { points: "15 10 20 15 15 20", key: "1q7qjw" }],
      ["path", { d: "M4 4v7a4 4 0 0 0 4 4h12", key: "z08zvw" }]
    ]);
    var CornerLeftDown = createLucideIcon("CornerLeftDown", [
      ["polyline", { points: "14 15 9 20 4 15", key: "nkc4i" }],
      ["path", { d: "M20 4h-7a4 4 0 0 0-4 4v12", key: "nbpdq2" }]
    ]);
    var CornerLeftUp = createLucideIcon("CornerLeftUp", [
      ["polyline", { points: "14 9 9 4 4 9", key: "m9oyvo" }],
      ["path", { d: "M20 20h-7a4 4 0 0 1-4-4V4", key: "1blwi3" }]
    ]);
    var CornerRightDown = createLucideIcon("CornerRightDown", [
      ["polyline", { points: "10 15 15 20 20 15", key: "axus6l" }],
      ["path", { d: "M4 4h7a4 4 0 0 1 4 4v12", key: "wcbgct" }]
    ]);
    var CornerRightUp = createLucideIcon("CornerRightUp", [
      ["polyline", { points: "10 9 15 4 20 9", key: "1lr6px" }],
      ["path", { d: "M4 20h7a4 4 0 0 0 4-4V4", key: "1plgdj" }]
    ]);
    var CornerUpLeft = createLucideIcon("CornerUpLeft", [
      ["polyline", { points: "9 14 4 9 9 4", key: "881910" }],
      ["path", { d: "M20 20v-7a4 4 0 0 0-4-4H4", key: "1nkjon" }]
    ]);
    var CornerUpRight = createLucideIcon("CornerUpRight", [
      ["polyline", { points: "15 14 20 9 15 4", key: "1tbx3s" }],
      ["path", { d: "M4 20v-7a4 4 0 0 1 4-4h12", key: "1lu4f8" }]
    ]);
    var Cpu = createLucideIcon("Cpu", [
      ["rect", { width: "16", height: "16", x: "4", y: "4", rx: "2", key: "14l7u7" }],
      ["rect", { width: "6", height: "6", x: "9", y: "9", rx: "1", key: "5aljv4" }],
      ["path", { d: "M15 2v2", key: "13l42r" }],
      ["path", { d: "M15 20v2", key: "15mkzm" }],
      ["path", { d: "M2 15h2", key: "1gxd5l" }],
      ["path", { d: "M2 9h2", key: "1bbxkp" }],
      ["path", { d: "M20 15h2", key: "19e6y8" }],
      ["path", { d: "M20 9h2", key: "19tzq7" }],
      ["path", { d: "M9 2v2", key: "165o2o" }],
      ["path", { d: "M9 20v2", key: "i2bqo8" }]
    ]);
    var CreativeCommons = createLucideIcon("CreativeCommons", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      [
        "path",
        { d: "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1ss3eq" }
      ],
      [
        "path",
        { d: "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1", key: "1od56t" }
      ]
    ]);
    var CreditCard = createLucideIcon("CreditCard", [
      ["rect", { width: "20", height: "14", x: "2", y: "5", rx: "2", key: "ynyp8z" }],
      ["line", { x1: "2", x2: "22", y1: "10", y2: "10", key: "1b3vmo" }]
    ]);
    var Croissant = createLucideIcon("Croissant", [
      [
        "path",
        {
          d: "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z",
          key: "1ozxlb"
        }
      ],
      [
        "path",
        {
          d: "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83",
          key: "ffuyb5"
        }
      ],
      ["path", { d: "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4", key: "osnpzi" }],
      [
        "path",
        {
          d: "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2",
          key: "1vubaw"
        }
      ],
      ["path", { d: "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5", key: "wxr772" }]
    ]);
    var Crop = createLucideIcon("Crop", [
      ["path", { d: "M6 2v14a2 2 0 0 0 2 2h14", key: "ron5a4" }],
      ["path", { d: "M18 22V8a2 2 0 0 0-2-2H2", key: "7s9ehn" }]
    ]);
    var Cross = createLucideIcon("Cross", [
      [
        "path",
        {
          d: "M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z",
          key: "1xbrqy"
        }
      ]
    ]);
    var Crosshair = createLucideIcon("Crosshair", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["line", { x1: "22", x2: "18", y1: "12", y2: "12", key: "l9bcsi" }],
      ["line", { x1: "6", x2: "2", y1: "12", y2: "12", key: "13hhkx" }],
      ["line", { x1: "12", x2: "12", y1: "6", y2: "2", key: "10w3f3" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "18", key: "15g9kq" }]
    ]);
    var Crown = createLucideIcon("Crown", [
      [
        "path",
        {
          d: "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z",
          key: "1vdc57"
        }
      ],
      ["path", { d: "M5 21h14", key: "11awu3" }]
    ]);
    var Cuboid = createLucideIcon("Cuboid", [
      [
        "path",
        {
          d: "m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z",
          key: "1u2ovd"
        }
      ],
      ["path", { d: "M10 22v-8L2.25 9.15", key: "11pn4q" }],
      ["path", { d: "m10 14 11.77-6.87", key: "1kt1wh" }]
    ]);
    var CupSoda = createLucideIcon("CupSoda", [
      ["path", { d: "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8", key: "8166m8" }],
      ["path", { d: "M5 8h14", key: "pcz4l3" }],
      ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "yjz344" }],
      ["path", { d: "m12 8 1-6h2", key: "3ybfa4" }]
    ]);
    var Currency = createLucideIcon("Currency", [
      ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
      ["line", { x1: "3", x2: "6", y1: "3", y2: "6", key: "1jkytn" }],
      ["line", { x1: "21", x2: "18", y1: "3", y2: "6", key: "14zfjt" }],
      ["line", { x1: "3", x2: "6", y1: "21", y2: "18", key: "iusuec" }],
      ["line", { x1: "21", x2: "18", y1: "21", y2: "18", key: "yj2dd7" }]
    ]);
    var Cylinder = createLucideIcon("Cylinder", [
      ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
      ["path", { d: "M3 5v14a9 3 0 0 0 18 0V5", key: "aqi0yr" }]
    ]);
    var Dam = createLucideIcon("Dam", [
      [
        "path",
        { d: "M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1", key: "157kva" }
      ],
      ["path", { d: "M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1", key: "d7q6m6" }],
      ["path", { d: "M2 10h4", key: "l0bgd4" }],
      ["path", { d: "M2 14h4", key: "1gsvsf" }],
      ["path", { d: "M2 18h4", key: "1bu2t1" }],
      ["path", { d: "M2 6h4", key: "aawbzj" }],
      [
        "path",
        { d: "M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z", key: "pr6s65" }
      ]
    ]);
    var DatabaseBackup = createLucideIcon("DatabaseBackup", [
      ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
      ["path", { d: "M3 12a9 3 0 0 0 5 2.69", key: "1ui2ym" }],
      ["path", { d: "M21 9.3V5", key: "6k6cib" }],
      ["path", { d: "M3 5v14a9 3 0 0 0 6.47 2.88", key: "i62tjy" }],
      ["path", { d: "M12 12v4h4", key: "1bxaet" }],
      [
        "path",
        {
          d: "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16",
          key: "1f4ei9"
        }
      ]
    ]);
    var DatabaseZap = createLucideIcon("DatabaseZap", [
      ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
      ["path", { d: "M3 5V19A9 3 0 0 0 15 21.84", key: "14ibmq" }],
      ["path", { d: "M21 5V8", key: "1marbg" }],
      ["path", { d: "M21 12L18 17H22L19 22", key: "zafso" }],
      ["path", { d: "M3 12A9 3 0 0 0 14.59 14.87", key: "1y4wr8" }]
    ]);
    var Database = createLucideIcon("Database", [
      ["ellipse", { cx: "12", cy: "5", rx: "9", ry: "3", key: "msslwz" }],
      ["path", { d: "M3 5V19A9 3 0 0 0 21 19V5", key: "1wlel7" }],
      ["path", { d: "M3 12A9 3 0 0 0 21 12", key: "mv7ke4" }]
    ]);
    var Delete = createLucideIcon("Delete", [
      [
        "path",
        {
          d: "M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z",
          key: "1yo7s0"
        }
      ],
      ["path", { d: "m12 9 6 6", key: "anjzzh" }],
      ["path", { d: "m18 9-6 6", key: "1fp51s" }]
    ]);
    var Dessert = createLucideIcon("Dessert", [
      ["circle", { cx: "12", cy: "4", r: "2", key: "muu5ef" }],
      [
        "path",
        {
          d: "M10.2 3.2C5.5 4 2 8.1 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4 0c0-4.9-3.5-9-8.2-9.8",
          key: "lfo06j"
        }
      ],
      ["path", { d: "M3.2 14.8a9 9 0 0 0 17.6 0", key: "12xarc" }]
    ]);
    var Diameter = createLucideIcon("Diameter", [
      ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
      ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }],
      ["path", { d: "M6.48 3.66a10 10 0 0 1 13.86 13.86", key: "xr8kdq" }],
      ["path", { d: "m6.41 6.41 11.18 11.18", key: "uhpjw7" }],
      ["path", { d: "M3.66 6.48a10 10 0 0 0 13.86 13.86", key: "cldpwv" }]
    ]);
    var DiamondMinus = createLucideIcon("DiamondMinus", [
      [
        "path",
        {
          d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z",
          key: "1ey20j"
        }
      ],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var DiamondPercent = createLucideIcon("DiamondPercent", [
      [
        "path",
        {
          d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z",
          key: "1tpxz2"
        }
      ],
      ["path", { d: "M9.2 9.2h.01", key: "1b7bvt" }],
      ["path", { d: "m14.5 9.5-5 5", key: "17q4r4" }],
      ["path", { d: "M14.7 14.8h.01", key: "17nsh4" }]
    ]);
    var DiamondPlus = createLucideIcon("DiamondPlus", [
      ["path", { d: "M12 8v8", key: "napkw2" }],
      [
        "path",
        {
          d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z",
          key: "1ey20j"
        }
      ],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var Diamond = createLucideIcon("Diamond", [
      [
        "path",
        {
          d: "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z",
          key: "1f1r0c"
        }
      ]
    ]);
    var Dice1 = createLucideIcon("Dice1", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }]
    ]);
    var Dice2 = createLucideIcon("Dice2", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M15 9h.01", key: "x1ddxp" }],
      ["path", { d: "M9 15h.01", key: "fzyn71" }]
    ]);
    var Dice3 = createLucideIcon("Dice3", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M16 8h.01", key: "cr5u4v" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M8 16h.01", key: "18s6g9" }]
    ]);
    var Dice4 = createLucideIcon("Dice4", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M16 8h.01", key: "cr5u4v" }],
      ["path", { d: "M8 8h.01", key: "1e4136" }],
      ["path", { d: "M8 16h.01", key: "18s6g9" }],
      ["path", { d: "M16 16h.01", key: "1f9h7w" }]
    ]);
    var Dice5 = createLucideIcon("Dice5", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M16 8h.01", key: "cr5u4v" }],
      ["path", { d: "M8 8h.01", key: "1e4136" }],
      ["path", { d: "M8 16h.01", key: "18s6g9" }],
      ["path", { d: "M16 16h.01", key: "1f9h7w" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }]
    ]);
    var Dice6 = createLucideIcon("Dice6", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M16 8h.01", key: "cr5u4v" }],
      ["path", { d: "M16 12h.01", key: "1l6xoz" }],
      ["path", { d: "M16 16h.01", key: "1f9h7w" }],
      ["path", { d: "M8 8h.01", key: "1e4136" }],
      ["path", { d: "M8 12h.01", key: "czm47f" }],
      ["path", { d: "M8 16h.01", key: "18s6g9" }]
    ]);
    var Dices = createLucideIcon("Dices", [
      ["rect", { width: "12", height: "12", x: "2", y: "10", rx: "2", ry: "2", key: "6agr2n" }],
      [
        "path",
        { d: "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6", key: "1o487t" }
      ],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "M10 14h.01", key: "ssrbsk" }],
      ["path", { d: "M15 6h.01", key: "cblpky" }],
      ["path", { d: "M18 9h.01", key: "2061c0" }]
    ]);
    var Diff = createLucideIcon("Diff", [
      ["path", { d: "M12 3v14", key: "7cf3v8" }],
      ["path", { d: "M5 10h14", key: "elsbfy" }],
      ["path", { d: "M5 21h14", key: "11awu3" }]
    ]);
    var Disc2 = createLucideIcon("Disc2", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }]
    ]);
    var Disc3 = createLucideIcon("Disc3", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M6 12c0-1.7.7-3.2 1.8-4.2", key: "oqkarx" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "M18 12c0 1.7-.7 3.2-1.8 4.2", key: "1eah9h" }]
    ]);
    var DiscAlbum = createLucideIcon("DiscAlbum", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["circle", { cx: "12", cy: "12", r: "5", key: "nd82uf" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }]
    ]);
    var Disc = createLucideIcon("Disc", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
    ]);
    var Divide = createLucideIcon("Divide", [
      ["circle", { cx: "12", cy: "6", r: "1", key: "1bh7o1" }],
      ["line", { x1: "5", x2: "19", y1: "12", y2: "12", key: "13b5wn" }],
      ["circle", { cx: "12", cy: "18", r: "1", key: "lqb9t5" }]
    ]);
    var DnaOff = createLucideIcon("DnaOff", [
      ["path", { d: "M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8", key: "1bivrr" }],
      ["path", { d: "m17 6-2.891-2.891", key: "xu6p2f" }],
      ["path", { d: "M2 15c3.333-3 6.667-3 10-3", key: "nxix30" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "m20 9 .891.891", key: "3xwk7g" }],
      ["path", { d: "M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1", key: "18cutr" }],
      ["path", { d: "M3.109 14.109 4 15", key: "q76aoh" }],
      ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
      ["path", { d: "m7 18 2.891 2.891", key: "1sisit" }],
      ["path", { d: "M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16", key: "rlvei3" }]
    ]);
    var Dna = createLucideIcon("Dna", [
      ["path", { d: "m10 16 1.5 1.5", key: "11lckj" }],
      ["path", { d: "m14 8-1.5-1.5", key: "1ohn8i" }],
      ["path", { d: "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993", key: "80uv8i" }],
      ["path", { d: "m16.5 10.5 1 1", key: "696xn5" }],
      ["path", { d: "m17 6-2.891-2.891", key: "xu6p2f" }],
      ["path", { d: "M2 15c6.667-6 13.333 0 20-6", key: "1pyr53" }],
      ["path", { d: "m20 9 .891.891", key: "3xwk7g" }],
      ["path", { d: "M3.109 14.109 4 15", key: "q76aoh" }],
      ["path", { d: "m6.5 12.5 1 1", key: "cs35ky" }],
      ["path", { d: "m7 18 2.891 2.891", key: "1sisit" }],
      ["path", { d: "M9 22c1.798-1.998 2.518-3.995 2.807-5.993", key: "q3hbxp" }]
    ]);
    var Dock = createLucideIcon("Dock", [
      ["path", { d: "M2 8h20", key: "d11cs7" }],
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M6 16h12", key: "u522kt" }]
    ]);
    var Dog = createLucideIcon("Dog", [
      ["path", { d: "M11.25 16.25h1.5L12 17z", key: "w7jh35" }],
      ["path", { d: "M16 14v.5", key: "1lajdz" }],
      [
        "path",
        {
          d: "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309",
          key: "u7s9ue"
        }
      ],
      ["path", { d: "M8 14v.5", key: "1nzgdb" }],
      [
        "path",
        {
          d: "M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5",
          key: "v8hric"
        }
      ]
    ]);
    var DollarSign = createLucideIcon("DollarSign", [
      ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
      ["path", { d: "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6", key: "1b0p4s" }]
    ]);
    var Donut = createLucideIcon("Donut", [
      [
        "path",
        {
          d: "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3",
          key: "19sr3x"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ]);
    var DoorClosed = createLucideIcon("DoorClosed", [
      ["path", { d: "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14", key: "36qu9e" }],
      ["path", { d: "M2 20h20", key: "owomy5" }],
      ["path", { d: "M14 12v.01", key: "xfcn54" }]
    ]);
    var DoorOpen = createLucideIcon("DoorOpen", [
      ["path", { d: "M13 4h3a2 2 0 0 1 2 2v14", key: "hrm0s9" }],
      ["path", { d: "M2 20h3", key: "1gaodv" }],
      ["path", { d: "M13 20h9", key: "s90cdi" }],
      ["path", { d: "M10 12v.01", key: "vx6srw" }],
      [
        "path",
        {
          d: "M13 4.562v16.157a1 1 0 0 1-1.242.97L5 20V5.562a2 2 0 0 1 1.515-1.94l4-1A2 2 0 0 1 13 4.561Z",
          key: "199qr4"
        }
      ]
    ]);
    var Dot = createLucideIcon("Dot", [
      ["circle", { cx: "12.1", cy: "12.1", r: "1", key: "18d7e5" }]
    ]);
    var Download = createLucideIcon("Download", [
      ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
      ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
      ["line", { x1: "12", x2: "12", y1: "15", y2: "3", key: "1vk2je" }]
    ]);
    var DraftingCompass = createLucideIcon("DraftingCompass", [
      ["path", { d: "m12.99 6.74 1.93 3.44", key: "iwagvd" }],
      ["path", { d: "M19.136 12a10 10 0 0 1-14.271 0", key: "ppmlo4" }],
      ["path", { d: "m21 21-2.16-3.84", key: "vylbct" }],
      ["path", { d: "m3 21 8.02-14.26", key: "1ssaw4" }],
      ["circle", { cx: "12", cy: "5", r: "2", key: "f1ur92" }]
    ]);
    var Drama = createLucideIcon("Drama", [
      ["path", { d: "M10 11h.01", key: "d2at3l" }],
      ["path", { d: "M14 6h.01", key: "k028ub" }],
      ["path", { d: "M18 6h.01", key: "1v4wsw" }],
      ["path", { d: "M6.5 13.1h.01", key: "1748ia" }],
      ["path", { d: "M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3", key: "172yzv" }],
      ["path", { d: "M17.4 9.9c-.8.8-2 .8-2.8 0", key: "1obv0w" }],
      [
        "path",
        {
          d: "M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7",
          key: "rqjl8i"
        }
      ],
      ["path", { d: "M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4", key: "1mr6wy" }]
    ]);
    var Dribbble = createLucideIcon("Dribbble", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94", key: "hpej1" }],
      ["path", { d: "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32", key: "1tr44o" }],
      ["path", { d: "M8.56 2.75c4.37 6 6 9.42 8 17.72", key: "kbh691" }]
    ]);
    var Drill = createLucideIcon("Drill", [
      [
        "path",
        { d: "M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z", key: "ioqxb1" }
      ],
      [
        "path",
        {
          d: "M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8",
          key: "1rs59n"
        }
      ],
      ["path", { d: "M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3", key: "105ega" }],
      ["path", { d: "M18 6h4", key: "66u95g" }],
      ["path", { d: "m5 10-2 8", key: "xt2lic" }],
      ["path", { d: "m7 18 2-8", key: "1bzku2" }]
    ]);
    var Droplet = createLucideIcon("Droplet", [
      [
        "path",
        {
          d: "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z",
          key: "c7niix"
        }
      ]
    ]);
    var Droplets = createLucideIcon("Droplets", [
      [
        "path",
        {
          d: "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z",
          key: "1ptgy4"
        }
      ],
      [
        "path",
        {
          d: "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97",
          key: "1sl1rz"
        }
      ]
    ]);
    var Drum = createLucideIcon("Drum", [
      ["path", { d: "m2 2 8 8", key: "1v6059" }],
      ["path", { d: "m22 2-8 8", key: "173r8a" }],
      ["ellipse", { cx: "12", cy: "9", rx: "10", ry: "5", key: "liohsx" }],
      ["path", { d: "M7 13.4v7.9", key: "1yi6u9" }],
      ["path", { d: "M12 14v8", key: "1tn2tj" }],
      ["path", { d: "M17 13.4v7.9", key: "eqz2v3" }],
      ["path", { d: "M2 9v8a10 5 0 0 0 20 0V9", key: "1750ul" }]
    ]);
    var Drumstick = createLucideIcon("Drumstick", [
      [
        "path",
        { d: "M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23", key: "1dtqwm" }
      ],
      [
        "path",
        {
          d: "m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59",
          key: "1oq1fw"
        }
      ]
    ]);
    var Dumbbell = createLucideIcon("Dumbbell", [
      ["path", { d: "M14.4 14.4 9.6 9.6", key: "ic80wn" }],
      [
        "path",
        {
          d: "M18.657 21.485a2 2 0 1 1-2.829-2.828l-1.767 1.768a2 2 0 1 1-2.829-2.829l6.364-6.364a2 2 0 1 1 2.829 2.829l-1.768 1.767a2 2 0 1 1 2.828 2.829z",
          key: "nnl7wr"
        }
      ],
      ["path", { d: "m21.5 21.5-1.4-1.4", key: "1f1ice" }],
      ["path", { d: "M3.9 3.9 2.5 2.5", key: "1evmna" }],
      [
        "path",
        {
          d: "M6.404 12.768a2 2 0 1 1-2.829-2.829l1.768-1.767a2 2 0 1 1-2.828-2.829l2.828-2.828a2 2 0 1 1 2.829 2.828l1.767-1.768a2 2 0 1 1 2.829 2.829z",
          key: "yhosts"
        }
      ]
    ]);
    var EarOff = createLucideIcon("EarOff", [
      ["path", { d: "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46", key: "1qngmn" }],
      ["path", { d: "M6 8.5c0-.75.13-1.47.36-2.14", key: "b06bma" }],
      ["path", { d: "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76", key: "g10hsz" }],
      ["path", { d: "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18", key: "ygzou7" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Ear = createLucideIcon("Ear", [
      ["path", { d: "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0", key: "1dfaln" }],
      ["path", { d: "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4", key: "1qnva7" }]
    ]);
    var EarthLock = createLucideIcon("EarthLock", [
      ["path", { d: "M7 3.34V5a3 3 0 0 0 3 3", key: "w732o8" }],
      ["path", { d: "M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05", key: "f02343" }],
      ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
      ["path", { d: "M12 2a10 10 0 1 0 9.54 13", key: "zjsr6q" }],
      ["path", { d: "M20 6V4a2 2 0 1 0-4 0v2", key: "1of5e8" }],
      ["rect", { width: "8", height: "5", x: "14", y: "6", rx: "1", key: "1fmf51" }]
    ]);
    var Earth = createLucideIcon("Earth", [
      ["path", { d: "M21.54 15H17a2 2 0 0 0-2 2v4.54", key: "1djwo0" }],
      [
        "path",
        {
          d: "M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17",
          key: "1tzkfa"
        }
      ],
      ["path", { d: "M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05", key: "14pb5j" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var Eclipse = createLucideIcon("Eclipse", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M12 2a7 7 0 1 0 10 10", key: "1yuj32" }]
    ]);
    var EggFried = createLucideIcon("EggFried", [
      ["circle", { cx: "11.5", cy: "12.5", r: "3.5", key: "1cl1mi" }],
      [
        "path",
        {
          d: "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z",
          key: "165ef9"
        }
      ]
    ]);
    var EggOff = createLucideIcon("EggOff", [
      [
        "path",
        {
          d: "M6.399 6.399C5.362 8.157 4.65 10.189 4.5 12c-.37 4.43 1.27 9.95 7.5 10 3.256-.026 5.259-1.547 6.375-3.625",
          key: "6et380"
        }
      ],
      [
        "path",
        {
          d: "M19.532 13.875A14.07 14.07 0 0 0 19.5 12c-.36-4.34-3.95-9.96-7.5-10-1.04.012-2.082.502-3.046 1.297",
          key: "gcdc3f"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Egg = createLucideIcon("Egg", [
      [
        "path",
        {
          d: "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z",
          key: "1c39pg"
        }
      ]
    ]);
    var EllipsisVertical = createLucideIcon("EllipsisVertical", [
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
      ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }]
    ]);
    var Ellipsis = createLucideIcon("Ellipsis", [
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
      ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }]
    ]);
    var EqualApproximately = createLucideIcon("EqualApproximately", [
      ["path", { d: "M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0", key: "yrdkhy" }],
      ["path", { d: "M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0", key: "gzkvyz" }]
    ]);
    var EqualNot = createLucideIcon("EqualNot", [
      ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
      ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }],
      ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }]
    ]);
    var Equal = createLucideIcon("Equal", [
      ["line", { x1: "5", x2: "19", y1: "9", y2: "9", key: "1nwqeh" }],
      ["line", { x1: "5", x2: "19", y1: "15", y2: "15", key: "g8yjpy" }]
    ]);
    var Eraser = createLucideIcon("Eraser", [
      [
        "path",
        {
          d: "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21",
          key: "182aya"
        }
      ],
      ["path", { d: "M22 21H7", key: "t4ddhn" }],
      ["path", { d: "m5 11 9 9", key: "1mo9qw" }]
    ]);
    var EthernetPort = createLucideIcon("EthernetPort", [
      [
        "path",
        {
          d: "m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z",
          key: "rbahqx"
        }
      ],
      ["path", { d: "M6 8v1", key: "1636ez" }],
      ["path", { d: "M10 8v1", key: "1talb4" }],
      ["path", { d: "M14 8v1", key: "1rsfgr" }],
      ["path", { d: "M18 8v1", key: "gnkwox" }]
    ]);
    var Euro = createLucideIcon("Euro", [
      ["path", { d: "M4 10h12", key: "1y6xl8" }],
      ["path", { d: "M4 14h9", key: "1loblj" }],
      [
        "path",
        {
          d: "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2",
          key: "1j6lzo"
        }
      ]
    ]);
    var Expand = createLucideIcon("Expand", [
      ["path", { d: "m21 21-6-6m6 6v-4.8m0 4.8h-4.8", key: "1c15vz" }],
      ["path", { d: "M3 16.2V21m0 0h4.8M3 21l6-6", key: "1fsnz2" }],
      ["path", { d: "M21 7.8V3m0 0h-4.8M21 3l-6 6", key: "hawz9i" }],
      ["path", { d: "M3 7.8V3m0 0h4.8M3 3l6 6", key: "u9ee12" }]
    ]);
    var ExternalLink = createLucideIcon("ExternalLink", [
      ["path", { d: "M15 3h6v6", key: "1q9fwt" }],
      ["path", { d: "M10 14 21 3", key: "gplh6r" }],
      ["path", { d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6", key: "a6xqqp" }]
    ]);
    var EyeClosed = createLucideIcon("EyeClosed", [
      ["path", { d: "m15 18-.722-3.25", key: "1j64jw" }],
      ["path", { d: "M2 8a10.645 10.645 0 0 0 20 0", key: "1e7gxb" }],
      ["path", { d: "m20 15-1.726-2.05", key: "1cnuld" }],
      ["path", { d: "m4 15 1.726-2.05", key: "1dsqqd" }],
      ["path", { d: "m9 18 .722-3.25", key: "ypw2yx" }]
    ]);
    var EyeOff = createLucideIcon("EyeOff", [
      [
        "path",
        {
          d: "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49",
          key: "ct8e1f"
        }
      ],
      ["path", { d: "M14.084 14.158a3 3 0 0 1-4.242-4.242", key: "151rxh" }],
      [
        "path",
        {
          d: "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143",
          key: "13bj9a"
        }
      ],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Eye = createLucideIcon("Eye", [
      [
        "path",
        {
          d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
          key: "1nclc0"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ]);
    var Facebook = createLucideIcon("Facebook", [
      [
        "path",
        { d: "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z", key: "1jg4f8" }
      ]
    ]);
    var Factory = createLucideIcon("Factory", [
      [
        "path",
        {
          d: "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "159hny"
        }
      ],
      ["path", { d: "M17 18h1", key: "uldtlt" }],
      ["path", { d: "M12 18h1", key: "s9uhes" }],
      ["path", { d: "M7 18h1", key: "1neino" }]
    ]);
    var Fan = createLucideIcon("Fan", [
      [
        "path",
        {
          d: "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z",
          key: "484a7f"
        }
      ],
      ["path", { d: "M12 12v.01", key: "u5ubse" }]
    ]);
    var FastForward = createLucideIcon("FastForward", [
      ["polygon", { points: "13 19 22 12 13 5 13 19", key: "587y9g" }],
      ["polygon", { points: "2 19 11 12 2 5 2 19", key: "3pweh0" }]
    ]);
    var Feather = createLucideIcon("Feather", [
      [
        "path",
        {
          d: "M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z",
          key: "18jl4k"
        }
      ],
      ["path", { d: "M16 8 2 22", key: "vp34q" }],
      ["path", { d: "M17.5 15H9", key: "1oz8nu" }]
    ]);
    var Fence = createLucideIcon("Fence", [
      ["path", { d: "M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "1n2rgs" }],
      ["path", { d: "M6 8h4", key: "utf9t1" }],
      ["path", { d: "M6 18h4", key: "12yh4b" }],
      ["path", { d: "m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "3ha7mj" }],
      ["path", { d: "M14 8h4", key: "1r8wg2" }],
      ["path", { d: "M14 18h4", key: "1t3kbu" }],
      ["path", { d: "m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z", key: "dfd4e2" }]
    ]);
    var FerrisWheel = createLucideIcon("FerrisWheel", [
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "M12 2v4", key: "3427ic" }],
      ["path", { d: "m6.8 15-3.5 2", key: "hjy98k" }],
      ["path", { d: "m20.7 7-3.5 2", key: "f08gto" }],
      ["path", { d: "M6.8 9 3.3 7", key: "1aevh4" }],
      ["path", { d: "m20.7 17-3.5-2", key: "1liqo3" }],
      ["path", { d: "m9 22 3-8 3 8", key: "wees03" }],
      ["path", { d: "M8 22h8", key: "rmew8v" }],
      ["path", { d: "M18 18.7a9 9 0 1 0-12 0", key: "dhzg4g" }]
    ]);
    var Figma = createLucideIcon("Figma", [
      ["path", { d: "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z", key: "1340ok" }],
      ["path", { d: "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z", key: "1hz3m3" }],
      ["path", { d: "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z", key: "1oz8n2" }],
      ["path", { d: "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z", key: "1ff65i" }],
      ["path", { d: "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z", key: "pdip6e" }]
    ]);
    var FileArchive = createLucideIcon("FileArchive", [
      ["path", { d: "M10 12v-1", key: "v7bkov" }],
      ["path", { d: "M10 18v-2", key: "1cjy8d" }],
      ["path", { d: "M10 7V6", key: "dljcrl" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        { d: "M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01", key: "gkbcor" }
      ],
      ["circle", { cx: "10", cy: "20", r: "2", key: "1xzdoj" }]
    ]);
    var FileAudio2 = createLucideIcon("FileAudio2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["circle", { cx: "3", cy: "17", r: "1", key: "vo6nti" }],
      ["path", { d: "M2 17v-3a4 4 0 0 1 8 0v3", key: "1ggdre" }],
      ["circle", { cx: "9", cy: "17", r: "1", key: "bc1fq4" }]
    ]);
    var FileAudio = createLucideIcon("FileAudio", [
      ["path", { d: "M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "rslqgf" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        {
          d: "M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0",
          key: "9f7x3i"
        }
      ]
    ]);
    var FileAxis3d = createLucideIcon("FileAxis3d", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m8 18 4-4", key: "12zab0" }],
      ["path", { d: "M8 10v8h8", key: "tlaukw" }]
    ]);
    var FileBadge2 = createLucideIcon("FileBadge2", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m14 12.5 1 5.5-3-1-3 1 1-5.5", key: "14xlky" }]
    ]);
    var FileBadge = createLucideIcon("FileBadge", [
      ["path", { d: "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "12ixgl" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "u0c8gj" }],
      ["path", { d: "M7 16.5 8 22l-3-1-3 1 1-5.5", key: "5gm2nr" }]
    ]);
    var FileBox = createLucideIcon("FileBox", [
      ["path", { d: "M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "16lz6z" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        {
          d: "M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z",
          key: "99pj1s"
        }
      ],
      ["path", { d: "M7 17v5", key: "1yj1jh" }],
      ["path", { d: "M11.7 14.2 7 17l-4.7-2.8", key: "1yk8tc" }]
    ]);
    var FileChartColumnIncreasing = createLucideIcon("FileChartColumnIncreasing", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M8 18v-2", key: "qcmpov" }],
      ["path", { d: "M12 18v-4", key: "q1q25u" }],
      ["path", { d: "M16 18v-6", key: "15y0np" }]
    ]);
    var FileChartColumn = createLucideIcon("FileChartColumn", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M8 18v-1", key: "zg0ygc" }],
      ["path", { d: "M12 18v-6", key: "17g6i2" }],
      ["path", { d: "M16 18v-3", key: "j5jt4h" }]
    ]);
    var FileChartLine = createLucideIcon("FileChartLine", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m16 13-3.5 3.5-2-2L8 17", key: "zz7yod" }]
    ]);
    var FileChartPie = createLucideIcon("FileChartPie", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5", key: "13ddob" }],
      ["path", { d: "M4.017 11.512a6 6 0 1 0 8.466 8.475", key: "s6vs5t" }],
      [
        "path",
        {
          d: "M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z",
          key: "1dl6s6"
        }
      ]
    ]);
    var FileCheck2 = createLucideIcon("FileCheck2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m3 15 2 2 4-4", key: "1lhrkk" }]
    ]);
    var FileCheck = createLucideIcon("FileCheck", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m9 15 2 2 4-4", key: "1grp1n" }]
    ]);
    var FileClock = createLucideIcon("FileClock", [
      ["path", { d: "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "37hlfg" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["circle", { cx: "8", cy: "16", r: "6", key: "10v15b" }],
      ["path", { d: "M9.5 17.5 8 16.25V14", key: "1o80t2" }]
    ]);
    var FileCode2 = createLucideIcon("FileCode2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m5 12-3 3 3 3", key: "oke12k" }],
      ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
    ]);
    var FileCode = createLucideIcon("FileCode", [
      ["path", { d: "M10 12.5 8 15l2 2.5", key: "1tg20x" }],
      ["path", { d: "m14 12.5 2 2.5-2 2.5", key: "yinavb" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }]
    ]);
    var FileCog = createLucideIcon("FileCog", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m3.2 12.9-.9-.4", key: "1i3dj5" }],
      ["path", { d: "m3.2 15.1-.9.4", key: "1fvgj0" }],
      [
        "path",
        {
          d: "M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5",
          key: "1yo3oz"
        }
      ],
      ["path", { d: "m4.9 11.2-.4-.9", key: "otmhb9" }],
      ["path", { d: "m4.9 16.8-.4.9", key: "1b8z07" }],
      ["path", { d: "m7.5 10.3-.4.9", key: "11k65u" }],
      ["path", { d: "m7.5 17.7-.4-.9", key: "431x55" }],
      ["path", { d: "m9.7 12.5-.9.4", key: "87sjan" }],
      ["path", { d: "m9.7 15.5-.9-.4", key: "khqm91" }],
      ["circle", { cx: "6", cy: "14", r: "3", key: "a1xfv6" }]
    ]);
    var FileDiff = createLucideIcon("FileDiff", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M9 10h6", key: "9gxzsh" }],
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      ["path", { d: "M9 17h6", key: "r8uit2" }]
    ]);
    var FileDigit = createLucideIcon("FileDigit", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["rect", { width: "4", height: "6", x: "2", y: "12", rx: "2", key: "jm304g" }],
      ["path", { d: "M10 12h2v6", key: "12zw74" }],
      ["path", { d: "M10 18h4", key: "1ulq68" }]
    ]);
    var FileDown = createLucideIcon("FileDown", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M12 18v-6", key: "17g6i2" }],
      ["path", { d: "m9 15 3 3 3-3", key: "1npd3o" }]
    ]);
    var FileHeart = createLucideIcon("FileHeart", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2", key: "17k7jt" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        {
          d: "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z",
          key: "1c1fso"
        }
      ]
    ]);
    var FileImage = createLucideIcon("FileImage", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["circle", { cx: "10", cy: "12", r: "2", key: "737tya" }],
      ["path", { d: "m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22", key: "wt3hpn" }]
    ]);
    var FileInput = createLucideIcon("FileInput", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M2 15h10", key: "jfw4w8" }],
      ["path", { d: "m9 18 3-3-3-3", key: "112psh" }]
    ]);
    var FileJson2 = createLucideIcon("FileJson2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        { d: "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "fq0c9t" }
      ],
      [
        "path",
        { d: "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "4gibmv" }
      ]
    ]);
    var FileJson = createLucideIcon("FileJson", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        { d: "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1", key: "1oajmo" }
      ],
      [
        "path",
        { d: "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1", key: "mpwhp6" }
      ]
    ]);
    var FileKey2 = createLucideIcon("FileKey2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6", key: "rc0qvx" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
      ["path", { d: "m10 10-4.5 4.5", key: "7fwrp6" }],
      ["path", { d: "m9 11 1 1", key: "wa6s5q" }]
    ]);
    var FileKey = createLucideIcon("FileKey", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["circle", { cx: "10", cy: "16", r: "2", key: "4ckbqe" }],
      ["path", { d: "m16 10-4.5 4.5", key: "7p3ebg" }],
      ["path", { d: "m15 11 1 1", key: "1bsyx3" }]
    ]);
    var FileLock2 = createLucideIcon("FileLock2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1", key: "jmtmu2" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["rect", { width: "8", height: "5", x: "2", y: "13", rx: "1", key: "10y5wo" }],
      ["path", { d: "M8 13v-2a2 2 0 1 0-4 0v2", key: "1pdxzg" }]
    ]);
    var FileLock = createLucideIcon("FileLock", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["rect", { width: "8", height: "6", x: "8", y: "12", rx: "1", key: "3yr8at" }],
      ["path", { d: "M10 12v-2a2 2 0 1 1 4 0v2", key: "j4i8d" }]
    ]);
    var FileMinus2 = createLucideIcon("FileMinus2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M3 15h6", key: "4e2qda" }]
    ]);
    var FileMinus = createLucideIcon("FileMinus", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M9 15h6", key: "cctwl0" }]
    ]);
    var FileMusic = createLucideIcon("FileMusic", [
      ["path", { d: "M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4", key: "1d3kfm" }],
      ["path", { d: "M8 18v-7.7L16 9v7", key: "1oie6o" }],
      ["circle", { cx: "14", cy: "16", r: "2", key: "1bzzi3" }],
      ["circle", { cx: "6", cy: "18", r: "2", key: "1fncim" }]
    ]);
    var FileOutput = createLucideIcon("FileOutput", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2", key: "1vk7w2" }],
      ["path", { d: "M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6", key: "1jink5" }],
      ["path", { d: "m5 11-3 3", key: "1dgrs4" }],
      ["path", { d: "m5 17-3-3h10", key: "1mvvaf" }]
    ]);
    var FilePenLine = createLucideIcon("FilePenLine", [
      [
        "path",
        {
          d: "m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2",
          key: "142zxg"
        }
      ],
      [
        "path",
        {
          d: "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "2t3380"
        }
      ],
      ["path", { d: "M8 18h1", key: "13wk12" }]
    ]);
    var FilePen = createLucideIcon("FilePen", [
      ["path", { d: "M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5", key: "1couwa" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        {
          d: "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "1y4qbx"
        }
      ]
    ]);
    var FilePlus2 = createLucideIcon("FilePlus2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M3 15h6", key: "4e2qda" }],
      ["path", { d: "M6 12v6", key: "1u72j0" }]
    ]);
    var FilePlus = createLucideIcon("FilePlus", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M9 15h6", key: "cctwl0" }],
      ["path", { d: "M12 18v-6", key: "17g6i2" }]
    ]);
    var FileQuestion = createLucideIcon("FileQuestion", [
      ["path", { d: "M12 17h.01", key: "p32p05" }],
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }],
      ["path", { d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3", key: "mhlwft" }]
    ]);
    var FileScan = createLucideIcon("FileScan", [
      ["path", { d: "M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4", key: "1rdf37" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M16 14a2 2 0 0 0-2 2", key: "ceaadl" }],
      ["path", { d: "M20 14a2 2 0 0 1 2 2", key: "1ny6zw" }],
      ["path", { d: "M20 22a2 2 0 0 0 2-2", key: "1l9q4k" }],
      ["path", { d: "M16 22a2 2 0 0 1-2-2", key: "1wqh5n" }]
    ]);
    var FileSearch2 = createLucideIcon("FileSearch2", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["circle", { cx: "11.5", cy: "14.5", r: "2.5", key: "1bq0ko" }],
      ["path", { d: "M13.3 16.3 15 18", key: "2quom7" }]
    ]);
    var FileSearch = createLucideIcon("FileSearch", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        { d: "M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3", key: "ms7g94" }
      ],
      ["path", { d: "m9 18-1.5-1.5", key: "1j6qii" }],
      ["circle", { cx: "5", cy: "14", r: "3", key: "ufru5t" }]
    ]);
    var FileSliders = createLucideIcon("FileSliders", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "M10 11v2", key: "1s651w" }],
      ["path", { d: "M8 17h8", key: "wh5c61" }],
      ["path", { d: "M14 16v2", key: "12fp5e" }]
    ]);
    var FileSpreadsheet = createLucideIcon("FileSpreadsheet", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M8 13h2", key: "yr2amv" }],
      ["path", { d: "M14 13h2", key: "un5t4a" }],
      ["path", { d: "M8 17h2", key: "2yhykz" }],
      ["path", { d: "M14 17h2", key: "10kma7" }]
    ]);
    var FileStack = createLucideIcon("FileStack", [
      ["path", { d: "M21 7h-3a2 2 0 0 1-2-2V2", key: "9rb54x" }],
      [
        "path",
        {
          d: "M21 6v6.5c0 .8-.7 1.5-1.5 1.5h-7c-.8 0-1.5-.7-1.5-1.5v-9c0-.8.7-1.5 1.5-1.5H17Z",
          key: "1059l0"
        }
      ],
      ["path", { d: "M7 8v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H15", key: "16874u" }],
      ["path", { d: "M3 12v8.8c0 .3.2.6.4.8.2.2.5.4.8.4H11", key: "k2ox98" }]
    ]);
    var FileSymlink = createLucideIcon("FileSymlink", [
      ["path", { d: "m10 18 3-3-3-3", key: "18f6ys" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        {
          d: "M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7",
          key: "50q2rw"
        }
      ]
    ]);
    var FileTerminal = createLucideIcon("FileTerminal", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m8 16 2-2-2-2", key: "10vzyd" }],
      ["path", { d: "M12 18h4", key: "1wd2n7" }]
    ]);
    var FileText = createLucideIcon("FileText", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M10 9H8", key: "b1mrlr" }],
      ["path", { d: "M16 13H8", key: "t4e002" }],
      ["path", { d: "M16 17H8", key: "z1uh3a" }]
    ]);
    var FileType2 = createLucideIcon("FileType2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M2 13v-1h6v1", key: "1dh9dg" }],
      ["path", { d: "M5 12v6", key: "150t9c" }],
      ["path", { d: "M4 18h2", key: "1xrofg" }]
    ]);
    var FileType = createLucideIcon("FileType", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M9 13v-1h6v1", key: "1bb014" }],
      ["path", { d: "M12 12v6", key: "3ahymv" }],
      ["path", { d: "M11 18h2", key: "12mj7e" }]
    ]);
    var FileUp = createLucideIcon("FileUp", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M12 12v6", key: "3ahymv" }],
      ["path", { d: "m15 15-3-3-3 3", key: "15xj92" }]
    ]);
    var FileUser = createLucideIcon("FileUser", [
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M15 18a3 3 0 1 0-6 0", key: "16awa0" }],
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z", key: "1mlx9k" }],
      ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }]
    ]);
    var FileVideo2 = createLucideIcon("FileVideo2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["rect", { width: "8", height: "6", x: "2", y: "12", rx: "1", key: "1a6c1e" }],
      ["path", { d: "m10 15.5 4 2.5v-6l-4 2.5", key: "t7cp39" }]
    ]);
    var FileVideo = createLucideIcon("FileVideo", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m10 11 5 3-5 3v-6Z", key: "7ntvm4" }]
    ]);
    var FileVolume2 = createLucideIcon("FileVolume2", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "M8 15h.01", key: "a7atzg" }],
      ["path", { d: "M11.5 13.5a2.5 2.5 0 0 1 0 3", key: "1fccat" }],
      ["path", { d: "M15 12a5 5 0 0 1 0 6", key: "ps46cm" }]
    ]);
    var FileVolume = createLucideIcon("FileVolume", [
      ["path", { d: "M11 11a5 5 0 0 1 0 6", key: "193qb2" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      [
        "path",
        { d: "M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23", key: "ifyjnl" }
      ],
      [
        "path",
        {
          d: "M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z",
          key: "mk8rxu"
        }
      ]
    ]);
    var FileWarning = createLucideIcon("FileWarning", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M12 9v4", key: "juzpu7" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }]
    ]);
    var FileX2 = createLucideIcon("FileX2", [
      ["path", { d: "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4", key: "1pf5j1" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m8 12.5-5 5", key: "b853mi" }],
      ["path", { d: "m3 12.5 5 5", key: "1qls4r" }]
    ]);
    var FileX = createLucideIcon("FileX", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }],
      ["path", { d: "m14.5 12.5-5 5", key: "b62r18" }],
      ["path", { d: "m9.5 12.5 5 5", key: "1rk7el" }]
    ]);
    var File = createLucideIcon("File", [
      ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z", key: "1rqfz7" }],
      ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4", key: "tnqrlb" }]
    ]);
    var Files = createLucideIcon("Files", [
      ["path", { d: "M20 7h-3a2 2 0 0 1-2-2V2", key: "x099mo" }],
      ["path", { d: "M9 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h7l4 4v10a2 2 0 0 1-2 2Z", key: "18t6ie" }],
      ["path", { d: "M3 7.6v12.8A1.6 1.6 0 0 0 4.6 22h9.8", key: "1nja0z" }]
    ]);
    var Film = createLucideIcon("Film", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 3v18", key: "bbkbws" }],
      ["path", { d: "M3 7.5h4", key: "zfgn84" }],
      ["path", { d: "M3 12h18", key: "1i2n21" }],
      ["path", { d: "M3 16.5h4", key: "1230mu" }],
      ["path", { d: "M17 3v18", key: "in4fa5" }],
      ["path", { d: "M17 7.5h4", key: "myr1c1" }],
      ["path", { d: "M17 16.5h4", key: "go4c1d" }]
    ]);
    var FilterX = createLucideIcon("FilterX", [
      ["path", { d: "M13.013 3H2l8 9.46V19l4 2v-8.54l.9-1.055", key: "1fi1da" }],
      ["path", { d: "m22 3-5 5", key: "12jva0" }],
      ["path", { d: "m17 3 5 5", key: "k36vhe" }]
    ]);
    var Filter = createLucideIcon("Filter", [
      ["polygon", { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3", key: "1yg77f" }]
    ]);
    var Fingerprint = createLucideIcon("Fingerprint", [
      ["path", { d: "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4", key: "1nerag" }],
      ["path", { d: "M14 13.12c0 2.38 0 6.38-1 8.88", key: "o46ks0" }],
      ["path", { d: "M17.29 21.02c.12-.6.43-2.3.5-3.02", key: "ptglia" }],
      ["path", { d: "M2 12a10 10 0 0 1 18-6", key: "ydlgp0" }],
      ["path", { d: "M2 16h.01", key: "1gqxmh" }],
      ["path", { d: "M21.8 16c.2-2 .131-5.354 0-6", key: "drycrb" }],
      ["path", { d: "M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2", key: "1tidbn" }],
      ["path", { d: "M8.65 22c.21-.66.45-1.32.57-2", key: "13wd9y" }],
      ["path", { d: "M9 6.8a6 6 0 0 1 9 5.2v2", key: "1fr1j5" }]
    ]);
    var FireExtinguisher = createLucideIcon("FireExtinguisher", [
      ["path", { d: "M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5", key: "sqyvz" }],
      ["path", { d: "M9 18h8", key: "i7pszb" }],
      ["path", { d: "M18 3h-3", key: "7idoqj" }],
      ["path", { d: "M11 3a6 6 0 0 0-6 6v11", key: "1v5je3" }],
      ["path", { d: "M5 13h4", key: "svpcxo" }],
      ["path", { d: "M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z", key: "vsjego" }]
    ]);
    var FishOff = createLucideIcon("FishOff", [
      [
        "path",
        {
          d: "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058",
          key: "1j1hse"
        }
      ],
      [
        "path",
        {
          d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618",
          key: "1q46z8"
        }
      ],
      [
        "path",
        {
          d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20",
          key: "1407gh"
        }
      ]
    ]);
    var FishSymbol = createLucideIcon("FishSymbol", [
      ["path", { d: "M2 16s9-15 20-4C11 23 2 8 2 8", key: "h4oh4o" }]
    ]);
    var Fish = createLucideIcon("Fish", [
      [
        "path",
        {
          d: "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z",
          key: "15baut"
        }
      ],
      ["path", { d: "M18 12v.5", key: "18hhni" }],
      ["path", { d: "M16 17.93a9.77 9.77 0 0 1 0-11.86", key: "16dt7o" }],
      [
        "path",
        {
          d: "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33",
          key: "l9di03"
        }
      ],
      [
        "path",
        { d: "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4", key: "1kjonw" }
      ],
      [
        "path",
        { d: "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98", key: "1zlm23" }
      ]
    ]);
    var FlagOff = createLucideIcon("FlagOff", [
      ["path", { d: "M8 2c3 0 5 2 8 2s4-1 4-1v11", key: "9rwyz9" }],
      ["path", { d: "M4 22V4", key: "1plyxx" }],
      ["path", { d: "M4 15s1-1 4-1 5 2 8 2", key: "1myooe" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var FlagTriangleLeft = createLucideIcon("FlagTriangleLeft", [
      ["path", { d: "M17 22V2L7 7l10 5", key: "1rmf0r" }]
    ]);
    var FlagTriangleRight = createLucideIcon("FlagTriangleRight", [
      ["path", { d: "M7 22V2l10 5-10 5", key: "17n18y" }]
    ]);
    var Flag = createLucideIcon("Flag", [
      ["path", { d: "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z", key: "i9b6wo" }],
      ["line", { x1: "4", x2: "4", y1: "22", y2: "15", key: "1cm3nv" }]
    ]);
    var FlameKindling = createLucideIcon("FlameKindling", [
      [
        "path",
        {
          d: "M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z",
          key: "1ir223"
        }
      ],
      ["path", { d: "m5 22 14-4", key: "1brv4h" }],
      ["path", { d: "m5 18 14 4", key: "lgyyje" }]
    ]);
    var Flame = createLucideIcon("Flame", [
      [
        "path",
        {
          d: "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z",
          key: "96xj49"
        }
      ]
    ]);
    var FlashlightOff = createLucideIcon("FlashlightOff", [
      ["path", { d: "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4", key: "1r120k" }],
      ["path", { d: "M7 2h11v4c0 2-2 2-2 4v1", key: "dz1920" }],
      ["line", { x1: "11", x2: "18", y1: "6", y2: "6", key: "bi1vpe" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Flashlight = createLucideIcon("Flashlight", [
      [
        "path",
        {
          d: "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z",
          key: "1orkel"
        }
      ],
      ["line", { x1: "6", x2: "18", y1: "6", y2: "6", key: "1z11jq" }],
      ["line", { x1: "12", x2: "12", y1: "12", y2: "12", key: "1f4yc1" }]
    ]);
    var FlaskConicalOff = createLucideIcon("FlaskConicalOff", [
      [
        "path",
        {
          d: "M10 10 4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-1.272-2.542",
          key: "59ek9y"
        }
      ],
      ["path", { d: "M10 2v2.343", key: "15t272" }],
      ["path", { d: "M14 2v6.343", key: "sxr80q" }],
      ["path", { d: "M8.5 2h7", key: "csnxdl" }],
      ["path", { d: "M7 16h9", key: "t5njau" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var FlaskConical = createLucideIcon("FlaskConical", [
      [
        "path",
        {
          d: "M10 2v7.527a2 2 0 0 1-.211.896L4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45l-5.069-10.127A2 2 0 0 1 14 9.527V2",
          key: "pzvekw"
        }
      ],
      ["path", { d: "M8.5 2h7", key: "csnxdl" }],
      ["path", { d: "M7 16h10", key: "wp8him" }]
    ]);
    var FlaskRound = createLucideIcon("FlaskRound", [
      ["path", { d: "M10 2v7.31", key: "5d1hyh" }],
      ["path", { d: "M14 9.3V1.99", key: "14k4l0" }],
      ["path", { d: "M8.5 2h7", key: "csnxdl" }],
      ["path", { d: "M14 9.3a6.5 6.5 0 1 1-4 0", key: "1r8fvy" }],
      ["path", { d: "M5.52 16h12.96", key: "46hh1i" }]
    ]);
    var FlipHorizontal2 = createLucideIcon("FlipHorizontal2", [
      ["path", { d: "m3 7 5 5-5 5V7", key: "couhi7" }],
      ["path", { d: "m21 7-5 5 5 5V7", key: "6ouia7" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "M12 14v2", key: "8jcxud" }],
      ["path", { d: "M12 8v2", key: "1woqiv" }],
      ["path", { d: "M12 2v2", key: "tus03m" }]
    ]);
    var FlipHorizontal = createLucideIcon("FlipHorizontal", [
      ["path", { d: "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3", key: "1i73f7" }],
      ["path", { d: "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3", key: "saxlbk" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "M12 14v2", key: "8jcxud" }],
      ["path", { d: "M12 8v2", key: "1woqiv" }],
      ["path", { d: "M12 2v2", key: "tus03m" }]
    ]);
    var FlipVertical2 = createLucideIcon("FlipVertical2", [
      ["path", { d: "m17 3-5 5-5-5h10", key: "1ftt6x" }],
      ["path", { d: "m17 21-5-5-5 5h10", key: "1m0wmu" }],
      ["path", { d: "M4 12H2", key: "rhcxmi" }],
      ["path", { d: "M10 12H8", key: "s88cx1" }],
      ["path", { d: "M16 12h-2", key: "10asgb" }],
      ["path", { d: "M22 12h-2", key: "14jgyd" }]
    ]);
    var FlipVertical = createLucideIcon("FlipVertical", [
      ["path", { d: "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3", key: "14bfxa" }],
      ["path", { d: "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3", key: "14rx03" }],
      ["path", { d: "M4 12H2", key: "rhcxmi" }],
      ["path", { d: "M10 12H8", key: "s88cx1" }],
      ["path", { d: "M16 12h-2", key: "10asgb" }],
      ["path", { d: "M22 12h-2", key: "14jgyd" }]
    ]);
    var Flower2 = createLucideIcon("Flower2", [
      [
        "path",
        {
          d: "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1",
          key: "3pnvol"
        }
      ],
      ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
      ["path", { d: "M12 10v12", key: "6ubwww" }],
      ["path", { d: "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z", key: "9hd38g" }],
      ["path", { d: "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z", key: "ufn41s" }]
    ]);
    var Flower = createLucideIcon("Flower", [
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      [
        "path",
        {
          d: "M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5",
          key: "14wa3c"
        }
      ],
      ["path", { d: "M12 7.5V9", key: "1oy5b0" }],
      ["path", { d: "M7.5 12H9", key: "eltsq1" }],
      ["path", { d: "M16.5 12H15", key: "vk5kw4" }],
      ["path", { d: "M12 16.5V15", key: "k7eayi" }],
      ["path", { d: "m8 8 1.88 1.88", key: "nxy4qf" }],
      ["path", { d: "M14.12 9.88 16 8", key: "1lst6k" }],
      ["path", { d: "m8 16 1.88-1.88", key: "h2eex1" }],
      ["path", { d: "M14.12 14.12 16 16", key: "uqkrx3" }]
    ]);
    var Focus = createLucideIcon("Focus", [
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
    ]);
    var FoldHorizontal = createLucideIcon("FoldHorizontal", [
      ["path", { d: "M2 12h6", key: "1wqiqv" }],
      ["path", { d: "M22 12h-6", key: "1eg9hc" }],
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "M12 8v2", key: "1woqiv" }],
      ["path", { d: "M12 14v2", key: "8jcxud" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "m19 9-3 3 3 3", key: "12ol22" }],
      ["path", { d: "m5 15 3-3-3-3", key: "1kdhjc" }]
    ]);
    var FoldVertical = createLucideIcon("FoldVertical", [
      ["path", { d: "M12 22v-6", key: "6o8u61" }],
      ["path", { d: "M12 8V2", key: "1wkif3" }],
      ["path", { d: "M4 12H2", key: "rhcxmi" }],
      ["path", { d: "M10 12H8", key: "s88cx1" }],
      ["path", { d: "M16 12h-2", key: "10asgb" }],
      ["path", { d: "M22 12h-2", key: "14jgyd" }],
      ["path", { d: "m15 19-3-3-3 3", key: "e37ymu" }],
      ["path", { d: "m15 5-3 3-3-3", key: "19d6lf" }]
    ]);
    var FolderArchive = createLucideIcon("FolderArchive", [
      ["circle", { cx: "15", cy: "19", r: "2", key: "u2pros" }],
      [
        "path",
        {
          d: "M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1",
          key: "1jj40k"
        }
      ],
      ["path", { d: "M15 11v-1", key: "cntcp" }],
      ["path", { d: "M15 17v-2", key: "1279jj" }]
    ]);
    var FolderCheck = createLucideIcon("FolderCheck", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "m9 13 2 2 4-4", key: "6343dt" }]
    ]);
    var FolderClock = createLucideIcon("FolderClock", [
      ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
      [
        "path",
        {
          d: "M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2",
          key: "1urifu"
        }
      ],
      ["path", { d: "M16 14v2l1 1", key: "xth2jh" }]
    ]);
    var FolderClosed = createLucideIcon("FolderClosed", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "M2 10h20", key: "1ir3d8" }]
    ]);
    var FolderCode = createLucideIcon("FolderCode", [
      ["path", { d: "M10 10.5 8 13l2 2.5", key: "m4t9c1" }],
      ["path", { d: "m14 10.5 2 2.5-2 2.5", key: "14w2eb" }],
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z",
          key: "1u1bxd"
        }
      ]
    ]);
    var FolderCog = createLucideIcon("FolderCog", [
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      [
        "path",
        {
          d: "M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v3.3",
          key: "1k8050"
        }
      ],
      ["path", { d: "m21.7 19.4-.9-.3", key: "1qgwi9" }],
      ["path", { d: "m15.2 16.9-.9-.3", key: "1t7mvx" }],
      ["path", { d: "m16.6 21.7.3-.9", key: "1j67ps" }],
      ["path", { d: "m19.1 15.2.3-.9", key: "18r7jp" }],
      ["path", { d: "m19.6 21.7-.4-1", key: "z2vh2" }],
      ["path", { d: "m16.8 15.3-.4-1", key: "1ei7r6" }],
      ["path", { d: "m14.3 19.6 1-.4", key: "11sv9r" }],
      ["path", { d: "m20.7 16.8 1-.4", key: "19m87a" }]
    ]);
    var FolderDot = createLucideIcon("FolderDot", [
      [
        "path",
        {
          d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
          key: "1fr9dc"
        }
      ],
      ["circle", { cx: "12", cy: "13", r: "1", key: "49l61u" }]
    ]);
    var FolderDown = createLucideIcon("FolderDown", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "M12 10v6", key: "1bos4e" }],
      ["path", { d: "m15 13-3 3-3-3", key: "6j2sf0" }]
    ]);
    var FolderGit2 = createLucideIcon("FolderGit2", [
      [
        "path",
        {
          d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5",
          key: "1w6njk"
        }
      ],
      ["circle", { cx: "13", cy: "12", r: "2", key: "1j92g6" }],
      ["path", { d: "M18 19c-2.8 0-5-2.2-5-5v8", key: "pkpw2h" }],
      ["circle", { cx: "20", cy: "19", r: "2", key: "1obnsp" }]
    ]);
    var FolderGit = createLucideIcon("FolderGit", [
      ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "M14 13h3", key: "1dgedf" }],
      ["path", { d: "M7 13h3", key: "1pygq7" }]
    ]);
    var FolderHeart = createLucideIcon("FolderHeart", [
      [
        "path",
        {
          d: "M11 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v1.5",
          key: "6hud8k"
        }
      ],
      [
        "path",
        {
          d: "M13.9 17.45c-1.2-1.2-1.14-2.8-.2-3.73a2.43 2.43 0 0 1 3.44 0l.36.34.34-.34a2.43 2.43 0 0 1 3.45-.01c.95.95 1 2.53-.2 3.74L17.5 21Z",
          key: "wpff58"
        }
      ]
    ]);
    var FolderInput = createLucideIcon("FolderInput", [
      [
        "path",
        {
          d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1",
          key: "fm4g5t"
        }
      ],
      ["path", { d: "M2 13h10", key: "pgb2dq" }],
      ["path", { d: "m9 16 3-3-3-3", key: "6m91ic" }]
    ]);
    var FolderKanban = createLucideIcon("FolderKanban", [
      [
        "path",
        {
          d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
          key: "1fr9dc"
        }
      ],
      ["path", { d: "M8 10v4", key: "tgpxqk" }],
      ["path", { d: "M12 10v2", key: "hh53o1" }],
      ["path", { d: "M16 10v6", key: "1d6xys" }]
    ]);
    var FolderKey = createLucideIcon("FolderKey", [
      ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
      [
        "path",
        {
          d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2",
          key: "3hgo9p"
        }
      ],
      ["path", { d: "m22 14-4.5 4.5", key: "1ef6z8" }],
      ["path", { d: "m21 15 1 1", key: "1ejcpy" }]
    ]);
    var FolderLock = createLucideIcon("FolderLock", [
      ["rect", { width: "8", height: "5", x: "14", y: "17", rx: "1", key: "19aais" }],
      [
        "path",
        {
          d: "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5",
          key: "1w6v7t"
        }
      ],
      ["path", { d: "M20 17v-2a2 2 0 1 0-4 0v2", key: "pwaxnr" }]
    ]);
    var FolderMinus = createLucideIcon("FolderMinus", [
      ["path", { d: "M9 13h6", key: "1uhe8q" }],
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ]
    ]);
    var FolderOpenDot = createLucideIcon("FolderOpenDot", [
      [
        "path",
        {
          d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2",
          key: "1nmvlm"
        }
      ],
      ["circle", { cx: "14", cy: "15", r: "1", key: "1gm4qj" }]
    ]);
    var FolderOpen = createLucideIcon("FolderOpen", [
      [
        "path",
        {
          d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2",
          key: "usdka0"
        }
      ]
    ]);
    var FolderOutput = createLucideIcon("FolderOutput", [
      [
        "path",
        {
          d: "M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5",
          key: "1yk7aj"
        }
      ],
      ["path", { d: "M2 13h10", key: "pgb2dq" }],
      ["path", { d: "m5 10-3 3 3 3", key: "1r8ie0" }]
    ]);
    var FolderPen = createLucideIcon("FolderPen", [
      [
        "path",
        {
          d: "M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5",
          key: "a8xqs0"
        }
      ],
      [
        "path",
        {
          d: "M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "1saktj"
        }
      ]
    ]);
    var FolderPlus = createLucideIcon("FolderPlus", [
      ["path", { d: "M12 10v6", key: "1bos4e" }],
      ["path", { d: "M9 13h6", key: "1uhe8q" }],
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ]
    ]);
    var FolderRoot = createLucideIcon("FolderRoot", [
      [
        "path",
        {
          d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z",
          key: "1fr9dc"
        }
      ],
      ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }],
      ["path", { d: "M12 15v5", key: "11xva1" }]
    ]);
    var FolderSearch2 = createLucideIcon("FolderSearch2", [
      ["circle", { cx: "11.5", cy: "12.5", r: "2.5", key: "1ea5ju" }],
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "M13.3 14.3 15 16", key: "1y4v1n" }]
    ]);
    var FolderSearch = createLucideIcon("FolderSearch", [
      [
        "path",
        {
          d: "M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1",
          key: "1bw5m7"
        }
      ],
      ["path", { d: "m21 21-1.9-1.9", key: "1g2n9r" }],
      ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }]
    ]);
    var FolderSymlink = createLucideIcon("FolderSymlink", [
      [
        "path",
        {
          d: "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7",
          key: "x1c07l"
        }
      ],
      ["path", { d: "m8 16 3-3-3-3", key: "rlqrt1" }]
    ]);
    var FolderSync = createLucideIcon("FolderSync", [
      [
        "path",
        {
          d: "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5",
          key: "1dkoa9"
        }
      ],
      ["path", { d: "M12 10v4h4", key: "1czhmt" }],
      ["path", { d: "m12 14 1.535-1.605a5 5 0 0 1 8 1.5", key: "lvuxfi" }],
      ["path", { d: "M22 22v-4h-4", key: "1ewp4q" }],
      ["path", { d: "m22 18-1.535 1.605a5 5 0 0 1-8-1.5", key: "14ync0" }]
    ]);
    var FolderTree = createLucideIcon("FolderTree", [
      [
        "path",
        {
          d: "M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
          key: "hod4my"
        }
      ],
      [
        "path",
        {
          d: "M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z",
          key: "w4yl2u"
        }
      ],
      ["path", { d: "M3 5a2 2 0 0 0 2 2h3", key: "f2jnh7" }],
      ["path", { d: "M3 3v13a2 2 0 0 0 2 2h3", key: "k8epm1" }]
    ]);
    var FolderUp = createLucideIcon("FolderUp", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "M12 10v6", key: "1bos4e" }],
      ["path", { d: "m9 13 3-3 3 3", key: "1pxg3c" }]
    ]);
    var FolderX = createLucideIcon("FolderX", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ],
      ["path", { d: "m9.5 10.5 5 5", key: "ra9qjz" }],
      ["path", { d: "m14.5 10.5-5 5", key: "l2rkpq" }]
    ]);
    var Folder = createLucideIcon("Folder", [
      [
        "path",
        {
          d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
          key: "1kt360"
        }
      ]
    ]);
    var Folders = createLucideIcon("Folders", [
      [
        "path",
        {
          d: "M20 17a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.9a2 2 0 0 1-1.69-.9l-.81-1.2a2 2 0 0 0-1.67-.9H8a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2Z",
          key: "4u7rpt"
        }
      ],
      ["path", { d: "M2 8v11a2 2 0 0 0 2 2h14", key: "1eicx1" }]
    ]);
    var Footprints = createLucideIcon("Footprints", [
      [
        "path",
        {
          d: "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z",
          key: "1dudjm"
        }
      ],
      [
        "path",
        {
          d: "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z",
          key: "l2t8xc"
        }
      ],
      ["path", { d: "M16 17h4", key: "1dejxt" }],
      ["path", { d: "M4 13h4", key: "1bwh8b" }]
    ]);
    var Forklift = createLucideIcon("Forklift", [
      ["path", { d: "M12 12H5a2 2 0 0 0-2 2v5", key: "7zsz91" }],
      ["circle", { cx: "13", cy: "19", r: "2", key: "wjnkru" }],
      ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
      ["path", { d: "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5", key: "13bk1p" }]
    ]);
    var Forward = createLucideIcon("Forward", [
      ["polyline", { points: "15 17 20 12 15 7", key: "1w3sku" }],
      ["path", { d: "M4 18v-2a4 4 0 0 1 4-4h12", key: "jmiej9" }]
    ]);
    var Frame = createLucideIcon("Frame", [
      ["line", { x1: "22", x2: "2", y1: "6", y2: "6", key: "15w7dq" }],
      ["line", { x1: "22", x2: "2", y1: "18", y2: "18", key: "1ip48p" }],
      ["line", { x1: "6", x2: "6", y1: "2", y2: "22", key: "a2lnyx" }],
      ["line", { x1: "18", x2: "18", y1: "2", y2: "22", key: "8vb6jd" }]
    ]);
    var Framer = createLucideIcon("Framer", [
      ["path", { d: "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7", key: "1a2nng" }]
    ]);
    var Frown = createLucideIcon("Frown", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M16 16s-1.5-2-4-2-4 2-4 2", key: "epbg0q" }],
      ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
      ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
    ]);
    var Fuel = createLucideIcon("Fuel", [
      ["line", { x1: "3", x2: "15", y1: "22", y2: "22", key: "xegly4" }],
      ["line", { x1: "4", x2: "14", y1: "9", y2: "9", key: "xcnuvu" }],
      ["path", { d: "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18", key: "16j0yd" }],
      [
        "path",
        {
          d: "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5",
          key: "7cu91f"
        }
      ]
    ]);
    var Fullscreen = createLucideIcon("Fullscreen", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["rect", { width: "10", height: "8", x: "7", y: "8", rx: "1", key: "vys8me" }]
    ]);
    var GalleryHorizontalEnd = createLucideIcon("GalleryHorizontalEnd", [
      ["path", { d: "M2 7v10", key: "a2pl2d" }],
      ["path", { d: "M6 5v14", key: "1kq3d7" }],
      ["rect", { width: "12", height: "18", x: "10", y: "3", rx: "2", key: "13i7bc" }]
    ]);
    var GalleryHorizontal = createLucideIcon("GalleryHorizontal", [
      ["path", { d: "M2 3v18", key: "pzttux" }],
      ["rect", { width: "12", height: "18", x: "6", y: "3", rx: "2", key: "btr8bg" }],
      ["path", { d: "M22 3v18", key: "6jf3v" }]
    ]);
    var GalleryThumbnails = createLucideIcon("GalleryThumbnails", [
      ["rect", { width: "18", height: "14", x: "3", y: "3", rx: "2", key: "74y24f" }],
      ["path", { d: "M4 21h1", key: "16zlid" }],
      ["path", { d: "M9 21h1", key: "15o7lz" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }],
      ["path", { d: "M19 21h1", key: "edywat" }]
    ]);
    var GalleryVerticalEnd = createLucideIcon("GalleryVerticalEnd", [
      ["path", { d: "M7 2h10", key: "nczekb" }],
      ["path", { d: "M5 6h14", key: "u2x4p" }],
      ["rect", { width: "18", height: "12", x: "3", y: "10", rx: "2", key: "l0tzu3" }]
    ]);
    var GalleryVertical = createLucideIcon("GalleryVertical", [
      ["path", { d: "M3 2h18", key: "15qxfx" }],
      ["rect", { width: "18", height: "12", x: "3", y: "6", rx: "2", key: "1439r6" }],
      ["path", { d: "M3 22h18", key: "8prr45" }]
    ]);
    var Gamepad2 = createLucideIcon("Gamepad2", [
      ["line", { x1: "6", x2: "10", y1: "11", y2: "11", key: "1gktln" }],
      ["line", { x1: "8", x2: "8", y1: "9", y2: "13", key: "qnk9ow" }],
      ["line", { x1: "15", x2: "15.01", y1: "12", y2: "12", key: "krot7o" }],
      ["line", { x1: "18", x2: "18.01", y1: "10", y2: "10", key: "1lcuu1" }],
      [
        "path",
        {
          d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
          key: "mfqc10"
        }
      ]
    ]);
    var Gamepad = createLucideIcon("Gamepad", [
      ["line", { x1: "6", x2: "10", y1: "12", y2: "12", key: "161bw2" }],
      ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
      ["line", { x1: "15", x2: "15.01", y1: "13", y2: "13", key: "dqpgro" }],
      ["line", { x1: "18", x2: "18.01", y1: "11", y2: "11", key: "meh2c" }],
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
    ]);
    var Gauge = createLucideIcon("Gauge", [
      ["path", { d: "m12 14 4-4", key: "9kzdfg" }],
      ["path", { d: "M3.34 19a10 10 0 1 1 17.32 0", key: "19p75a" }]
    ]);
    var Gavel = createLucideIcon("Gavel", [
      ["path", { d: "m14.5 12.5-8 8a2.119 2.119 0 1 1-3-3l8-8", key: "15492f" }],
      ["path", { d: "m16 16 6-6", key: "vzrcl6" }],
      ["path", { d: "m8 8 6-6", key: "18bi4p" }],
      ["path", { d: "m9 7 8 8", key: "5jnvq1" }],
      ["path", { d: "m21 11-8-8", key: "z4y7zo" }]
    ]);
    var Gem = createLucideIcon("Gem", [
      ["path", { d: "M6 3h12l4 6-10 13L2 9Z", key: "1pcd5k" }],
      ["path", { d: "M11 3 8 9l4 13 4-13-3-6", key: "1fcu3u" }],
      ["path", { d: "M2 9h20", key: "16fsjt" }]
    ]);
    var Ghost = createLucideIcon("Ghost", [
      ["path", { d: "M9 10h.01", key: "qbtxuw" }],
      ["path", { d: "M15 10h.01", key: "1qmjsl" }],
      [
        "path",
        {
          d: "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z",
          key: "uwwb07"
        }
      ]
    ]);
    var Gift = createLucideIcon("Gift", [
      ["rect", { x: "3", y: "8", width: "18", height: "4", rx: "1", key: "bkv52" }],
      ["path", { d: "M12 8v13", key: "1c76mn" }],
      ["path", { d: "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7", key: "6wjy6b" }],
      [
        "path",
        {
          d: "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5",
          key: "1ihvrl"
        }
      ]
    ]);
    var GitBranchPlus = createLucideIcon("GitBranchPlus", [
      ["path", { d: "M6 3v12", key: "qpgusn" }],
      ["path", { d: "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "1d02ji" }],
      ["path", { d: "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z", key: "chk6ph" }],
      ["path", { d: "M15 6a9 9 0 0 0-9 9", key: "or332x" }],
      ["path", { d: "M18 15v6", key: "9wciyi" }],
      ["path", { d: "M21 18h-6", key: "139f0c" }]
    ]);
    var GitBranch = createLucideIcon("GitBranch", [
      ["line", { x1: "6", x2: "6", y1: "3", y2: "15", key: "17qcm7" }],
      ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
      ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
      ["path", { d: "M18 9a9 9 0 0 1-9 9", key: "n2h4wq" }]
    ]);
    var GitCommitHorizontal = createLucideIcon("GitCommitHorizontal", [
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["line", { x1: "3", x2: "9", y1: "12", y2: "12", key: "1dyftd" }],
      ["line", { x1: "15", x2: "21", y1: "12", y2: "12", key: "oup4p8" }]
    ]);
    var GitCommitVertical = createLucideIcon("GitCommitVertical", [
      ["path", { d: "M12 3v6", key: "1holv5" }],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["path", { d: "M12 15v6", key: "a9ows0" }]
    ]);
    var GitCompareArrows = createLucideIcon("GitCompareArrows", [
      ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
      ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }],
      ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
      ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
      ["path", { d: "M12 18H7a2 2 0 0 1-2-2V9", key: "16sdep" }],
      ["path", { d: "m9 15 3 3-3 3", key: "1m3kbl" }]
    ]);
    var GitCompare = createLucideIcon("GitCompare", [
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
      ["path", { d: "M11 18H8a2 2 0 0 1-2-2V9", key: "19pyzm" }]
    ]);
    var GitFork = createLucideIcon("GitFork", [
      ["circle", { cx: "12", cy: "18", r: "3", key: "1mpf1b" }],
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }],
      ["path", { d: "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9", key: "1uq4wg" }],
      ["path", { d: "M12 12v3", key: "158kv8" }]
    ]);
    var GitGraph = createLucideIcon("GitGraph", [
      ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
      ["path", { d: "M5 9v6", key: "158jrl" }],
      ["circle", { cx: "5", cy: "18", r: "3", key: "104gr9" }],
      ["path", { d: "M12 3v18", key: "108xh3" }],
      ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
      ["path", { d: "M16 15.7A9 9 0 0 0 19 9", key: "1e3vqb" }]
    ]);
    var GitMerge = createLucideIcon("GitMerge", [
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M6 21V9a9 9 0 0 0 9 9", key: "7kw0sc" }]
    ]);
    var GitPullRequestArrow = createLucideIcon("GitPullRequestArrow", [
      ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
      ["path", { d: "M5 9v12", key: "ih889a" }],
      ["circle", { cx: "19", cy: "18", r: "3", key: "1qljk2" }],
      ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
      ["path", { d: "M12 6h5a2 2 0 0 1 2 2v7", key: "1yj91y" }]
    ]);
    var GitPullRequestClosed = createLucideIcon("GitPullRequestClosed", [
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M6 9v12", key: "1sc30k" }],
      ["path", { d: "m21 3-6 6", key: "16nqsk" }],
      ["path", { d: "m21 9-6-6", key: "9j17rh" }],
      ["path", { d: "M18 11.5V15", key: "65xf6f" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }]
    ]);
    var GitPullRequestCreateArrow = createLucideIcon("GitPullRequestCreateArrow", [
      ["circle", { cx: "5", cy: "6", r: "3", key: "1qnov2" }],
      ["path", { d: "M5 9v12", key: "ih889a" }],
      ["path", { d: "m15 9-3-3 3-3", key: "1lwv8l" }],
      ["path", { d: "M12 6h5a2 2 0 0 1 2 2v3", key: "1rbwk6" }],
      ["path", { d: "M19 15v6", key: "10aioa" }],
      ["path", { d: "M22 18h-6", key: "1d5gi5" }]
    ]);
    var GitPullRequestCreate = createLucideIcon("GitPullRequestCreate", [
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M6 9v12", key: "1sc30k" }],
      ["path", { d: "M13 6h3a2 2 0 0 1 2 2v3", key: "1jb6z3" }],
      ["path", { d: "M18 15v6", key: "9wciyi" }],
      ["path", { d: "M21 18h-6", key: "139f0c" }]
    ]);
    var GitPullRequestDraft = createLucideIcon("GitPullRequestDraft", [
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M18 6V5", key: "1oao2s" }],
      ["path", { d: "M18 11v-1", key: "11c8tz" }],
      ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
    ]);
    var GitPullRequest = createLucideIcon("GitPullRequest", [
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M13 6h3a2 2 0 0 1 2 2v7", key: "1yeb86" }],
      ["line", { x1: "6", x2: "6", y1: "9", y2: "21", key: "rroup" }]
    ]);
    var Github = createLucideIcon("Github", [
      [
        "path",
        {
          d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4",
          key: "tonef"
        }
      ],
      ["path", { d: "M9 18c-4.51 2-5-2-7-2", key: "9comsn" }]
    ]);
    var Gitlab = createLucideIcon("Gitlab", [
      [
        "path",
        {
          d: "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z",
          key: "148pdi"
        }
      ]
    ]);
    var GlassWater = createLucideIcon("GlassWater", [
      [
        "path",
        {
          d: "M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z",
          key: "p55z4y"
        }
      ],
      ["path", { d: "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0", key: "mjntcy" }]
    ]);
    var Glasses = createLucideIcon("Glasses", [
      ["circle", { cx: "6", cy: "15", r: "4", key: "vux9w4" }],
      ["circle", { cx: "18", cy: "15", r: "4", key: "18o8ve" }],
      ["path", { d: "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2", key: "1ag4bs" }],
      ["path", { d: "M2.5 13 5 7c.7-1.3 1.4-2 3-2", key: "1hm1gs" }],
      ["path", { d: "M21.5 13 19 7c-.7-1.3-1.5-2-3-2", key: "1r31ai" }]
    ]);
    var GlobeLock = createLucideIcon("GlobeLock", [
      [
        "path",
        {
          d: "M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13",
          key: "qkt0x6"
        }
      ],
      ["path", { d: "M2 12h8.5", key: "ovaggd" }],
      ["path", { d: "M20 6V4a2 2 0 1 0-4 0v2", key: "1of5e8" }],
      ["rect", { width: "8", height: "5", x: "14", y: "6", rx: "1", key: "1fmf51" }]
    ]);
    var Globe = createLucideIcon("Globe", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20", key: "13o1zl" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }]
    ]);
    var Goal = createLucideIcon("Goal", [
      ["path", { d: "M12 13V2l8 4-8 4", key: "5wlwwj" }],
      ["path", { d: "M20.561 10.222a9 9 0 1 1-12.55-5.29", key: "1c0wjv" }],
      ["path", { d: "M8.002 9.997a5 5 0 1 0 8.9 2.02", key: "gb1g7m" }]
    ]);
    var Grab = createLucideIcon("Grab", [
      ["path", { d: "M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4", key: "edstyy" }],
      ["path", { d: "M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2", key: "19wdwo" }],
      ["path", { d: "M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5", key: "1lugqo" }],
      ["path", { d: "M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1hbeus" }],
      [
        "path",
        { d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0", key: "1etffm" }
      ]
    ]);
    var GraduationCap = createLucideIcon("GraduationCap", [
      [
        "path",
        {
          d: "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z",
          key: "j76jl0"
        }
      ],
      ["path", { d: "M22 10v6", key: "1lu8f3" }],
      ["path", { d: "M6 12.5V16a6 3 0 0 0 12 0v-3.5", key: "1r8lef" }]
    ]);
    var Grape = createLucideIcon("Grape", [
      ["path", { d: "M22 5V2l-5.89 5.89", key: "1eenpo" }],
      ["circle", { cx: "16.6", cy: "15.89", r: "3", key: "xjtalx" }],
      ["circle", { cx: "8.11", cy: "7.4", r: "3", key: "u2fv6i" }],
      ["circle", { cx: "12.35", cy: "11.65", r: "3", key: "i6i8g7" }],
      ["circle", { cx: "13.91", cy: "5.85", r: "3", key: "6ye0dv" }],
      ["circle", { cx: "18.15", cy: "10.09", r: "3", key: "snx9no" }],
      ["circle", { cx: "6.56", cy: "13.2", r: "3", key: "17x4xg" }],
      ["circle", { cx: "10.8", cy: "17.44", r: "3", key: "1hogw9" }],
      ["circle", { cx: "5", cy: "19", r: "3", key: "1sn6vo" }]
    ]);
    var Grid2x2Check = createLucideIcon("Grid2x2Check", [
      [
        "path",
        {
          d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
          key: "11za1p"
        }
      ],
      ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
    ]);
    var Grid2x2Plus = createLucideIcon("Grid2x2Plus", [
      [
        "path",
        {
          d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
          key: "11za1p"
        }
      ],
      ["path", { d: "M16 19h6", key: "xwg31i" }],
      ["path", { d: "M19 22v-6", key: "qhmiwi" }]
    ]);
    var Grid2x2X = createLucideIcon("Grid2x2X", [
      [
        "path",
        {
          d: "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3",
          key: "11za1p"
        }
      ],
      ["path", { d: "m16 16 5 5", key: "8tpb07" }],
      ["path", { d: "m16 21 5-5", key: "193jll" }]
    ]);
    var Grid2x2 = createLucideIcon("Grid2x2", [
      ["path", { d: "M12 3v18", key: "108xh3" }],
      ["path", { d: "M3 12h18", key: "1i2n21" }],
      ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
    ]);
    var Grid3x3 = createLucideIcon("Grid3x3", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }]
    ]);
    var GripHorizontal = createLucideIcon("GripHorizontal", [
      ["circle", { cx: "12", cy: "9", r: "1", key: "124mty" }],
      ["circle", { cx: "19", cy: "9", r: "1", key: "1ruzo2" }],
      ["circle", { cx: "5", cy: "9", r: "1", key: "1a8b28" }],
      ["circle", { cx: "12", cy: "15", r: "1", key: "1e56xg" }],
      ["circle", { cx: "19", cy: "15", r: "1", key: "1a92ep" }],
      ["circle", { cx: "5", cy: "15", r: "1", key: "5r1jwy" }]
    ]);
    var GripVertical = createLucideIcon("GripVertical", [
      ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
      ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
      ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
      ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
      ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
      ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
    ]);
    var Grip = createLucideIcon("Grip", [
      ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
      ["circle", { cx: "19", cy: "5", r: "1", key: "w8mnmm" }],
      ["circle", { cx: "5", cy: "5", r: "1", key: "lttvr7" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      ["circle", { cx: "19", cy: "12", r: "1", key: "1wjl8i" }],
      ["circle", { cx: "5", cy: "12", r: "1", key: "1pcz8c" }],
      ["circle", { cx: "12", cy: "19", r: "1", key: "lyex9k" }],
      ["circle", { cx: "19", cy: "19", r: "1", key: "shf9b7" }],
      ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
    ]);
    var Group = createLucideIcon("Group", [
      ["path", { d: "M3 7V5c0-1.1.9-2 2-2h2", key: "adw53z" }],
      ["path", { d: "M17 3h2c1.1 0 2 .9 2 2v2", key: "an4l38" }],
      ["path", { d: "M21 17v2c0 1.1-.9 2-2 2h-2", key: "144t0e" }],
      ["path", { d: "M7 21H5c-1.1 0-2-.9-2-2v-2", key: "rtnfgi" }],
      ["rect", { width: "7", height: "5", x: "7", y: "7", rx: "1", key: "1eyiv7" }],
      ["rect", { width: "7", height: "5", x: "10", y: "12", rx: "1", key: "1qlmkx" }]
    ]);
    var Guitar = createLucideIcon("Guitar", [
      ["path", { d: "m11.9 12.1 4.514-4.514", key: "109xqo" }],
      [
        "path",
        {
          d: "M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z",
          key: "txyc8t"
        }
      ],
      ["path", { d: "m6 16 2 2", key: "16qmzd" }],
      [
        "path",
        {
          d: "M8.2 9.9C8.7 8.8 9.8 8 11 8c2.8 0 5 2.2 5 5 0 1.2-.8 2.3-1.9 2.8l-.9.4A2 2 0 0 0 12 18a4 4 0 0 1-4 4c-3.3 0-6-2.7-6-6a4 4 0 0 1 4-4 2 2 0 0 0 1.8-1.2z",
          key: "1u8q3z"
        }
      ],
      ["circle", { cx: "11.5", cy: "12.5", r: ".5", fill: "currentColor", key: "16onso" }]
    ]);
    var Ham = createLucideIcon("Ham", [
      ["path", { d: "M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856", key: "1k1t7q" }],
      [
        "path",
        {
          d: "M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288",
          key: "153t1g"
        }
      ],
      [
        "path",
        {
          d: "M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025",
          key: "gzrt0n"
        }
      ],
      ["path", { d: "m8.5 16.5-1-1", key: "otr954" }]
    ]);
    var Hammer = createLucideIcon("Hammer", [
      ["path", { d: "m15 12-8.373 8.373a1 1 0 1 1-3-3L12 9", key: "eefl8a" }],
      ["path", { d: "m18 15 4-4", key: "16gjal" }],
      [
        "path",
        {
          d: "m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172V7l-2.26-2.26a6 6 0 0 0-4.202-1.756L9 2.96l.92.82A6.18 6.18 0 0 1 12 8.4V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5",
          key: "b7pghm"
        }
      ]
    ]);
    var HandCoins = createLucideIcon("HandCoins", [
      ["path", { d: "M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17", key: "geh8rc" }],
      [
        "path",
        {
          d: "m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
          key: "1fto5m"
        }
      ],
      ["path", { d: "m2 16 6 6", key: "1pfhp9" }],
      ["circle", { cx: "16", cy: "9", r: "2.9", key: "1n0dlu" }],
      ["circle", { cx: "6", cy: "5", r: "3", key: "151irh" }]
    ]);
    var HandHeart = createLucideIcon("HandHeart", [
      ["path", { d: "M11 14h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16", key: "1ifwr1" }],
      [
        "path",
        {
          d: "m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
          key: "17abbs"
        }
      ],
      ["path", { d: "m2 15 6 6", key: "10dquu" }],
      [
        "path",
        {
          d: "M19.5 8.5c.7-.7 1.5-1.6 1.5-2.7A2.73 2.73 0 0 0 16 4a2.78 2.78 0 0 0-5 1.8c0 1.2.8 2 1.5 2.8L16 12Z",
          key: "1h3036"
        }
      ]
    ]);
    var HandHelping = createLucideIcon("HandHelping", [
      ["path", { d: "M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14", key: "1j4xps" }],
      [
        "path",
        {
          d: "m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9",
          key: "uospg8"
        }
      ],
      ["path", { d: "m2 13 6 6", key: "16e5sb" }]
    ]);
    var HandMetal = createLucideIcon("HandMetal", [
      ["path", { d: "M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4", key: "wc6myp" }],
      ["path", { d: "M14 11V9a2 2 0 1 0-4 0v2", key: "94qvcw" }],
      ["path", { d: "M10 10.5V5a2 2 0 1 0-4 0v9", key: "m1ah89" }],
      [
        "path",
        {
          d: "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5",
          key: "t1skq1"
        }
      ]
    ]);
    var HandPlatter = createLucideIcon("HandPlatter", [
      ["path", { d: "M12 3V2", key: "ar7q03" }],
      [
        "path",
        {
          d: "m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5",
          key: "n2g93r"
        }
      ],
      ["path", { d: "M2 14h12a2 2 0 0 1 0 4h-2", key: "1o2jem" }],
      ["path", { d: "M4 10h16", key: "img6z1" }],
      ["path", { d: "M5 10a7 7 0 0 1 14 0", key: "1ega1o" }],
      ["path", { d: "M5 14v6a1 1 0 0 1-1 1H2", key: "1hescx" }]
    ]);
    var Hand = createLucideIcon("Hand", [
      ["path", { d: "M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1fvzgz" }],
      ["path", { d: "M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2", key: "1kc0my" }],
      ["path", { d: "M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8", key: "10h0bg" }],
      [
        "path",
        {
          d: "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
          key: "1s1gnw"
        }
      ]
    ]);
    var Handshake = createLucideIcon("Handshake", [
      ["path", { d: "m11 17 2 2a1 1 0 1 0 3-3", key: "efffak" }],
      [
        "path",
        {
          d: "m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4",
          key: "9pr0kb"
        }
      ],
      ["path", { d: "m21 3 1 11h-2", key: "1tisrp" }],
      ["path", { d: "M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3", key: "1uvwmv" }],
      ["path", { d: "M3 4h8", key: "1ep09j" }]
    ]);
    var HardDriveDownload = createLucideIcon("HardDriveDownload", [
      ["path", { d: "M12 2v8", key: "1q4o3n" }],
      ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
      ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "M10 18h.01", key: "h775k" }]
    ]);
    var HardDriveUpload = createLucideIcon("HardDriveUpload", [
      ["path", { d: "m16 6-4-4-4 4", key: "13yo43" }],
      ["path", { d: "M12 2v8", key: "1q4o3n" }],
      ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "M10 18h.01", key: "h775k" }]
    ]);
    var HardDrive = createLucideIcon("HardDrive", [
      ["line", { x1: "22", x2: "2", y1: "12", y2: "12", key: "1y58io" }],
      [
        "path",
        {
          d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
          key: "oot6mr"
        }
      ],
      ["line", { x1: "6", x2: "6.01", y1: "16", y2: "16", key: "sgf278" }],
      ["line", { x1: "10", x2: "10.01", y1: "16", y2: "16", key: "1l4acy" }]
    ]);
    var HardHat = createLucideIcon("HardHat", [
      ["path", { d: "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5", key: "1p9q5i" }],
      ["path", { d: "M14 6a6 6 0 0 1 6 6v3", key: "1hnv84" }],
      ["path", { d: "M4 15v-3a6 6 0 0 1 6-6", key: "9ciidu" }],
      ["rect", { x: "2", y: "15", width: "20", height: "4", rx: "1", key: "g3x8cw" }]
    ]);
    var Hash = createLucideIcon("Hash", [
      ["line", { x1: "4", x2: "20", y1: "9", y2: "9", key: "4lhtct" }],
      ["line", { x1: "4", x2: "20", y1: "15", y2: "15", key: "vyu0kd" }],
      ["line", { x1: "10", x2: "8", y1: "3", y2: "21", key: "1ggp8o" }],
      ["line", { x1: "16", x2: "14", y1: "3", y2: "21", key: "weycgp" }]
    ]);
    var Haze = createLucideIcon("Haze", [
      ["path", { d: "m5.2 6.2 1.4 1.4", key: "17imol" }],
      ["path", { d: "M2 13h2", key: "13gyu8" }],
      ["path", { d: "M20 13h2", key: "16rner" }],
      ["path", { d: "m17.4 7.6 1.4-1.4", key: "t4xlah" }],
      ["path", { d: "M22 17H2", key: "1gtaj3" }],
      ["path", { d: "M22 21H2", key: "1gy6en" }],
      ["path", { d: "M16 13a4 4 0 0 0-8 0", key: "1dyczq" }],
      ["path", { d: "M12 5V2.5", key: "1vytko" }]
    ]);
    var HdmiPort = createLucideIcon("HdmiPort", [
      [
        "path",
        {
          d: "M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z",
          key: "2128wb"
        }
      ],
      ["path", { d: "M7.5 12h9", key: "1t0ckc" }]
    ]);
    var Heading1 = createLucideIcon("Heading1", [
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["path", { d: "m17 12 3-2v8", key: "1hhhft" }]
    ]);
    var Heading2 = createLucideIcon("Heading2", [
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["path", { d: "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1", key: "9jr5yi" }]
    ]);
    var Heading3 = createLucideIcon("Heading3", [
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["path", { d: "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2", key: "68ncm8" }],
      ["path", { d: "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2", key: "1ejuhz" }]
    ]);
    var Heading4 = createLucideIcon("Heading4", [
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["path", { d: "M17 10v3a1 1 0 0 0 1 1h3", key: "tj5zdr" }],
      ["path", { d: "M21 10v8", key: "1kdml4" }],
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }]
    ]);
    var Heading5 = createLucideIcon("Heading5", [
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["path", { d: "M17 13v-3h4", key: "1nvgqp" }],
      [
        "path",
        { d: "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17", key: "2nebdn" }
      ]
    ]);
    var Heading6 = createLucideIcon("Heading6", [
      ["path", { d: "M4 12h8", key: "17cfdx" }],
      ["path", { d: "M4 18V6", key: "1rz3zl" }],
      ["path", { d: "M12 18V6", key: "zqpxq5" }],
      ["circle", { cx: "19", cy: "16", r: "2", key: "15mx69" }],
      ["path", { d: "M20 10c-2 2-3 3.5-3 6", key: "f35dl0" }]
    ]);
    var Heading = createLucideIcon("Heading", [
      ["path", { d: "M6 12h12", key: "8npq4p" }],
      ["path", { d: "M6 20V4", key: "1w1bmo" }],
      ["path", { d: "M18 20V4", key: "o2hl4u" }]
    ]);
    var HeadphoneOff = createLucideIcon("HeadphoneOff", [
      ["path", { d: "M21 14h-1.343", key: "1jdnxi" }],
      ["path", { d: "M9.128 3.47A9 9 0 0 1 21 12v3.343", key: "6kipu2" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3", key: "9x50f4" }],
      [
        "path",
        {
          d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364",
          key: "1bkxnm"
        }
      ]
    ]);
    var Headphones = createLucideIcon("Headphones", [
      [
        "path",
        {
          d: "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3",
          key: "1xhozi"
        }
      ]
    ]);
    var Headset = createLucideIcon("Headset", [
      [
        "path",
        {
          d: "M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z",
          key: "12oyoe"
        }
      ],
      ["path", { d: "M21 16v2a4 4 0 0 1-4 4h-5", key: "1x7m43" }]
    ]);
    var HeartCrack = createLucideIcon("HeartCrack", [
      [
        "path",
        {
          d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
          key: "c3ymky"
        }
      ],
      ["path", { d: "m12 13-1-1 2-2-3-3 2-2", key: "xjdxli" }]
    ]);
    var HeartHandshake = createLucideIcon("HeartHandshake", [
      [
        "path",
        {
          d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
          key: "c3ymky"
        }
      ],
      [
        "path",
        {
          d: "M12 5 9.04 7.96a2.17 2.17 0 0 0 0 3.08c.82.82 2.13.85 3 .07l2.07-1.9a2.82 2.82 0 0 1 3.79 0l2.96 2.66",
          key: "4oyue0"
        }
      ],
      ["path", { d: "m18 15-2-2", key: "60u0ii" }],
      ["path", { d: "m15 18-2-2", key: "6p76be" }]
    ]);
    var HeartOff = createLucideIcon("HeartOff", [
      ["line", { x1: "2", y1: "2", x2: "22", y2: "22", key: "1w4vcy" }],
      [
        "path",
        { d: "M16.5 16.5 12 21l-7-7c-1.5-1.45-3-3.2-3-5.5a5.5 5.5 0 0 1 2.14-4.35", key: "3mpagl" }
      ],
      [
        "path",
        {
          d: "M8.76 3.1c1.15.22 2.13.78 3.24 1.9 1.5-1.5 2.74-2 4.5-2A5.5 5.5 0 0 1 22 8.5c0 2.12-1.3 3.78-2.67 5.17",
          key: "1gh3v3"
        }
      ]
    ]);
    var HeartPulse = createLucideIcon("HeartPulse", [
      [
        "path",
        {
          d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
          key: "c3ymky"
        }
      ],
      ["path", { d: "M3.22 12H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27", key: "1uw2ng" }]
    ]);
    var Heart = createLucideIcon("Heart", [
      [
        "path",
        {
          d: "M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z",
          key: "c3ymky"
        }
      ]
    ]);
    var Heater = createLucideIcon("Heater", [
      ["path", { d: "M11 8c2-3-2-3 0-6", key: "1ldv5m" }],
      ["path", { d: "M15.5 8c2-3-2-3 0-6", key: "1otqoz" }],
      ["path", { d: "M6 10h.01", key: "1lbq93" }],
      ["path", { d: "M6 14h.01", key: "zudwn7" }],
      ["path", { d: "M10 16v-4", key: "1c25yv" }],
      ["path", { d: "M14 16v-4", key: "1dkbt8" }],
      ["path", { d: "M18 16v-4", key: "1yg9me" }],
      [
        "path",
        { d: "M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3", key: "1ubg90" }
      ],
      ["path", { d: "M5 20v2", key: "1abpe8" }],
      ["path", { d: "M19 20v2", key: "kqn6ft" }]
    ]);
    var Hexagon = createLucideIcon("Hexagon", [
      [
        "path",
        {
          d: "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z",
          key: "yt0hxn"
        }
      ]
    ]);
    var Highlighter = createLucideIcon("Highlighter", [
      ["path", { d: "m9 11-6 6v3h9l3-3", key: "1a3l36" }],
      ["path", { d: "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4", key: "14a9rk" }]
    ]);
    var History = createLucideIcon("History", [
      ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
      ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
      ["path", { d: "M12 7v5l4 2", key: "1fdv2h" }]
    ]);
    var HopOff = createLucideIcon("HopOff", [
      ["path", { d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27", key: "qyzcap" }],
      [
        "path",
        {
          d: "M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28",
          key: "y078lb"
        }
      ],
      ["path", { d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26", key: "1utre3" }],
      [
        "path",
        {
          d: "M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25",
          key: "17o9hm"
        }
      ],
      ["path", { d: "M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75", key: "1d1n4p" }],
      [
        "path",
        {
          d: "M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24",
          key: "9uv3tt"
        }
      ],
      [
        "path",
        {
          d: "M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28",
          key: "1292wz"
        }
      ],
      [
        "path",
        {
          d: "M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05",
          key: "7ozu9p"
        }
      ],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Hop = createLucideIcon("Hop", [
      [
        "path",
        {
          d: "M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18",
          key: "18lxf1"
        }
      ],
      [
        "path",
        {
          d: "M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88",
          key: "vtfxrw"
        }
      ],
      [
        "path",
        {
          d: "M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36",
          key: "13hl71"
        }
      ],
      [
        "path",
        {
          d: "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87",
          key: "1sl8oj"
        }
      ],
      [
        "path",
        {
          d: "M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08",
          key: "19c6kt"
        }
      ],
      [
        "path",
        {
          d: "M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57",
          key: "85ghs3"
        }
      ],
      ["path", { d: "M4.93 4.93 3 3a.7.7 0 0 1 0-1", key: "x087yj" }],
      [
        "path",
        {
          d: "M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15",
          key: "11xdqo"
        }
      ]
    ]);
    var Hospital = createLucideIcon("Hospital", [
      ["path", { d: "M12 6v4", key: "16clxf" }],
      ["path", { d: "M14 14h-4", key: "esezmu" }],
      ["path", { d: "M14 18h-4", key: "16mqa2" }],
      ["path", { d: "M14 8h-4", key: "z8ypaz" }],
      [
        "path",
        {
          d: "M18 12h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2",
          key: "b1k337"
        }
      ],
      ["path", { d: "M18 22V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v18", key: "16g51d" }]
    ]);
    var Hotel = createLucideIcon("Hotel", [
      ["path", { d: "M10 22v-6.57", key: "1wmca3" }],
      ["path", { d: "M12 11h.01", key: "z322tv" }],
      ["path", { d: "M12 7h.01", key: "1ivr5q" }],
      ["path", { d: "M14 15.43V22", key: "1q2vjd" }],
      ["path", { d: "M15 16a5 5 0 0 0-6 0", key: "o9wqvi" }],
      ["path", { d: "M16 11h.01", key: "xkw8gn" }],
      ["path", { d: "M16 7h.01", key: "1kdx03" }],
      ["path", { d: "M8 11h.01", key: "1dfujw" }],
      ["path", { d: "M8 7h.01", key: "1vti4s" }],
      ["rect", { x: "4", y: "2", width: "16", height: "20", rx: "2", key: "1uxh74" }]
    ]);
    var Hourglass = createLucideIcon("Hourglass", [
      ["path", { d: "M5 22h14", key: "ehvnwv" }],
      ["path", { d: "M5 2h14", key: "pdyrp9" }],
      [
        "path",
        {
          d: "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22",
          key: "1d314k"
        }
      ],
      [
        "path",
        { d: "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2", key: "1vvvr6" }
      ]
    ]);
    var HousePlug = createLucideIcon("HousePlug", [
      ["path", { d: "M10 12V8.964", key: "1vll13" }],
      ["path", { d: "M14 12V8.964", key: "1x3qvg" }],
      [
        "path",
        { d: "M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z", key: "ppykja" }
      ],
      [
        "path",
        {
          d: "M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2",
          key: "1gvg2z"
        }
      ]
    ]);
    var HousePlus = createLucideIcon("HousePlus", [
      [
        "path",
        {
          d: "M13.22 2.416a2 2 0 0 0-2.511.057l-7 5.999A2 2 0 0 0 3 10v9a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7.354",
          key: "5phn05"
        }
      ],
      ["path", { d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8", key: "5wwlr5" }],
      ["path", { d: "M15 6h6", key: "1jlkvy" }],
      ["path", { d: "M18 3v6", key: "x1uolp" }]
    ]);
    var House = createLucideIcon("House", [
      ["path", { d: "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8", key: "5wwlr5" }],
      [
        "path",
        {
          d: "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z",
          key: "1d0kgt"
        }
      ]
    ]);
    var IceCreamBowl = createLucideIcon("IceCreamBowl", [
      [
        "path",
        {
          d: "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0",
          key: "1uxfcu"
        }
      ],
      ["path", { d: "M12.14 11a3.5 3.5 0 1 1 6.71 0", key: "4k3m1s" }],
      ["path", { d: "M15.5 6.5a3.5 3.5 0 1 0-7 0", key: "zmuahr" }]
    ]);
    var IceCreamCone = createLucideIcon("IceCreamCone", [
      ["path", { d: "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11", key: "1v6356" }],
      ["path", { d: "M17 7A5 5 0 0 0 7 7", key: "151p3v" }],
      ["path", { d: "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4", key: "1sdaij" }]
    ]);
    var IdCard = createLucideIcon("IdCard", [
      ["path", { d: "M16 10h2", key: "8sgtl7" }],
      ["path", { d: "M16 14h2", key: "epxaof" }],
      ["path", { d: "M6.17 15a3 3 0 0 1 5.66 0", key: "n6f512" }],
      ["circle", { cx: "9", cy: "11", r: "2", key: "yxgjnd" }],
      ["rect", { x: "2", y: "5", width: "20", height: "14", rx: "2", key: "qneu4z" }]
    ]);
    var ImageDown = createLucideIcon("ImageDown", [
      [
        "path",
        {
          d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21",
          key: "9csbqa"
        }
      ],
      ["path", { d: "m14 19 3 3v-5.5", key: "9ldu5r" }],
      ["path", { d: "m17 22 3-3", key: "1nkfve" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
    ]);
    var ImageMinus = createLucideIcon("ImageMinus", [
      ["path", { d: "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "m87ecr" }],
      ["line", { x1: "16", x2: "22", y1: "5", y2: "5", key: "ez7e4s" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
      ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
    ]);
    var ImageOff = createLucideIcon("ImageOff", [
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
      ["path", { d: "M10.41 10.41a2 2 0 1 1-2.83-2.83", key: "1bzlo9" }],
      ["line", { x1: "13.5", x2: "6", y1: "13.5", y2: "21", key: "1q0aeu" }],
      ["line", { x1: "18", x2: "21", y1: "12", y2: "15", key: "5mozeu" }],
      [
        "path",
        {
          d: "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59",
          key: "mmje98"
        }
      ],
      ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }]
    ]);
    var ImagePlay = createLucideIcon("ImagePlay", [
      ["path", { d: "m11 16-5 5", key: "j5f7ct" }],
      ["path", { d: "M11 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6.5", key: "7s81lt" }],
      [
        "path",
        {
          d: "M15.765 22a.5.5 0 0 1-.765-.424V13.38a.5.5 0 0 1 .765-.424l5.878 3.674a1 1 0 0 1 0 1.696z",
          key: "1omb6s"
        }
      ],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
    ]);
    var ImagePlus = createLucideIcon("ImagePlus", [
      ["path", { d: "M16 5h6", key: "1vod17" }],
      ["path", { d: "M19 2v6", key: "4bpg5p" }],
      ["path", { d: "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5", key: "1ue2ih" }],
      ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
    ]);
    var ImageUp = createLucideIcon("ImageUp", [
      [
        "path",
        {
          d: "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21",
          key: "9csbqa"
        }
      ],
      ["path", { d: "m14 19.5 3-3 3 3", key: "9vmjn0" }],
      ["path", { d: "M17 22v-5.5", key: "1aa6fl" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }]
    ]);
    var ImageUpscale = createLucideIcon("ImageUpscale", [
      ["path", { d: "M16 3h5v5", key: "1806ms" }],
      ["path", { d: "M17 21h2a2 2 0 0 0 2-2", key: "130fy9" }],
      ["path", { d: "M21 12v3", key: "1wzk3p" }],
      ["path", { d: "m21 3-5 5", key: "1g5oa7" }],
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2", key: "kk3yz1" }],
      ["path", { d: "m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19", key: "fyekpt" }],
      ["path", { d: "M9 3h3", key: "d52fa" }],
      ["rect", { x: "3", y: "11", width: "10", height: "10", rx: "1", key: "1wpmix" }]
    ]);
    var Image = createLucideIcon("Image", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["circle", { cx: "9", cy: "9", r: "2", key: "af1f0g" }],
      ["path", { d: "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21", key: "1xmnt7" }]
    ]);
    var Images = createLucideIcon("Images", [
      ["path", { d: "M18 22H4a2 2 0 0 1-2-2V6", key: "pblm9e" }],
      ["path", { d: "m22 13-1.296-1.296a2.41 2.41 0 0 0-3.408 0L11 18", key: "nf6bnh" }],
      ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
      ["rect", { width: "16", height: "16", x: "6", y: "2", rx: "2", key: "12espp" }]
    ]);
    var Import = createLucideIcon("Import", [
      ["path", { d: "M12 3v12", key: "1x0j5s" }],
      ["path", { d: "m8 11 4 4 4-4", key: "1dohi6" }],
      [
        "path",
        {
          d: "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4",
          key: "1ywtjm"
        }
      ]
    ]);
    var Inbox = createLucideIcon("Inbox", [
      ["polyline", { points: "22 12 16 12 14 15 10 15 8 12 2 12", key: "o97t9d" }],
      [
        "path",
        {
          d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
          key: "oot6mr"
        }
      ]
    ]);
    var IndentDecrease = createLucideIcon("IndentDecrease", [
      ["path", { d: "M21 12H11", key: "wd7e0v" }],
      ["path", { d: "M21 18H11", key: "4wu86t" }],
      ["path", { d: "M21 6H11", key: "6dy1d6" }],
      ["path", { d: "m7 8-4 4 4 4", key: "o5hrat" }]
    ]);
    var IndentIncrease = createLucideIcon("IndentIncrease", [
      ["path", { d: "M21 12H11", key: "wd7e0v" }],
      ["path", { d: "M21 18H11", key: "4wu86t" }],
      ["path", { d: "M21 6H11", key: "6dy1d6" }],
      ["path", { d: "m3 8 4 4-4 4", key: "1a3j6y" }]
    ]);
    var IndianRupee = createLucideIcon("IndianRupee", [
      ["path", { d: "M6 3h12", key: "ggurg9" }],
      ["path", { d: "M6 8h12", key: "6g4wlu" }],
      ["path", { d: "m6 13 8.5 8", key: "u1kupk" }],
      ["path", { d: "M6 13h3", key: "wdp6ag" }],
      ["path", { d: "M9 13c6.667 0 6.667-10 0-10", key: "1nkvk2" }]
    ]);
    var Infinity2 = createLucideIcon("Infinity", [
      [
        "path",
        {
          d: "M12 12c-2-2.67-4-4-6-4a4 4 0 1 0 0 8c2 0 4-1.33 6-4Zm0 0c2 2.67 4 4 6 4a4 4 0 0 0 0-8c-2 0-4 1.33-6 4Z",
          key: "1z0uae"
        }
      ]
    ]);
    var Info = createLucideIcon("Info", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M12 16v-4", key: "1dtifu" }],
      ["path", { d: "M12 8h.01", key: "e9boi3" }]
    ]);
    var InspectionPanel = createLucideIcon("InspectionPanel", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 7h.01", key: "7u93v4" }],
      ["path", { d: "M17 7h.01", key: "14a9sn" }],
      ["path", { d: "M7 17h.01", key: "19xn7k" }],
      ["path", { d: "M17 17h.01", key: "1sd3ek" }]
    ]);
    var Instagram = createLucideIcon("Instagram", [
      ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "5", ry: "5", key: "2e1cvw" }],
      ["path", { d: "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z", key: "9exkf1" }],
      ["line", { x1: "17.5", x2: "17.51", y1: "6.5", y2: "6.5", key: "r4j83e" }]
    ]);
    var Italic = createLucideIcon("Italic", [
      ["line", { x1: "19", x2: "10", y1: "4", y2: "4", key: "15jd3p" }],
      ["line", { x1: "14", x2: "5", y1: "20", y2: "20", key: "bu0au3" }],
      ["line", { x1: "15", x2: "9", y1: "4", y2: "20", key: "uljnxc" }]
    ]);
    var IterationCcw = createLucideIcon("IterationCcw", [
      ["path", { d: "M20 10c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8h8", key: "4znkd0" }],
      ["polyline", { points: "16 14 20 18 16 22", key: "11njsm" }]
    ]);
    var IterationCw = createLucideIcon("IterationCw", [
      ["path", { d: "M4 10c0-4.4 3.6-8 8-8s8 3.6 8 8-3.6 8-8 8H4", key: "tuf4su" }],
      ["polyline", { points: "8 22 4 18 8 14", key: "evkj9s" }]
    ]);
    var JapaneseYen = createLucideIcon("JapaneseYen", [
      ["path", { d: "M12 9.5V21m0-11.5L6 3m6 6.5L18 3", key: "2ej80x" }],
      ["path", { d: "M6 15h12", key: "1hwgt5" }],
      ["path", { d: "M6 11h12", key: "wf4gp6" }]
    ]);
    var Joystick = createLucideIcon("Joystick", [
      [
        "path",
        {
          d: "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z",
          key: "jg2n2t"
        }
      ],
      ["path", { d: "M6 15v-2", key: "gd6mvg" }],
      ["path", { d: "M12 15V9", key: "8c7uyn" }],
      ["circle", { cx: "12", cy: "6", r: "3", key: "1gm2ql" }]
    ]);
    var Kanban = createLucideIcon("Kanban", [
      ["path", { d: "M6 5v11", key: "mdvv1e" }],
      ["path", { d: "M12 5v6", key: "14ar3b" }],
      ["path", { d: "M18 5v14", key: "7ji314" }]
    ]);
    var KeyRound = createLucideIcon("KeyRound", [
      [
        "path",
        {
          d: "M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z",
          key: "1s6t7t"
        }
      ],
      ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }]
    ]);
    var KeySquare = createLucideIcon("KeySquare", [
      [
        "path",
        {
          d: "M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z",
          key: "165ttr"
        }
      ],
      ["path", { d: "m14 7 3 3", key: "1r5n42" }],
      [
        "path",
        {
          d: "m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814",
          key: "1ubxi2"
        }
      ]
    ]);
    var Key = createLucideIcon("Key", [
      ["path", { d: "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4", key: "g0fldk" }],
      ["path", { d: "m21 2-9.6 9.6", key: "1j0ho8" }],
      ["circle", { cx: "7.5", cy: "15.5", r: "5.5", key: "yqb3hr" }]
    ]);
    var KeyboardMusic = createLucideIcon("KeyboardMusic", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M6 8h4", key: "utf9t1" }],
      ["path", { d: "M14 8h.01", key: "1primd" }],
      ["path", { d: "M18 8h.01", key: "emo2bl" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "M6 12v4", key: "dy92yo" }],
      ["path", { d: "M10 12v4", key: "1fxnav" }],
      ["path", { d: "M14 12v4", key: "1hft58" }],
      ["path", { d: "M18 12v4", key: "tjjnbz" }]
    ]);
    var KeyboardOff = createLucideIcon("KeyboardOff", [
      ["path", { d: "M 20 4 A2 2 0 0 1 22 6", key: "1g1fkt" }],
      ["path", { d: "M 22 6 L 22 16.41", key: "1qjg3w" }],
      ["path", { d: "M 7 16 L 16 16", key: "n0yqwb" }],
      ["path", { d: "M 9.69 4 L 20 4", key: "kbpcgx" }],
      ["path", { d: "M14 8h.01", key: "1primd" }],
      ["path", { d: "M18 8h.01", key: "emo2bl" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2", key: "s23sx2" }],
      ["path", { d: "M6 8h.01", key: "x9i8wu" }],
      ["path", { d: "M8 12h.01", key: "czm47f" }]
    ]);
    var Keyboard = createLucideIcon("Keyboard", [
      ["path", { d: "M10 8h.01", key: "1r9ogq" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M14 8h.01", key: "1primd" }],
      ["path", { d: "M16 12h.01", key: "1l6xoz" }],
      ["path", { d: "M18 8h.01", key: "emo2bl" }],
      ["path", { d: "M6 8h.01", key: "x9i8wu" }],
      ["path", { d: "M7 16h10", key: "wp8him" }],
      ["path", { d: "M8 12h.01", key: "czm47f" }],
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }]
    ]);
    var LampCeiling = createLucideIcon("LampCeiling", [
      ["path", { d: "M12 2v5", key: "nd4vlx" }],
      ["path", { d: "M6 7h12l4 9H2l4-9Z", key: "123d64" }],
      ["path", { d: "M9.17 16a3 3 0 1 0 5.66 0", key: "1061mw" }]
    ]);
    var LampDesk = createLucideIcon("LampDesk", [
      ["path", { d: "m14 5-3 3 2 7 8-8-7-2Z", key: "1b0msb" }],
      ["path", { d: "m14 5-3 3-3-3 3-3 3 3Z", key: "1uemms" }],
      ["path", { d: "M9.5 6.5 4 12l3 6", key: "1bx08v" }],
      ["path", { d: "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z", key: "wap775" }]
    ]);
    var LampFloor = createLucideIcon("LampFloor", [
      ["path", { d: "M9 2h6l3 7H6l3-7Z", key: "wcx6mj" }],
      ["path", { d: "M12 9v13", key: "3n1su1" }],
      ["path", { d: "M9 22h6", key: "1rlq3v" }]
    ]);
    var LampWallDown = createLucideIcon("LampWallDown", [
      ["path", { d: "M11 13h6l3 7H8l3-7Z", key: "9n3qlo" }],
      ["path", { d: "M14 13V8a2 2 0 0 0-2-2H8", key: "1hu4hb" }],
      ["path", { d: "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z", key: "s053bc" }]
    ]);
    var LampWallUp = createLucideIcon("LampWallUp", [
      ["path", { d: "M11 4h6l3 7H8l3-7Z", key: "11x1ee" }],
      ["path", { d: "M14 11v5a2 2 0 0 1-2 2H8", key: "eutp5o" }],
      ["path", { d: "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z", key: "1iuthr" }]
    ]);
    var Lamp = createLucideIcon("Lamp", [
      ["path", { d: "M8 2h8l4 10H4L8 2Z", key: "9dma5w" }],
      ["path", { d: "M12 12v6", key: "3ahymv" }],
      ["path", { d: "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z", key: "mwf4oh" }]
    ]);
    var LandPlot = createLucideIcon("LandPlot", [
      ["path", { d: "m12 8 6-3-6-3v10", key: "mvpnpy" }],
      [
        "path",
        {
          d: "m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12",
          key: "ek95tt"
        }
      ],
      ["path", { d: "m6.49 12.85 11.02 6.3", key: "1kt42w" }],
      ["path", { d: "M17.51 12.85 6.5 19.15", key: "v55bdg" }]
    ]);
    var Landmark = createLucideIcon("Landmark", [
      ["line", { x1: "3", x2: "21", y1: "22", y2: "22", key: "j8o0r" }],
      ["line", { x1: "6", x2: "6", y1: "18", y2: "11", key: "10tf0k" }],
      ["line", { x1: "10", x2: "10", y1: "18", y2: "11", key: "54lgf6" }],
      ["line", { x1: "14", x2: "14", y1: "18", y2: "11", key: "380y" }],
      ["line", { x1: "18", x2: "18", y1: "18", y2: "11", key: "1kevvc" }],
      ["polygon", { points: "12 2 20 7 4 7", key: "jkujk7" }]
    ]);
    var Languages = createLucideIcon("Languages", [
      ["path", { d: "m5 8 6 6", key: "1wu5hv" }],
      ["path", { d: "m4 14 6-6 2-3", key: "1k1g8d" }],
      ["path", { d: "M2 5h12", key: "or177f" }],
      ["path", { d: "M7 2h1", key: "1t2jsx" }],
      ["path", { d: "m22 22-5-10-5 10", key: "don7ne" }],
      ["path", { d: "M14 18h6", key: "1m8k6r" }]
    ]);
    var LaptopMinimalCheck = createLucideIcon("LaptopMinimalCheck", [
      ["path", { d: "M2 20h20", key: "owomy5" }],
      ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }],
      ["rect", { x: "3", y: "4", width: "18", height: "12", rx: "2", key: "8ur36m" }]
    ]);
    var LaptopMinimal = createLucideIcon("LaptopMinimal", [
      ["rect", { width: "18", height: "12", x: "3", y: "4", rx: "2", ry: "2", key: "1qhy41" }],
      ["line", { x1: "2", x2: "22", y1: "20", y2: "20", key: "ni3hll" }]
    ]);
    var Laptop = createLucideIcon("Laptop", [
      [
        "path",
        {
          d: "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16",
          key: "tarvll"
        }
      ]
    ]);
    var LassoSelect = createLucideIcon("LassoSelect", [
      ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
      ["path", { d: "M7 16.93c.96.43 1.96.74 2.99.91", key: "ybbtv3" }],
      [
        "path",
        {
          d: "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2",
          key: "gt5e1w"
        }
      ],
      ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }],
      [
        "path",
        {
          d: "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z",
          key: "72q637"
        }
      ]
    ]);
    var Lasso = createLucideIcon("Lasso", [
      ["path", { d: "M7 22a5 5 0 0 1-2-4", key: "umushi" }],
      [
        "path",
        {
          d: "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1",
          key: "146dds"
        }
      ],
      ["path", { d: "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z", key: "bq3ynw" }]
    ]);
    var Laugh = createLucideIcon("Laugh", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z", key: "b2q4dd" }],
      ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
      ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
    ]);
    var Layers2 = createLucideIcon("Layers2", [
      [
        "path",
        {
          d: "m16.02 12 5.48 3.13a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74L7.98 12",
          key: "1cuww1"
        }
      ],
      [
        "path",
        {
          d: "M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74Z",
          key: "pdlvxu"
        }
      ]
    ]);
    var Layers3 = createLucideIcon("Layers3", [
      [
        "path",
        {
          d: "m12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83Z",
          key: "8b97xw"
        }
      ],
      [
        "path",
        {
          d: "m6.08 9.5-3.5 1.6a1 1 0 0 0 0 1.81l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9a1 1 0 0 0 0-1.83l-3.5-1.59",
          key: "1e5n1m"
        }
      ],
      [
        "path",
        {
          d: "m6.08 14.5-3.5 1.6a1 1 0 0 0 0 1.81l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9a1 1 0 0 0 0-1.83l-3.5-1.59",
          key: "1iwflc"
        }
      ]
    ]);
    var Layers = createLucideIcon("Layers", [
      [
        "path",
        {
          d: "m12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83Z",
          key: "8b97xw"
        }
      ],
      ["path", { d: "m22 17.65-9.17 4.16a2 2 0 0 1-1.66 0L2 17.65", key: "dd6zsq" }],
      ["path", { d: "m22 12.65-9.17 4.16a2 2 0 0 1-1.66 0L2 12.65", key: "ep9fru" }]
    ]);
    var LayoutDashboard = createLucideIcon("LayoutDashboard", [
      ["rect", { width: "7", height: "9", x: "3", y: "3", rx: "1", key: "10lvy0" }],
      ["rect", { width: "7", height: "5", x: "14", y: "3", rx: "1", key: "16une8" }],
      ["rect", { width: "7", height: "9", x: "14", y: "12", rx: "1", key: "1hutg5" }],
      ["rect", { width: "7", height: "5", x: "3", y: "16", rx: "1", key: "ldoo1y" }]
    ]);
    var LayoutGrid = createLucideIcon("LayoutGrid", [
      ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
      ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
      ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }],
      ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }]
    ]);
    var LayoutList = createLucideIcon("LayoutList", [
      ["rect", { width: "7", height: "7", x: "3", y: "3", rx: "1", key: "1g98yp" }],
      ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
      ["path", { d: "M14 4h7", key: "3xa0d5" }],
      ["path", { d: "M14 9h7", key: "1icrd9" }],
      ["path", { d: "M14 15h7", key: "1mj8o2" }],
      ["path", { d: "M14 20h7", key: "11slyb" }]
    ]);
    var LayoutPanelLeft = createLucideIcon("LayoutPanelLeft", [
      ["rect", { width: "7", height: "18", x: "3", y: "3", rx: "1", key: "2obqm" }],
      ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1", key: "6d4xhi" }],
      ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
    ]);
    var LayoutPanelTop = createLucideIcon("LayoutPanelTop", [
      ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
      ["rect", { width: "7", height: "7", x: "3", y: "14", rx: "1", key: "1bb6yr" }],
      ["rect", { width: "7", height: "7", x: "14", y: "14", rx: "1", key: "nxv5o0" }]
    ]);
    var LayoutTemplate = createLucideIcon("LayoutTemplate", [
      ["rect", { width: "18", height: "7", x: "3", y: "3", rx: "1", key: "f1a2em" }],
      ["rect", { width: "9", height: "7", x: "3", y: "14", rx: "1", key: "jqznyg" }],
      ["rect", { width: "5", height: "7", x: "16", y: "14", rx: "1", key: "q5h2i8" }]
    ]);
    var Leaf = createLucideIcon("Leaf", [
      [
        "path",
        {
          d: "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z",
          key: "nnexq3"
        }
      ],
      ["path", { d: "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12", key: "mt58a7" }]
    ]);
    var LeafyGreen = createLucideIcon("LeafyGreen", [
      [
        "path",
        {
          d: "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22",
          key: "1134nt"
        }
      ],
      ["path", { d: "M2 22 17 7", key: "1q7jp2" }]
    ]);
    var Lectern = createLucideIcon("Lectern", [
      [
        "path",
        {
          d: "M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3",
          key: "13jjxg"
        }
      ],
      ["path", { d: "M18 6V3a1 1 0 0 0-1-1h-3", key: "1550fe" }],
      ["rect", { width: "8", height: "12", x: "8", y: "10", rx: "1", key: "qmu8b6" }]
    ]);
    var LetterText = createLucideIcon("LetterText", [
      ["path", { d: "M15 12h6", key: "upa0zy" }],
      ["path", { d: "M15 6h6", key: "1jlkvy" }],
      ["path", { d: "m3 13 3.553-7.724a.5.5 0 0 1 .894 0L11 13", key: "blevx4" }],
      ["path", { d: "M3 18h18", key: "1h113x" }],
      ["path", { d: "M4 11h6", key: "olkgv1" }]
    ]);
    var LibraryBig = createLucideIcon("LibraryBig", [
      ["rect", { width: "8", height: "18", x: "3", y: "3", rx: "1", key: "oynpb5" }],
      ["path", { d: "M7 3v18", key: "bbkbws" }],
      [
        "path",
        {
          d: "M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z",
          key: "1qboyk"
        }
      ]
    ]);
    var Library = createLucideIcon("Library", [
      ["path", { d: "m16 6 4 14", key: "ji33uf" }],
      ["path", { d: "M12 6v14", key: "1n7gus" }],
      ["path", { d: "M8 8v12", key: "1gg7y9" }],
      ["path", { d: "M4 4v16", key: "6qkkli" }]
    ]);
    var LifeBuoy = createLucideIcon("LifeBuoy", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "m4.93 4.93 4.24 4.24", key: "1ymg45" }],
      ["path", { d: "m14.83 9.17 4.24-4.24", key: "1cb5xl" }],
      ["path", { d: "m14.83 14.83 4.24 4.24", key: "q42g0n" }],
      ["path", { d: "m9.17 14.83-4.24 4.24", key: "bqpfvv" }],
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }]
    ]);
    var Ligature = createLucideIcon("Ligature", [
      ["path", { d: "M8 20V8c0-2.2 1.8-4 4-4 1.5 0 2.8.8 3.5 2", key: "1rtphz" }],
      ["path", { d: "M6 12h4", key: "a4o3ry" }],
      ["path", { d: "M14 12h2v8", key: "c1fccl" }],
      ["path", { d: "M6 20h4", key: "1i6q5t" }],
      ["path", { d: "M14 20h4", key: "lzx1xo" }]
    ]);
    var LightbulbOff = createLucideIcon("LightbulbOff", [
      ["path", { d: "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5", key: "1fkcox" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5", key: "10m8kw" }],
      ["path", { d: "M9 18h6", key: "x1upvd" }],
      ["path", { d: "M10 22h4", key: "ceow96" }]
    ]);
    var Lightbulb = createLucideIcon("Lightbulb", [
      [
        "path",
        {
          d: "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5",
          key: "1gvzjb"
        }
      ],
      ["path", { d: "M9 18h6", key: "x1upvd" }],
      ["path", { d: "M10 22h4", key: "ceow96" }]
    ]);
    var Link2Off = createLucideIcon("Link2Off", [
      ["path", { d: "M9 17H7A5 5 0 0 1 7 7", key: "10o201" }],
      ["path", { d: "M15 7h2a5 5 0 0 1 4 8", key: "1d3206" }],
      ["line", { x1: "8", x2: "12", y1: "12", y2: "12", key: "rvw6j4" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Link2 = createLucideIcon("Link2", [
      ["path", { d: "M9 17H7A5 5 0 0 1 7 7h2", key: "8i5ue5" }],
      ["path", { d: "M15 7h2a5 5 0 1 1 0 10h-2", key: "1b9ql8" }],
      ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }]
    ]);
    var Link3 = createLucideIcon("Link", [
      ["path", { d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71", key: "1cjeqo" }],
      ["path", { d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71", key: "19qd67" }]
    ]);
    var Linkedin = createLucideIcon("Linkedin", [
      [
        "path",
        {
          d: "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",
          key: "c2jq9f"
        }
      ],
      ["rect", { width: "4", height: "12", x: "2", y: "9", key: "mk3on5" }],
      ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }]
    ]);
    var ListCheck = createLucideIcon("ListCheck", [
      ["path", { d: "M11 18H3", key: "n3j2dh" }],
      ["path", { d: "m15 18 2 2 4-4", key: "1szwhi" }],
      ["path", { d: "M16 12H3", key: "1a2rj7" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }]
    ]);
    var ListChecks = createLucideIcon("ListChecks", [
      ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
      ["path", { d: "m3 7 2 2 4-4", key: "1obspn" }],
      ["path", { d: "M13 6h8", key: "15sg57" }],
      ["path", { d: "M13 12h8", key: "h98zly" }],
      ["path", { d: "M13 18h8", key: "oe0vm4" }]
    ]);
    var ListCollapse = createLucideIcon("ListCollapse", [
      ["path", { d: "m3 10 2.5-2.5L3 5", key: "i6eama" }],
      ["path", { d: "m3 19 2.5-2.5L3 14", key: "w2gmor" }],
      ["path", { d: "M10 6h11", key: "c7qv1k" }],
      ["path", { d: "M10 12h11", key: "6m4ad9" }],
      ["path", { d: "M10 18h11", key: "11hvi2" }]
    ]);
    var ListEnd = createLucideIcon("ListEnd", [
      ["path", { d: "M16 12H3", key: "1a2rj7" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M10 18H3", key: "13769t" }],
      ["path", { d: "M21 6v10a2 2 0 0 1-2 2h-5", key: "ilrcs8" }],
      ["path", { d: "m16 16-2 2 2 2", key: "kkc6pm" }]
    ]);
    var ListFilter = createLucideIcon("ListFilter", [
      ["path", { d: "M3 6h18", key: "d0wm0j" }],
      ["path", { d: "M7 12h10", key: "b7w52i" }],
      ["path", { d: "M10 18h4", key: "1ulq68" }]
    ]);
    var ListMinus = createLucideIcon("ListMinus", [
      ["path", { d: "M11 12H3", key: "51ecnj" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M16 18H3", key: "12xzn7" }],
      ["path", { d: "M21 12h-6", key: "bt1uis" }]
    ]);
    var ListMusic = createLucideIcon("ListMusic", [
      ["path", { d: "M21 15V6", key: "h1cx4g" }],
      ["path", { d: "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z", key: "8saifv" }],
      ["path", { d: "M12 12H3", key: "18klou" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M12 18H3", key: "11ftsu" }]
    ]);
    var ListOrdered = createLucideIcon("ListOrdered", [
      ["path", { d: "M10 12h11", key: "6m4ad9" }],
      ["path", { d: "M10 18h11", key: "11hvi2" }],
      ["path", { d: "M10 6h11", key: "c7qv1k" }],
      ["path", { d: "M4 10h2", key: "16xx2s" }],
      ["path", { d: "M4 6h1v4", key: "cnovpq" }],
      ["path", { d: "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1", key: "m9a95d" }]
    ]);
    var ListPlus = createLucideIcon("ListPlus", [
      ["path", { d: "M11 12H3", key: "51ecnj" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M16 18H3", key: "12xzn7" }],
      ["path", { d: "M18 9v6", key: "1twb98" }],
      ["path", { d: "M21 12h-6", key: "bt1uis" }]
    ]);
    var ListRestart = createLucideIcon("ListRestart", [
      ["path", { d: "M21 6H3", key: "1jwq7v" }],
      ["path", { d: "M7 12H3", key: "13ou7f" }],
      ["path", { d: "M7 18H3", key: "1sijw9" }],
      [
        "path",
        {
          d: "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14",
          key: "qth677"
        }
      ],
      ["path", { d: "M11 10v4h4", key: "172dkj" }]
    ]);
    var ListStart = createLucideIcon("ListStart", [
      ["path", { d: "M16 12H3", key: "1a2rj7" }],
      ["path", { d: "M16 18H3", key: "12xzn7" }],
      ["path", { d: "M10 6H3", key: "lf8lx7" }],
      ["path", { d: "M21 18V8a2 2 0 0 0-2-2h-5", key: "1hghli" }],
      ["path", { d: "m16 8-2-2 2-2", key: "160uvd" }]
    ]);
    var ListTodo = createLucideIcon("ListTodo", [
      ["rect", { x: "3", y: "5", width: "6", height: "6", rx: "1", key: "1defrl" }],
      ["path", { d: "m3 17 2 2 4-4", key: "1jhpwq" }],
      ["path", { d: "M13 6h8", key: "15sg57" }],
      ["path", { d: "M13 12h8", key: "h98zly" }],
      ["path", { d: "M13 18h8", key: "oe0vm4" }]
    ]);
    var ListTree = createLucideIcon("ListTree", [
      ["path", { d: "M21 12h-8", key: "1bmf0i" }],
      ["path", { d: "M21 6H8", key: "1pqkrb" }],
      ["path", { d: "M21 18h-8", key: "1tm79t" }],
      ["path", { d: "M3 6v4c0 1.1.9 2 2 2h3", key: "1ywdgy" }],
      ["path", { d: "M3 10v6c0 1.1.9 2 2 2h3", key: "2wc746" }]
    ]);
    var ListVideo = createLucideIcon("ListVideo", [
      ["path", { d: "M12 12H3", key: "18klou" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M12 18H3", key: "11ftsu" }],
      ["path", { d: "m16 12 5 3-5 3v-6Z", key: "zpskkp" }]
    ]);
    var ListX = createLucideIcon("ListX", [
      ["path", { d: "M11 12H3", key: "51ecnj" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M16 18H3", key: "12xzn7" }],
      ["path", { d: "m19 10-4 4", key: "1tz659" }],
      ["path", { d: "m15 10 4 4", key: "1n7nei" }]
    ]);
    var List = createLucideIcon("List", [
      ["path", { d: "M3 12h.01", key: "nlz23k" }],
      ["path", { d: "M3 18h.01", key: "1tta3j" }],
      ["path", { d: "M3 6h.01", key: "1rqtza" }],
      ["path", { d: "M8 12h13", key: "1za7za" }],
      ["path", { d: "M8 18h13", key: "1lx6n3" }],
      ["path", { d: "M8 6h13", key: "ik3vkj" }]
    ]);
    var LoaderCircle = createLucideIcon("LoaderCircle", [
      ["path", { d: "M21 12a9 9 0 1 1-6.219-8.56", key: "13zald" }]
    ]);
    var LoaderPinwheel = createLucideIcon("LoaderPinwheel", [
      ["path", { d: "M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0", key: "1lzz15" }],
      ["path", { d: "M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6", key: "1gnrpi" }],
      ["path", { d: "M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6", key: "u9yy5q" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var Loader = createLucideIcon("Loader", [
      ["path", { d: "M12 2v4", key: "3427ic" }],
      ["path", { d: "m16.2 7.8 2.9-2.9", key: "r700ao" }],
      ["path", { d: "M18 12h4", key: "wj9ykh" }],
      ["path", { d: "m16.2 16.2 2.9 2.9", key: "1bxg5t" }],
      ["path", { d: "M12 18v4", key: "jadmvz" }],
      ["path", { d: "m4.9 19.1 2.9-2.9", key: "bwix9q" }],
      ["path", { d: "M2 12h4", key: "j09sii" }],
      ["path", { d: "m4.9 4.9 2.9 2.9", key: "giyufr" }]
    ]);
    var LocateFixed = createLucideIcon("LocateFixed", [
      ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
      ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
      ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
      ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ]);
    var LocateOff = createLucideIcon("LocateOff", [
      ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
      ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
      ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
      [
        "path",
        {
          d: "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11",
          key: "1oh7ia"
        }
      ],
      [
        "path",
        {
          d: "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29",
          key: "3qdecy"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Locate = createLucideIcon("Locate", [
      ["line", { x1: "2", x2: "5", y1: "12", y2: "12", key: "bvdh0s" }],
      ["line", { x1: "19", x2: "22", y1: "12", y2: "12", key: "1tbv5k" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "5", key: "11lu5j" }],
      ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }],
      ["circle", { cx: "12", cy: "12", r: "7", key: "fim9np" }]
    ]);
    var LockKeyholeOpen = createLucideIcon("LockKeyholeOpen", [
      ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
      ["rect", { width: "18", height: "12", x: "3", y: "10", rx: "2", key: "l0tzu3" }],
      ["path", { d: "M7 10V7a5 5 0 0 1 9.33-2.5", key: "car5b7" }]
    ]);
    var LockKeyhole = createLucideIcon("LockKeyhole", [
      ["circle", { cx: "12", cy: "16", r: "1", key: "1au0dj" }],
      ["rect", { x: "3", y: "10", width: "18", height: "12", rx: "2", key: "6s8ecr" }],
      ["path", { d: "M7 10V7a5 5 0 0 1 10 0v3", key: "1pqi11" }]
    ]);
    var LockOpen = createLucideIcon("LockOpen", [
      ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
      ["path", { d: "M7 11V7a5 5 0 0 1 9.9-1", key: "1mm8w8" }]
    ]);
    var Lock = createLucideIcon("Lock", [
      ["rect", { width: "18", height: "11", x: "3", y: "11", rx: "2", ry: "2", key: "1w4ew1" }],
      ["path", { d: "M7 11V7a5 5 0 0 1 10 0v4", key: "fwvmzm" }]
    ]);
    var LogIn = createLucideIcon("LogIn", [
      ["path", { d: "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4", key: "u53s6r" }],
      ["polyline", { points: "10 17 15 12 10 7", key: "1ail0h" }],
      ["line", { x1: "15", x2: "3", y1: "12", y2: "12", key: "v6grx8" }]
    ]);
    var LogOut = createLucideIcon("LogOut", [
      ["path", { d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4", key: "1uf3rs" }],
      ["polyline", { points: "16 17 21 12 16 7", key: "1gabdz" }],
      ["line", { x1: "21", x2: "9", y1: "12", y2: "12", key: "1uyos4" }]
    ]);
    var Logs = createLucideIcon("Logs", [
      ["path", { d: "M13 12h8", key: "h98zly" }],
      ["path", { d: "M13 18h8", key: "oe0vm4" }],
      ["path", { d: "M13 6h8", key: "15sg57" }],
      ["path", { d: "M3 12h1", key: "lp3yf2" }],
      ["path", { d: "M3 18h1", key: "1eiwyy" }],
      ["path", { d: "M3 6h1", key: "rgxa97" }],
      ["path", { d: "M8 12h1", key: "1con00" }],
      ["path", { d: "M8 18h1", key: "13wk12" }],
      ["path", { d: "M8 6h1", key: "tn6mkg" }]
    ]);
    var Lollipop = createLucideIcon("Lollipop", [
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
      ["path", { d: "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0", key: "107gwy" }]
    ]);
    var Luggage = createLucideIcon("Luggage", [
      [
        "path",
        { d: "M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2", key: "1m57jg" }
      ],
      ["path", { d: "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14", key: "1l99gc" }],
      ["path", { d: "M10 20h4", key: "ni2waw" }],
      ["circle", { cx: "16", cy: "20", r: "2", key: "1vifvg" }],
      ["circle", { cx: "8", cy: "20", r: "2", key: "ckkr5m" }]
    ]);
    var Magnet = createLucideIcon("Magnet", [
      [
        "path",
        {
          d: "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15",
          key: "1i3lhw"
        }
      ],
      ["path", { d: "m5 8 4 4", key: "j6kj7e" }],
      ["path", { d: "m12 15 4 4", key: "lnac28" }]
    ]);
    var MailCheck = createLucideIcon("MailCheck", [
      ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
    ]);
    var MailMinus = createLucideIcon("MailMinus", [
      ["path", { d: "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "fuxbkv" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "M16 19h6", key: "xwg31i" }]
    ]);
    var MailOpen = createLucideIcon("MailOpen", [
      [
        "path",
        {
          d: "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z",
          key: "1jhwl8"
        }
      ],
      ["path", { d: "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10", key: "1qfld7" }]
    ]);
    var MailPlus = createLucideIcon("MailPlus", [
      ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8", key: "12jkf8" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "M19 16v6", key: "tddt3s" }],
      ["path", { d: "M16 19h6", key: "xwg31i" }]
    ]);
    var MailQuestion = createLucideIcon("MailQuestion", [
      ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      [
        "path",
        {
          d: "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2",
          key: "7z9rxb"
        }
      ],
      ["path", { d: "M20 22v.01", key: "12bgn6" }]
    ]);
    var MailSearch = createLucideIcon("MailSearch", [
      ["path", { d: "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5", key: "w80f2v" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z", key: "8lzu5m" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["path", { d: "m22 22-1.5-1.5", key: "1x83k4" }]
    ]);
    var MailWarning = createLucideIcon("MailWarning", [
      ["path", { d: "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5", key: "e61zoh" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "M20 14v4", key: "1hm744" }],
      ["path", { d: "M20 22v.01", key: "12bgn6" }]
    ]);
    var MailX = createLucideIcon("MailX", [
      ["path", { d: "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9", key: "1j9vog" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }],
      ["path", { d: "m17 17 4 4", key: "1b3523" }],
      ["path", { d: "m21 17-4 4", key: "uinynz" }]
    ]);
    var Mail = createLucideIcon("Mail", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7", key: "1ocrg3" }]
    ]);
    var Mailbox = createLucideIcon("Mailbox", [
      [
        "path",
        {
          d: "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z",
          key: "1lbycx"
        }
      ],
      ["polyline", { points: "15,9 18,9 18,11", key: "1pm9c0" }],
      ["path", { d: "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2", key: "15i455" }],
      ["line", { x1: "6", x2: "7", y1: "10", y2: "10", key: "1e2scm" }]
    ]);
    var Mails = createLucideIcon("Mails", [
      ["rect", { width: "16", height: "13", x: "6", y: "4", rx: "2", key: "1drq3f" }],
      ["path", { d: "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7", key: "xn252p" }],
      ["path", { d: "M2 8v11c0 1.1.9 2 2 2h14", key: "n13cji" }]
    ]);
    var MapPinCheckInside = createLucideIcon("MapPinCheckInside", [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }]
    ]);
    var MapPinCheck = createLucideIcon("MapPinCheck", [
      [
        "path",
        {
          d: "M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728",
          key: "1dq61d"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "m16 18 2 2 4-4", key: "1mkfmb" }]
    ]);
    var MapPinHouse = createLucideIcon("MapPinHouse", [
      [
        "path",
        {
          d: "M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z",
          key: "1p1rcz"
        }
      ],
      [
        "path",
        {
          d: "M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2",
          key: "mcbcs9"
        }
      ],
      ["path", { d: "M18 22v-3", key: "1t1ugv" }],
      ["circle", { cx: "10", cy: "10", r: "3", key: "1ns7v1" }]
    ]);
    var MapPinMinusInside = createLucideIcon("MapPinMinusInside", [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var MapPinMinus = createLucideIcon("MapPinMinus", [
      [
        "path",
        {
          d: "M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738",
          key: "11uxia"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M16 18h6", key: "987eiv" }]
    ]);
    var MapPinOff = createLucideIcon("MapPinOff", [
      ["path", { d: "M12.75 7.09a3 3 0 0 1 2.16 2.16", key: "1d4wjd" }],
      [
        "path",
        {
          d: "M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568",
          key: "12yil7"
        }
      ],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533", key: "lhrkcz" }],
      ["path", { d: "M9.13 9.13a3 3 0 0 0 3.74 3.74", key: "13wojd" }]
    ]);
    var MapPinPlusInside = createLucideIcon("MapPinPlusInside", [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["path", { d: "M12 7v6", key: "lw1j43" }],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var MapPinPlus = createLucideIcon("MapPinPlus", [
      [
        "path",
        {
          d: "M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738",
          key: "fcdtly"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M16 18h6", key: "987eiv" }],
      ["path", { d: "M19 15v6", key: "10aioa" }]
    ]);
    var MapPinXInside = createLucideIcon("MapPinXInside", [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
      ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
    ]);
    var MapPinX = createLucideIcon("MapPinX", [
      [
        "path",
        {
          d: "M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077",
          key: "y0ewhp"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "m21.5 15.5-5 5", key: "11iqnx" }],
      ["path", { d: "m21.5 20.5-5-5", key: "1bylgx" }]
    ]);
    var MapPin = createLucideIcon("MapPin", [
      [
        "path",
        {
          d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
          key: "1r0f0z"
        }
      ],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }]
    ]);
    var MapPinned = createLucideIcon("MapPinned", [
      [
        "path",
        {
          d: "M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0",
          key: "11u0oz"
        }
      ],
      ["circle", { cx: "12", cy: "8", r: "2", key: "1822b1" }],
      [
        "path",
        {
          d: "M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712",
          key: "q8zwxj"
        }
      ]
    ]);
    var Map2 = createLucideIcon("Map", [
      [
        "path",
        {
          d: "M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z",
          key: "169xi5"
        }
      ],
      ["path", { d: "M15 5.764v15", key: "1pn4in" }],
      ["path", { d: "M9 3.236v15", key: "1uimfh" }]
    ]);
    var Martini = createLucideIcon("Martini", [
      ["path", { d: "M8 22h8", key: "rmew8v" }],
      ["path", { d: "M12 11v11", key: "ur9y6a" }],
      ["path", { d: "m19 3-7 8-7-8Z", key: "1sgpiw" }]
    ]);
    var Maximize2 = createLucideIcon("Maximize2", [
      ["polyline", { points: "15 3 21 3 21 9", key: "mznyad" }],
      ["polyline", { points: "9 21 3 21 3 15", key: "1avn1i" }],
      ["line", { x1: "21", x2: "14", y1: "3", y2: "10", key: "ota7mn" }],
      ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
    ]);
    var Maximize = createLucideIcon("Maximize", [
      ["path", { d: "M8 3H5a2 2 0 0 0-2 2v3", key: "1dcmit" }],
      ["path", { d: "M21 8V5a2 2 0 0 0-2-2h-3", key: "1e4gt3" }],
      ["path", { d: "M3 16v3a2 2 0 0 0 2 2h3", key: "wsl5sc" }],
      ["path", { d: "M16 21h3a2 2 0 0 0 2-2v-3", key: "18trek" }]
    ]);
    var Medal = createLucideIcon("Medal", [
      [
        "path",
        {
          d: "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15",
          key: "143lza"
        }
      ],
      ["path", { d: "M11 12 5.12 2.2", key: "qhuxz6" }],
      ["path", { d: "m13 12 5.88-9.8", key: "hbye0f" }],
      ["path", { d: "M8 7h8", key: "i86dvs" }],
      ["circle", { cx: "12", cy: "17", r: "5", key: "qbz8iq" }],
      ["path", { d: "M12 18v-2h-.5", key: "fawc4q" }]
    ]);
    var MegaphoneOff = createLucideIcon("MegaphoneOff", [
      ["path", { d: "M9.26 9.26 3 11v3l14.14 3.14", key: "3429n" }],
      ["path", { d: "M21 15.34V6l-7.31 2.03", key: "4o1dh8" }],
      ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Megaphone = createLucideIcon("Megaphone", [
      ["path", { d: "m3 11 18-5v12L3 14v-3z", key: "n962bs" }],
      ["path", { d: "M11.6 16.8a3 3 0 1 1-5.8-1.6", key: "1yl0tm" }]
    ]);
    var Meh = createLucideIcon("Meh", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["line", { x1: "8", x2: "16", y1: "15", y2: "15", key: "1xb1d9" }],
      ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
      ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
    ]);
    var MemoryStick = createLucideIcon("MemoryStick", [
      ["path", { d: "M6 19v-3", key: "1nvgqn" }],
      ["path", { d: "M10 19v-3", key: "iu8nkm" }],
      ["path", { d: "M14 19v-3", key: "kcehxu" }],
      ["path", { d: "M18 19v-3", key: "1vh91z" }],
      ["path", { d: "M8 11V9", key: "63erz4" }],
      ["path", { d: "M16 11V9", key: "fru6f3" }],
      ["path", { d: "M12 11V9", key: "ha00sb" }],
      ["path", { d: "M2 15h20", key: "16ne18" }],
      [
        "path",
        {
          d: "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z",
          key: "lhddv3"
        }
      ]
    ]);
    var Menu = createLucideIcon("Menu", [
      ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }],
      ["line", { x1: "4", x2: "20", y1: "6", y2: "6", key: "1owob3" }],
      ["line", { x1: "4", x2: "20", y1: "18", y2: "18", key: "yk5zj1" }]
    ]);
    var Merge = createLucideIcon("Merge", [
      ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
      ["path", { d: "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22", key: "1hyw0i" }],
      ["path", { d: "m20 22-5-5", key: "1m27yz" }]
    ]);
    var MessageCircleCode = createLucideIcon("MessageCircleCode", [
      ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
      ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22z", key: "k85zhp" }]
    ]);
    var MessageCircleDashed = createLucideIcon("MessageCircleDashed", [
      ["path", { d: "M13.5 3.1c-.5 0-1-.1-1.5-.1s-1 .1-1.5.1", key: "16ll65" }],
      ["path", { d: "M19.3 6.8a10.45 10.45 0 0 0-2.1-2.1", key: "1nq77a" }],
      ["path", { d: "M20.9 13.5c.1-.5.1-1 .1-1.5s-.1-1-.1-1.5", key: "1sf7wn" }],
      ["path", { d: "M17.2 19.3a10.45 10.45 0 0 0 2.1-2.1", key: "x1hs5g" }],
      ["path", { d: "M10.5 20.9c.5.1 1 .1 1.5.1s1-.1 1.5-.1", key: "19m18z" }],
      ["path", { d: "M3.5 17.5 2 22l4.5-1.5", key: "1f36qi" }],
      ["path", { d: "M3.1 10.5c0 .5-.1 1-.1 1.5s.1 1 .1 1.5", key: "1vz3ju" }],
      ["path", { d: "M6.8 4.7a10.45 10.45 0 0 0-2.1 2.1", key: "19f9do" }]
    ]);
    var MessageCircleHeart = createLucideIcon("MessageCircleHeart", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      [
        "path",
        {
          d: "M15.8 9.2a2.5 2.5 0 0 0-3.5 0l-.3.4-.35-.3a2.42 2.42 0 1 0-3.2 3.6l3.6 3.5 3.6-3.5c1.2-1.2 1.1-2.7.2-3.7",
          key: "43lnbm"
        }
      ]
    ]);
    var MessageCircleMore = createLucideIcon("MessageCircleMore", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "M8 12h.01", key: "czm47f" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M16 12h.01", key: "1l6xoz" }]
    ]);
    var MessageCircleOff = createLucideIcon("MessageCircleOff", [
      ["path", { d: "M20.5 14.9A9 9 0 0 0 9.1 3.5", key: "1iebmn" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M5.6 5.6C3 8.3 2.2 12.5 4 16l-2 6 6-2c3.4 1.8 7.6 1.1 10.3-1.7", key: "1ov8ce" }]
    ]);
    var MessageCirclePlus = createLucideIcon("MessageCirclePlus", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "M12 8v8", key: "napkw2" }]
    ]);
    var MessageCircleQuestion = createLucideIcon("MessageCircleQuestion", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3", key: "1u773s" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }]
    ]);
    var MessageCircleReply = createLucideIcon("MessageCircleReply", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }],
      ["path", { d: "M7 12h7a2 2 0 0 1 2 2v1", key: "1gheu4" }]
    ]);
    var MessageCircleWarning = createLucideIcon("MessageCircleWarning", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "M12 8v4", key: "1got3b" }],
      ["path", { d: "M12 16h.01", key: "1drbdi" }]
    ]);
    var MessageCircleX = createLucideIcon("MessageCircleX", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "m9 9 6 6", key: "z0biqf" }]
    ]);
    var MessageCircle = createLucideIcon("MessageCircle", [
      ["path", { d: "M7.9 20A9 9 0 1 0 4 16.1L2 22Z", key: "vv11sd" }]
    ]);
    var MessageSquareCode = createLucideIcon("MessageSquareCode", [
      ["path", { d: "M10 7.5 8 10l2 2.5", key: "xb17xw" }],
      ["path", { d: "m14 7.5 2 2.5-2 2.5", key: "5rap1v" }],
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
    ]);
    var MessageSquareDashed = createLucideIcon("MessageSquareDashed", [
      ["path", { d: "M10 17H7l-4 4v-7", key: "1r71xu" }],
      ["path", { d: "M14 17h1", key: "nufu4t" }],
      ["path", { d: "M14 3h1", key: "1ec4yj" }],
      ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
      ["path", { d: "M21 14v1a2 2 0 0 1-2 2", key: "29akq3" }],
      ["path", { d: "M21 9v1", key: "mxsmne" }],
      ["path", { d: "M3 9v1", key: "1r0deq" }],
      ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
      ["path", { d: "M9 3h1", key: "1yesri" }]
    ]);
    var MessageSquareDiff = createLucideIcon("MessageSquareDiff", [
      ["path", { d: "m5 19-2 2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2", key: "1xuzuj" }],
      ["path", { d: "M9 10h6", key: "9gxzsh" }],
      ["path", { d: "M12 7v6", key: "lw1j43" }],
      ["path", { d: "M9 17h6", key: "r8uit2" }]
    ]);
    var MessageSquareDot = createLucideIcon("MessageSquareDot", [
      ["path", { d: "M11.7 3H5a2 2 0 0 0-2 2v16l4-4h12a2 2 0 0 0 2-2v-2.7", key: "uodpkb" }],
      ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }]
    ]);
    var MessageSquareHeart = createLucideIcon("MessageSquareHeart", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      [
        "path",
        {
          d: "M14.8 7.5a1.84 1.84 0 0 0-2.6 0l-.2.3-.3-.3a1.84 1.84 0 1 0-2.4 2.8L12 13l2.7-2.7c.9-.9.8-2.1.1-2.8",
          key: "1blaws"
        }
      ]
    ]);
    var MessageSquareLock = createLucideIcon("MessageSquareLock", [
      ["path", { d: "M19 15v-2a2 2 0 1 0-4 0v2", key: "h3d1vz" }],
      ["path", { d: "M9 17H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v3.5", key: "xsnnhn" }],
      ["rect", { x: "13", y: "15", width: "8", height: "5", rx: "1", key: "1ccwuk" }]
    ]);
    var MessageSquareMore = createLucideIcon("MessageSquareMore", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "M8 10h.01", key: "19clt8" }],
      ["path", { d: "M12 10h.01", key: "1nrarc" }],
      ["path", { d: "M16 10h.01", key: "1m94wz" }]
    ]);
    var MessageSquareOff = createLucideIcon("MessageSquareOff", [
      ["path", { d: "M21 15V5a2 2 0 0 0-2-2H9", key: "43el77" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M3.6 3.6c-.4.3-.6.8-.6 1.4v16l4-4h10", key: "pwpm4a" }]
    ]);
    var MessageSquarePlus = createLucideIcon("MessageSquarePlus", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "M12 7v6", key: "lw1j43" }],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var MessageSquareQuote = createLucideIcon("MessageSquareQuote", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "M8 12a2 2 0 0 0 2-2V8H8", key: "1jfesj" }],
      ["path", { d: "M14 12a2 2 0 0 0 2-2V8h-2", key: "1dq9mh" }]
    ]);
    var MessageSquareReply = createLucideIcon("MessageSquareReply", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "m10 7-3 3 3 3", key: "1eugdv" }],
      ["path", { d: "M17 13v-1a2 2 0 0 0-2-2H7", key: "ernfh3" }]
    ]);
    var MessageSquareShare = createLucideIcon("MessageSquareShare", [
      ["path", { d: "M21 12v3a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h7", key: "tqtdkg" }],
      ["path", { d: "M16 3h5v5", key: "1806ms" }],
      ["path", { d: "m16 8 5-5", key: "15mbrl" }]
    ]);
    var MessageSquareText = createLucideIcon("MessageSquareText", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "M13 8H7", key: "14i4kc" }],
      ["path", { d: "M17 12H7", key: "16if0g" }]
    ]);
    var MessageSquareWarning = createLucideIcon("MessageSquareWarning", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "M12 7v2", key: "stiyo7" }],
      ["path", { d: "M12 13h.01", key: "y0uutt" }]
    ]);
    var MessageSquareX = createLucideIcon("MessageSquareX", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }],
      ["path", { d: "m14.5 7.5-5 5", key: "3lb6iw" }],
      ["path", { d: "m9.5 7.5 5 5", key: "ko136h" }]
    ]);
    var MessageSquare = createLucideIcon("MessageSquare", [
      ["path", { d: "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z", key: "1lielz" }]
    ]);
    var MessagesSquare = createLucideIcon("MessagesSquare", [
      ["path", { d: "M14 9a2 2 0 0 1-2 2H6l-4 4V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2z", key: "p1xzt8" }],
      ["path", { d: "M18 9h2a2 2 0 0 1 2 2v11l-4-4h-6a2 2 0 0 1-2-2v-1", key: "1cx29u" }]
    ]);
    var MicOff = createLucideIcon("MicOff", [
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }],
      ["path", { d: "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2", key: "80xlxr" }],
      ["path", { d: "M5 10v2a7 7 0 0 0 12 5", key: "p2k8kg" }],
      ["path", { d: "M15 9.34V5a3 3 0 0 0-5.68-1.33", key: "1gzdoj" }],
      ["path", { d: "M9 9v3a3 3 0 0 0 5.12 2.12", key: "r2i35w" }],
      ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
    ]);
    var MicVocal = createLucideIcon("MicVocal", [
      [
        "path",
        {
          d: "m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12",
          key: "80a601"
        }
      ],
      [
        "path",
        {
          d: "M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5",
          key: "j0ngtp"
        }
      ],
      ["circle", { cx: "16", cy: "7", r: "5", key: "d08jfb" }]
    ]);
    var Mic = createLucideIcon("Mic", [
      ["path", { d: "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z", key: "131961" }],
      ["path", { d: "M19 10v2a7 7 0 0 1-14 0v-2", key: "1vc78b" }],
      ["line", { x1: "12", x2: "12", y1: "19", y2: "22", key: "x3vr5v" }]
    ]);
    var Microchip = createLucideIcon("Microchip", [
      ["path", { d: "M18 12h2", key: "quuxs7" }],
      ["path", { d: "M18 16h2", key: "zsn3lv" }],
      ["path", { d: "M18 20h2", key: "9x5y9y" }],
      ["path", { d: "M18 4h2", key: "1luxfb" }],
      ["path", { d: "M18 8h2", key: "nxqzg" }],
      ["path", { d: "M4 12h2", key: "1ltxp0" }],
      ["path", { d: "M4 16h2", key: "8a5zha" }],
      ["path", { d: "M4 20h2", key: "27dk57" }],
      ["path", { d: "M4 4h2", key: "10groj" }],
      ["path", { d: "M4 8h2", key: "18vq6w" }],
      [
        "path",
        {
          d: "M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z",
          key: "1681fp"
        }
      ]
    ]);
    var Microscope = createLucideIcon("Microscope", [
      ["path", { d: "M6 18h8", key: "1borvv" }],
      ["path", { d: "M3 22h18", key: "8prr45" }],
      ["path", { d: "M14 22a7 7 0 1 0 0-14h-1", key: "1jwaiy" }],
      ["path", { d: "M9 14h2", key: "197e7h" }],
      ["path", { d: "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z", key: "1bmzmy" }],
      ["path", { d: "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3", key: "1drr47" }]
    ]);
    var Microwave = createLucideIcon("Microwave", [
      ["rect", { width: "20", height: "15", x: "2", y: "4", rx: "2", key: "2no95f" }],
      ["rect", { width: "8", height: "7", x: "6", y: "8", rx: "1", key: "zh9wx" }],
      ["path", { d: "M18 8v7", key: "o5zi4n" }],
      ["path", { d: "M6 19v2", key: "1loha6" }],
      ["path", { d: "M18 19v2", key: "1dawf0" }]
    ]);
    var Milestone = createLucideIcon("Milestone", [
      ["path", { d: "M12 13v8", key: "1l5pq0" }],
      ["path", { d: "M12 3v3", key: "1n5kay" }],
      [
        "path",
        {
          d: "M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z",
          key: "1btarq"
        }
      ]
    ]);
    var MilkOff = createLucideIcon("MilkOff", [
      ["path", { d: "M8 2h8", key: "1ssgc1" }],
      [
        "path",
        {
          d: "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3",
          key: "y0ejgx"
        }
      ],
      ["path", { d: "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435", key: "iaxqsy" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Milk = createLucideIcon("Milk", [
      ["path", { d: "M8 2h8", key: "1ssgc1" }],
      [
        "path",
        {
          d: "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2",
          key: "qtp12x"
        }
      ],
      ["path", { d: "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0", key: "ygeh44" }]
    ]);
    var Minimize2 = createLucideIcon("Minimize2", [
      ["polyline", { points: "4 14 10 14 10 20", key: "11kfnr" }],
      ["polyline", { points: "20 10 14 10 14 4", key: "rlmsce" }],
      ["line", { x1: "14", x2: "21", y1: "10", y2: "3", key: "o5lafz" }],
      ["line", { x1: "3", x2: "10", y1: "21", y2: "14", key: "1atl0r" }]
    ]);
    var Minimize = createLucideIcon("Minimize", [
      ["path", { d: "M8 3v3a2 2 0 0 1-2 2H3", key: "hohbtr" }],
      ["path", { d: "M21 8h-3a2 2 0 0 1-2-2V3", key: "5jw1f3" }],
      ["path", { d: "M3 16h3a2 2 0 0 1 2 2v3", key: "198tvr" }],
      ["path", { d: "M16 21v-3a2 2 0 0 1 2-2h3", key: "ph8mxp" }]
    ]);
    var Minus = createLucideIcon("Minus", [["path", { d: "M5 12h14", key: "1ays0h" }]]);
    var MonitorCheck = createLucideIcon("MonitorCheck", [
      ["path", { d: "m9 10 2 2 4-4", key: "1gnqz4" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var MonitorCog = createLucideIcon("MonitorCog", [
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "m15.2 4.9-.9-.4", key: "12wd2u" }],
      ["path", { d: "m15.2 7.1-.9.4", key: "1r2vl7" }],
      ["path", { d: "m16.9 3.2-.4-.9", key: "3zbo91" }],
      ["path", { d: "m16.9 8.8-.4.9", key: "1qr2dn" }],
      ["path", { d: "m19.5 2.3-.4.9", key: "1rjrkq" }],
      ["path", { d: "m19.5 9.7-.4-.9", key: "heryx5" }],
      ["path", { d: "m21.7 4.5-.9.4", key: "17fqt1" }],
      ["path", { d: "m21.7 7.5-.9-.4", key: "14zyni" }],
      ["path", { d: "M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7", key: "1tnzv8" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["circle", { cx: "18", cy: "6", r: "3", key: "1h7g24" }]
    ]);
    var MonitorDot = createLucideIcon("MonitorDot", [
      ["circle", { cx: "19", cy: "6", r: "3", key: "108a5v" }],
      ["path", { d: "M22 12v3a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9", key: "1fet9y" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var MonitorDown = createLucideIcon("MonitorDown", [
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      ["path", { d: "m15 10-3 3-3-3", key: "lzhmyn" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var MonitorOff = createLucideIcon("MonitorOff", [
      ["path", { d: "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2", key: "k0q8oc" }],
      ["path", { d: "M22 15V5a2 2 0 0 0-2-2H9", key: "cp1ac0" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var MonitorPause = createLucideIcon("MonitorPause", [
      ["path", { d: "M10 13V7", key: "1u13u9" }],
      ["path", { d: "M14 13V7", key: "1vj9om" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var MonitorPlay = createLucideIcon("MonitorPlay", [
      [
        "path",
        {
          d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z",
          key: "1pctta"
        }
      ],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["rect", { x: "2", y: "3", width: "20", height: "14", rx: "2", key: "x3v2xh" }]
    ]);
    var MonitorSmartphone = createLucideIcon("MonitorSmartphone", [
      ["path", { d: "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8", key: "10dyio" }],
      ["path", { d: "M10 19v-3.96 3.15", key: "1irgej" }],
      ["path", { d: "M7 19h5", key: "qswx4l" }],
      ["rect", { width: "6", height: "10", x: "16", y: "12", rx: "2", key: "1egngj" }]
    ]);
    var MonitorSpeaker = createLucideIcon("MonitorSpeaker", [
      ["path", { d: "M5.5 20H8", key: "1k40s5" }],
      ["path", { d: "M17 9h.01", key: "1j24nn" }],
      ["rect", { width: "10", height: "16", x: "12", y: "4", rx: "2", key: "ixliua" }],
      ["path", { d: "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4", key: "1mp6e1" }],
      ["circle", { cx: "17", cy: "15", r: "1", key: "tqvash" }]
    ]);
    var MonitorStop = createLucideIcon("MonitorStop", [
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["rect", { x: "2", y: "3", width: "20", height: "14", rx: "2", key: "x3v2xh" }],
      ["rect", { x: "9", y: "7", width: "6", height: "6", rx: "1", key: "5m2oou" }]
    ]);
    var MonitorUp = createLucideIcon("MonitorUp", [
      ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }],
      ["path", { d: "M12 13V7", key: "h0r20n" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var MonitorX = createLucideIcon("MonitorX", [
      ["path", { d: "m14.5 12.5-5-5", key: "1jahn5" }],
      ["path", { d: "m9.5 12.5 5-5", key: "1k2t7b" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }]
    ]);
    var Monitor = createLucideIcon("Monitor", [
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
      ["line", { x1: "8", x2: "16", y1: "21", y2: "21", key: "1svkeh" }],
      ["line", { x1: "12", x2: "12", y1: "17", y2: "21", key: "vw1qmm" }]
    ]);
    var MoonStar = createLucideIcon("MoonStar", [
      ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9", key: "4ay0iu" }],
      ["path", { d: "M20 3v4", key: "1olli1" }],
      ["path", { d: "M22 5h-4", key: "1gvqau" }]
    ]);
    var Moon = createLucideIcon("Moon", [
      ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }]
    ]);
    var MountainSnow = createLucideIcon("MountainSnow", [
      ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }],
      [
        "path",
        { d: "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19", key: "1pvmmp" }
      ]
    ]);
    var Mountain = createLucideIcon("Mountain", [
      ["path", { d: "m8 3 4 8 5-5 5 15H2L8 3z", key: "otkl63" }]
    ]);
    var MouseOff = createLucideIcon("MouseOff", [
      ["path", { d: "M12 6v.343", key: "1gyhex" }],
      ["path", { d: "M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218", key: "ukzz01" }],
      ["path", { d: "M19 13.343V9A7 7 0 0 0 8.56 2.902", key: "104jy9" }],
      ["path", { d: "M22 22 2 2", key: "1r8tn9" }]
    ]);
    var MousePointer2 = createLucideIcon("MousePointer2", [
      [
        "path",
        {
          d: "M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z",
          key: "edeuup"
        }
      ]
    ]);
    var MousePointerBan = createLucideIcon("MousePointerBan", [
      [
        "path",
        {
          d: "M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z",
          key: "11pp1i"
        }
      ],
      ["circle", { cx: "16", cy: "16", r: "6", key: "qoo3c4" }],
      ["path", { d: "m11.8 11.8 8.4 8.4", key: "oogvdj" }]
    ]);
    var MousePointerClick = createLucideIcon("MousePointerClick", [
      ["path", { d: "M14 4.1 12 6", key: "ita8i4" }],
      ["path", { d: "m5.1 8-2.9-.8", key: "1go3kf" }],
      ["path", { d: "m6 12-1.9 2", key: "mnht97" }],
      ["path", { d: "M7.2 2.2 8 5.1", key: "1cfko1" }],
      [
        "path",
        {
          d: "M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z",
          key: "s0h3yz"
        }
      ]
    ]);
    var MousePointer = createLucideIcon("MousePointer", [
      ["path", { d: "M12.586 12.586 19 19", key: "ea5xo7" }],
      [
        "path",
        {
          d: "M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z",
          key: "277e5u"
        }
      ]
    ]);
    var Mouse = createLucideIcon("Mouse", [
      ["rect", { x: "5", y: "2", width: "14", height: "20", rx: "7", key: "11ol66" }],
      ["path", { d: "M12 6v4", key: "16clxf" }]
    ]);
    var Move3d = createLucideIcon("Move3d", [
      ["path", { d: "M5 3v16h16", key: "1mqmf9" }],
      ["path", { d: "m5 19 6-6", key: "jh6hbb" }],
      ["path", { d: "m2 6 3-3 3 3", key: "tkyvxa" }],
      ["path", { d: "m18 16 3 3-3 3", key: "1d4glt" }]
    ]);
    var MoveDiagonal2 = createLucideIcon("MoveDiagonal2", [
      ["path", { d: "M19 13v6h-6", key: "1hxl6d" }],
      ["path", { d: "M5 11V5h6", key: "12e2xe" }],
      ["path", { d: "m5 5 14 14", key: "11anup" }]
    ]);
    var MoveDiagonal = createLucideIcon("MoveDiagonal", [
      ["path", { d: "M11 19H5v-6", key: "8awifj" }],
      ["path", { d: "M13 5h6v6", key: "7voy1q" }],
      ["path", { d: "M19 5 5 19", key: "wwaj1z" }]
    ]);
    var MoveDownLeft = createLucideIcon("MoveDownLeft", [
      ["path", { d: "M11 19H5V13", key: "1akmht" }],
      ["path", { d: "M19 5L5 19", key: "72u4yj" }]
    ]);
    var MoveDownRight = createLucideIcon("MoveDownRight", [
      ["path", { d: "M19 13V19H13", key: "10vkzq" }],
      ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
    ]);
    var MoveDown = createLucideIcon("MoveDown", [
      ["path", { d: "M8 18L12 22L16 18", key: "cskvfv" }],
      ["path", { d: "M12 2V22", key: "r89rzk" }]
    ]);
    var MoveHorizontal = createLucideIcon("MoveHorizontal", [
      ["path", { d: "m18 8 4 4-4 4", key: "1ak13k" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "m6 8-4 4 4 4", key: "15zrgr" }]
    ]);
    var MoveLeft = createLucideIcon("MoveLeft", [
      ["path", { d: "M6 8L2 12L6 16", key: "kyvwex" }],
      ["path", { d: "M2 12H22", key: "1m8cig" }]
    ]);
    var MoveRight = createLucideIcon("MoveRight", [
      ["path", { d: "M18 8L22 12L18 16", key: "1r0oui" }],
      ["path", { d: "M2 12H22", key: "1m8cig" }]
    ]);
    var MoveUpLeft = createLucideIcon("MoveUpLeft", [
      ["path", { d: "M5 11V5H11", key: "3q78g9" }],
      ["path", { d: "M5 5L19 19", key: "5zm2fv" }]
    ]);
    var MoveUpRight = createLucideIcon("MoveUpRight", [
      ["path", { d: "M13 5H19V11", key: "1n1gyv" }],
      ["path", { d: "M19 5L5 19", key: "72u4yj" }]
    ]);
    var MoveUp = createLucideIcon("MoveUp", [
      ["path", { d: "M8 6L12 2L16 6", key: "1yvkyx" }],
      ["path", { d: "M12 2V22", key: "r89rzk" }]
    ]);
    var MoveVertical = createLucideIcon("MoveVertical", [
      ["path", { d: "M12 2v20", key: "t6zp3m" }],
      ["path", { d: "m8 18 4 4 4-4", key: "bh5tu3" }],
      ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }]
    ]);
    var Move = createLucideIcon("Move", [
      ["path", { d: "M12 2v20", key: "t6zp3m" }],
      ["path", { d: "m15 19-3 3-3-3", key: "11eu04" }],
      ["path", { d: "m19 9 3 3-3 3", key: "1mg7y2" }],
      ["path", { d: "M2 12h20", key: "9i4pu4" }],
      ["path", { d: "m5 9-3 3 3 3", key: "j64kie" }],
      ["path", { d: "m9 5 3-3 3 3", key: "l8vdw6" }]
    ]);
    var Music2 = createLucideIcon("Music2", [
      ["circle", { cx: "8", cy: "18", r: "4", key: "1fc0mg" }],
      ["path", { d: "M12 18V2l7 4", key: "g04rme" }]
    ]);
    var Music3 = createLucideIcon("Music3", [
      ["circle", { cx: "12", cy: "18", r: "4", key: "m3r9ws" }],
      ["path", { d: "M16 18V2", key: "40x2m5" }]
    ]);
    var Music4 = createLucideIcon("Music4", [
      ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
      ["path", { d: "m9 9 12-2", key: "1e64n2" }],
      ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
      ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
    ]);
    var Music = createLucideIcon("Music", [
      ["path", { d: "M9 18V5l12-2v13", key: "1jmyc2" }],
      ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
      ["circle", { cx: "18", cy: "16", r: "3", key: "1hluhg" }]
    ]);
    var Navigation2Off = createLucideIcon("Navigation2Off", [
      ["path", { d: "M9.31 9.31 5 21l7-4 7 4-1.17-3.17", key: "qoq2o2" }],
      ["path", { d: "M14.53 8.88 12 2l-1.17 3.17", key: "k3sjzy" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Navigation2 = createLucideIcon("Navigation2", [
      ["polygon", { points: "12 2 19 21 12 17 5 21 12 2", key: "x8c0qg" }]
    ]);
    var NavigationOff = createLucideIcon("NavigationOff", [
      ["path", { d: "M8.43 8.43 3 11l8 2 2 8 2.57-5.43", key: "1vdtb7" }],
      ["path", { d: "M17.39 11.73 22 2l-9.73 4.61", key: "tya3r6" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Navigation = createLucideIcon("Navigation", [
      ["polygon", { points: "3 11 22 2 13 21 11 13 3 11", key: "1ltx0t" }]
    ]);
    var Network = createLucideIcon("Network", [
      ["rect", { x: "16", y: "16", width: "6", height: "6", rx: "1", key: "4q2zg0" }],
      ["rect", { x: "2", y: "16", width: "6", height: "6", rx: "1", key: "8cvhb9" }],
      ["rect", { x: "9", y: "2", width: "6", height: "6", rx: "1", key: "1egb70" }],
      ["path", { d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3", key: "1jsf9p" }],
      ["path", { d: "M12 12V8", key: "2874zd" }]
    ]);
    var Newspaper = createLucideIcon("Newspaper", [
      [
        "path",
        {
          d: "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2",
          key: "7pis2x"
        }
      ],
      ["path", { d: "M18 14h-8", key: "sponae" }],
      ["path", { d: "M15 18h-5", key: "95g1m2" }],
      ["path", { d: "M10 6h8v4h-8V6Z", key: "smlsk5" }]
    ]);
    var Nfc = createLucideIcon("Nfc", [
      ["path", { d: "M6 8.32a7.43 7.43 0 0 1 0 7.36", key: "9iaqei" }],
      ["path", { d: "M9.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "1yha7l" }],
      ["path", { d: "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "4iu2gk" }],
      ["path", { d: "M16.37 2a20.16 20.16 0 0 1 0 20", key: "sap9u2" }]
    ]);
    var NotebookPen = createLucideIcon("NotebookPen", [
      ["path", { d: "M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4", key: "re6nr2" }],
      ["path", { d: "M2 6h4", key: "aawbzj" }],
      ["path", { d: "M2 10h4", key: "l0bgd4" }],
      ["path", { d: "M2 14h4", key: "1gsvsf" }],
      ["path", { d: "M2 18h4", key: "1bu2t1" }],
      [
        "path",
        {
          d: "M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "pqwjuv"
        }
      ]
    ]);
    var NotebookTabs = createLucideIcon("NotebookTabs", [
      ["path", { d: "M2 6h4", key: "aawbzj" }],
      ["path", { d: "M2 10h4", key: "l0bgd4" }],
      ["path", { d: "M2 14h4", key: "1gsvsf" }],
      ["path", { d: "M2 18h4", key: "1bu2t1" }],
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
      ["path", { d: "M15 2v20", key: "dcj49h" }],
      ["path", { d: "M15 7h5", key: "1xj5lc" }],
      ["path", { d: "M15 12h5", key: "w5shd9" }],
      ["path", { d: "M15 17h5", key: "1qaofu" }]
    ]);
    var NotebookText = createLucideIcon("NotebookText", [
      ["path", { d: "M2 6h4", key: "aawbzj" }],
      ["path", { d: "M2 10h4", key: "l0bgd4" }],
      ["path", { d: "M2 14h4", key: "1gsvsf" }],
      ["path", { d: "M2 18h4", key: "1bu2t1" }],
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
      ["path", { d: "M9.5 8h5", key: "11mslq" }],
      ["path", { d: "M9.5 12H16", key: "ktog6x" }],
      ["path", { d: "M9.5 16H14", key: "p1seyn" }]
    ]);
    var Notebook = createLucideIcon("Notebook", [
      ["path", { d: "M2 6h4", key: "aawbzj" }],
      ["path", { d: "M2 10h4", key: "l0bgd4" }],
      ["path", { d: "M2 14h4", key: "1gsvsf" }],
      ["path", { d: "M2 18h4", key: "1bu2t1" }],
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
      ["path", { d: "M16 2v20", key: "rotuqe" }]
    ]);
    var NotepadTextDashed = createLucideIcon("NotepadTextDashed", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M12 2v4", key: "3427ic" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["path", { d: "M16 4h2a2 2 0 0 1 2 2v2", key: "j91f56" }],
      ["path", { d: "M20 12v2", key: "w8o0tu" }],
      ["path", { d: "M20 18v2a2 2 0 0 1-2 2h-1", key: "1c9ggx" }],
      ["path", { d: "M13 22h-2", key: "191ugt" }],
      ["path", { d: "M7 22H6a2 2 0 0 1-2-2v-2", key: "1rt9px" }],
      ["path", { d: "M4 14v-2", key: "1v0sqh" }],
      ["path", { d: "M4 8V6a2 2 0 0 1 2-2h2", key: "1mwabg" }],
      ["path", { d: "M8 10h6", key: "3oa6kw" }],
      ["path", { d: "M8 14h8", key: "1fgep2" }],
      ["path", { d: "M8 18h5", key: "17enja" }]
    ]);
    var NotepadText = createLucideIcon("NotepadText", [
      ["path", { d: "M8 2v4", key: "1cmpym" }],
      ["path", { d: "M12 2v4", key: "3427ic" }],
      ["path", { d: "M16 2v4", key: "4m81vk" }],
      ["rect", { width: "16", height: "18", x: "4", y: "4", rx: "2", key: "1u9h20" }],
      ["path", { d: "M8 10h6", key: "3oa6kw" }],
      ["path", { d: "M8 14h8", key: "1fgep2" }],
      ["path", { d: "M8 18h5", key: "17enja" }]
    ]);
    var NutOff = createLucideIcon("NutOff", [
      ["path", { d: "M12 4V2", key: "1k5q1u" }],
      [
        "path",
        {
          d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939",
          key: "1xcvy9"
        }
      ],
      ["path", { d: "M19 10v3.343", key: "163tfc" }],
      [
        "path",
        {
          d: "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192",
          key: "17914v"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Nut = createLucideIcon("Nut", [
      ["path", { d: "M12 4V2", key: "1k5q1u" }],
      [
        "path",
        {
          d: "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4",
          key: "1tgyif"
        }
      ],
      [
        "path",
        {
          d: "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z",
          key: "tnsqj"
        }
      ]
    ]);
    var OctagonAlert = createLucideIcon("OctagonAlert", [
      ["path", { d: "M12 16h.01", key: "1drbdi" }],
      ["path", { d: "M12 8v4", key: "1got3b" }],
      [
        "path",
        {
          d: "M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z",
          key: "1fd625"
        }
      ]
    ]);
    var OctagonMinus = createLucideIcon("OctagonMinus", [
      [
        "path",
        {
          d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
          key: "2d38gg"
        }
      ],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var OctagonPause = createLucideIcon("OctagonPause", [
      ["path", { d: "M10 15V9", key: "1lckn7" }],
      ["path", { d: "M14 15V9", key: "1muqhk" }],
      [
        "path",
        {
          d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
          key: "2d38gg"
        }
      ]
    ]);
    var OctagonX = createLucideIcon("OctagonX", [
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      [
        "path",
        {
          d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
          key: "2d38gg"
        }
      ],
      ["path", { d: "m9 9 6 6", key: "z0biqf" }]
    ]);
    var Octagon = createLucideIcon("Octagon", [
      [
        "path",
        {
          d: "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z",
          key: "2d38gg"
        }
      ]
    ]);
    var Omega = createLucideIcon("Omega", [
      [
        "path",
        {
          d: "M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21",
          key: "1x94xo"
        }
      ]
    ]);
    var Option = createLucideIcon("Option", [
      ["path", { d: "M3 3h6l6 18h6", key: "ph9rgk" }],
      ["path", { d: "M14 3h7", key: "16f0ms" }]
    ]);
    var Orbit = createLucideIcon("Orbit", [
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
      ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
      ["path", { d: "M10.4 21.9a10 10 0 0 0 9.941-15.416", key: "eohfx2" }],
      ["path", { d: "M13.5 2.1a10 10 0 0 0-9.841 15.416", key: "19pvbm" }]
    ]);
    var Origami = createLucideIcon("Origami", [
      ["path", { d: "M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025", key: "1bx4vc" }],
      [
        "path",
        {
          d: "m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009",
          key: "1h3km6"
        }
      ],
      [
        "path",
        {
          d: "m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027",
          key: "1hj4wg"
        }
      ]
    ]);
    var Package2 = createLucideIcon("Package2", [
      ["path", { d: "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z", key: "1ront0" }],
      ["path", { d: "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9", key: "19h2x1" }],
      ["path", { d: "M12 3v6", key: "1holv5" }]
    ]);
    var PackageCheck = createLucideIcon("PackageCheck", [
      ["path", { d: "m16 16 2 2 4-4", key: "gfu2re" }],
      [
        "path",
        {
          d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
          key: "e7tb2h"
        }
      ],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
      ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
    ]);
    var PackageMinus = createLucideIcon("PackageMinus", [
      ["path", { d: "M16 16h6", key: "100bgy" }],
      [
        "path",
        {
          d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
          key: "e7tb2h"
        }
      ],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
      ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
    ]);
    var PackageOpen = createLucideIcon("PackageOpen", [
      ["path", { d: "M12 22v-9", key: "x3hkom" }],
      [
        "path",
        {
          d: "M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z",
          key: "2ntwy6"
        }
      ],
      [
        "path",
        {
          d: "M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13",
          key: "1pmm1c"
        }
      ],
      [
        "path",
        {
          d: "M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z",
          key: "12ttoo"
        }
      ]
    ]);
    var PackagePlus = createLucideIcon("PackagePlus", [
      ["path", { d: "M16 16h6", key: "100bgy" }],
      ["path", { d: "M19 13v6", key: "85cyf1" }],
      [
        "path",
        {
          d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
          key: "e7tb2h"
        }
      ],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
      ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }]
    ]);
    var PackageSearch = createLucideIcon("PackageSearch", [
      [
        "path",
        {
          d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
          key: "e7tb2h"
        }
      ],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
      ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
      ["circle", { cx: "18.5", cy: "15.5", r: "2.5", key: "b5zd12" }],
      ["path", { d: "M20.27 17.27 22 19", key: "1l4muz" }]
    ]);
    var PackageX = createLucideIcon("PackageX", [
      [
        "path",
        {
          d: "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14",
          key: "e7tb2h"
        }
      ],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }],
      ["polyline", { points: "3.29 7 12 12 20.71 7", key: "ousv84" }],
      ["line", { x1: "12", x2: "12", y1: "22", y2: "12", key: "a4e8g8" }],
      ["path", { d: "m17 13 5 5m-5 0 5-5", key: "im3w4b" }]
    ]);
    var Package = createLucideIcon("Package", [
      [
        "path",
        {
          d: "M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z",
          key: "1a0edw"
        }
      ],
      ["path", { d: "M12 22V12", key: "d0xqtd" }],
      ["path", { d: "m3.3 7 7.703 4.734a2 2 0 0 0 1.994 0L20.7 7", key: "yx3hmr" }],
      ["path", { d: "m7.5 4.27 9 5.15", key: "1c824w" }]
    ]);
    var PaintBucket = createLucideIcon("PaintBucket", [
      [
        "path",
        { d: "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z", key: "irua1i" }
      ],
      ["path", { d: "m5 2 5 5", key: "1lls2c" }],
      ["path", { d: "M2 13h15", key: "1hkzvu" }],
      ["path", { d: "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z", key: "xk76lq" }]
    ]);
    var PaintRoller = createLucideIcon("PaintRoller", [
      ["rect", { width: "16", height: "6", x: "2", y: "2", rx: "2", key: "jcyz7m" }],
      ["path", { d: "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2", key: "1b9h7c" }],
      ["rect", { width: "4", height: "6", x: "8", y: "16", rx: "1", key: "d6e7yl" }]
    ]);
    var PaintbrushVertical = createLucideIcon("PaintbrushVertical", [
      ["path", { d: "M10 2v2", key: "7u0qdc" }],
      ["path", { d: "M14 2v4", key: "qmzblu" }],
      ["path", { d: "M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z", key: "ycvu00" }],
      [
        "path",
        {
          d: "M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1",
          key: "iw4wnp"
        }
      ]
    ]);
    var Paintbrush = createLucideIcon("Paintbrush", [
      ["path", { d: "m14.622 17.897-10.68-2.913", key: "vj2p1u" }],
      [
        "path",
        {
          d: "M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z",
          key: "18tc5c"
        }
      ],
      [
        "path",
        {
          d: "M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15",
          key: "ytzfxy"
        }
      ]
    ]);
    var Palette = createLucideIcon("Palette", [
      ["circle", { cx: "13.5", cy: "6.5", r: ".5", fill: "currentColor", key: "1okk4w" }],
      ["circle", { cx: "17.5", cy: "10.5", r: ".5", fill: "currentColor", key: "f64h9f" }],
      ["circle", { cx: "8.5", cy: "7.5", r: ".5", fill: "currentColor", key: "fotxhn" }],
      ["circle", { cx: "6.5", cy: "12.5", r: ".5", fill: "currentColor", key: "qy21gx" }],
      [
        "path",
        {
          d: "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z",
          key: "12rzf8"
        }
      ]
    ]);
    var PanelBottomClose = createLucideIcon("PanelBottomClose", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "m15 8-3 3-3-3", key: "1oxy1z" }]
    ]);
    var PanelBottomDashed = createLucideIcon("PanelBottomDashed", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M14 15h1", key: "171nev" }],
      ["path", { d: "M19 15h2", key: "1vnucp" }],
      ["path", { d: "M3 15h2", key: "8bym0q" }],
      ["path", { d: "M9 15h1", key: "1tg3ks" }]
    ]);
    var PanelBottomOpen = createLucideIcon("PanelBottomOpen", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "m9 10 3-3 3 3", key: "11gsxs" }]
    ]);
    var PanelBottom = createLucideIcon("PanelBottom", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 15h18", key: "5xshup" }]
    ]);
    var PanelLeftClose = createLucideIcon("PanelLeftClose", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }],
      ["path", { d: "m16 15-3-3 3-3", key: "14y99z" }]
    ]);
    var PanelLeftDashed = createLucideIcon("PanelLeftDashed", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 14v1", key: "askpd8" }],
      ["path", { d: "M9 19v2", key: "16tejx" }],
      ["path", { d: "M9 3v2", key: "1noubl" }],
      ["path", { d: "M9 9v1", key: "19ebxg" }]
    ]);
    var PanelLeftOpen = createLucideIcon("PanelLeftOpen", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }],
      ["path", { d: "m14 9 3 3-3 3", key: "8010ee" }]
    ]);
    var PanelLeft = createLucideIcon("PanelLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }]
    ]);
    var PanelRightClose = createLucideIcon("PanelRightClose", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }],
      ["path", { d: "m8 9 3 3-3 3", key: "12hl5m" }]
    ]);
    var PanelRightDashed = createLucideIcon("PanelRightDashed", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M15 14v1", key: "ilsfch" }],
      ["path", { d: "M15 19v2", key: "1fst2f" }],
      ["path", { d: "M15 3v2", key: "z204g4" }],
      ["path", { d: "M15 9v1", key: "z2a8b1" }]
    ]);
    var PanelRightOpen = createLucideIcon("PanelRightOpen", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }],
      ["path", { d: "m10 15-3-3 3-3", key: "1pgupc" }]
    ]);
    var PanelRight = createLucideIcon("PanelRight", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }]
    ]);
    var PanelTopClose = createLucideIcon("PanelTopClose", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "m9 16 3-3 3 3", key: "1idcnm" }]
    ]);
    var PanelTopDashed = createLucideIcon("PanelTopDashed", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M14 9h1", key: "l0svgy" }],
      ["path", { d: "M19 9h2", key: "te2zfg" }],
      ["path", { d: "M3 9h2", key: "1h4ldw" }],
      ["path", { d: "M9 9h1", key: "15jzuz" }]
    ]);
    var PanelTopOpen = createLucideIcon("PanelTopOpen", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "m15 14-3 3-3-3", key: "g215vf" }]
    ]);
    var PanelTop = createLucideIcon("PanelTop", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }]
    ]);
    var PanelsLeftBottom = createLucideIcon("PanelsLeftBottom", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 3v18", key: "fh3hqa" }],
      ["path", { d: "M9 15h12", key: "5ijen5" }]
    ]);
    var PanelsRightBottom = createLucideIcon("PanelsRightBottom", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 15h12", key: "1wkqb3" }],
      ["path", { d: "M15 3v18", key: "14nvp0" }]
    ]);
    var PanelsTopLeft = createLucideIcon("PanelsTopLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "M9 21V9", key: "1oto5p" }]
    ]);
    var Paperclip = createLucideIcon("Paperclip", [
      [
        "path",
        {
          d: "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48",
          key: "1u3ebp"
        }
      ]
    ]);
    var Parentheses = createLucideIcon("Parentheses", [
      ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
      ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }]
    ]);
    var ParkingMeter = createLucideIcon("ParkingMeter", [
      ["path", { d: "M11 15h2", key: "199qp6" }],
      ["path", { d: "M12 12v3", key: "158kv8" }],
      ["path", { d: "M12 19v3", key: "npa21l" }],
      [
        "path",
        {
          d: "M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z",
          key: "1jofit"
        }
      ],
      ["path", { d: "M9 9a3 3 0 1 1 6 0", key: "jdoeu8" }]
    ]);
    var PartyPopper = createLucideIcon("PartyPopper", [
      ["path", { d: "M5.8 11.3 2 22l10.7-3.79", key: "gwxi1d" }],
      ["path", { d: "M4 3h.01", key: "1vcuye" }],
      ["path", { d: "M22 8h.01", key: "1mrtc2" }],
      ["path", { d: "M15 2h.01", key: "1cjtqr" }],
      ["path", { d: "M22 20h.01", key: "1mrys2" }],
      [
        "path",
        {
          d: "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10",
          key: "hbicv8"
        }
      ],
      [
        "path",
        { d: "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17", key: "1i94pl" }
      ],
      ["path", { d: "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7", key: "1cofks" }],
      [
        "path",
        {
          d: "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z",
          key: "4kbmks"
        }
      ]
    ]);
    var Pause = createLucideIcon("Pause", [
      ["rect", { x: "14", y: "4", width: "4", height: "16", rx: "1", key: "zuxfzm" }],
      ["rect", { x: "6", y: "4", width: "4", height: "16", rx: "1", key: "1okwgv" }]
    ]);
    var PawPrint = createLucideIcon("PawPrint", [
      ["circle", { cx: "11", cy: "4", r: "2", key: "vol9p0" }],
      ["circle", { cx: "18", cy: "8", r: "2", key: "17gozi" }],
      ["circle", { cx: "20", cy: "16", r: "2", key: "1v9bxh" }],
      [
        "path",
        {
          d: "M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z",
          key: "1ydw1z"
        }
      ]
    ]);
    var PcCase = createLucideIcon("PcCase", [
      ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", key: "1uq1d7" }],
      ["path", { d: "M15 14h.01", key: "1kp3bh" }],
      ["path", { d: "M9 6h6", key: "dgm16u" }],
      ["path", { d: "M9 10h6", key: "9gxzsh" }]
    ]);
    var PenLine = createLucideIcon("PenLine", [
      ["path", { d: "M12 20h9", key: "t2du7b" }],
      [
        "path",
        {
          d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z",
          key: "1ykcvy"
        }
      ]
    ]);
    var PenOff = createLucideIcon("PenOff", [
      [
        "path",
        {
          d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982",
          key: "bjo8r8"
        }
      ],
      ["path", { d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353", key: "16h5ne" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var PenTool = createLucideIcon("PenTool", [
      [
        "path",
        {
          d: "M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z",
          key: "nt11vn"
        }
      ],
      [
        "path",
        {
          d: "m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18",
          key: "15qc1e"
        }
      ],
      ["path", { d: "m2.3 2.3 7.286 7.286", key: "1wuzzi" }],
      ["circle", { cx: "11", cy: "11", r: "2", key: "xmgehs" }]
    ]);
    var Pen = createLucideIcon("Pen", [
      [
        "path",
        {
          d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
          key: "1a8usu"
        }
      ]
    ]);
    var PencilLine = createLucideIcon("PencilLine", [
      ["path", { d: "M12 20h9", key: "t2du7b" }],
      [
        "path",
        {
          d: "M16.376 3.622a1 1 0 0 1 3.002 3.002L7.368 18.635a2 2 0 0 1-.855.506l-2.872.838a.5.5 0 0 1-.62-.62l.838-2.872a2 2 0 0 1 .506-.854z",
          key: "1ykcvy"
        }
      ],
      ["path", { d: "m15 5 3 3", key: "1w25hb" }]
    ]);
    var PencilOff = createLucideIcon("PencilOff", [
      [
        "path",
        {
          d: "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982",
          key: "bjo8r8"
        }
      ],
      ["path", { d: "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353", key: "16h5ne" }],
      ["path", { d: "m15 5 4 4", key: "1mk7zo" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var PencilRuler = createLucideIcon("PencilRuler", [
      [
        "path",
        { d: "M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13", key: "orapub" }
      ],
      ["path", { d: "m8 6 2-2", key: "115y1s" }],
      ["path", { d: "m18 16 2-2", key: "ee94s4" }],
      [
        "path",
        {
          d: "m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17",
          key: "cfq27r"
        }
      ],
      [
        "path",
        {
          d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
          key: "1a8usu"
        }
      ],
      ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
    ]);
    var Pencil = createLucideIcon("Pencil", [
      [
        "path",
        {
          d: "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z",
          key: "1a8usu"
        }
      ],
      ["path", { d: "m15 5 4 4", key: "1mk7zo" }]
    ]);
    var Pentagon = createLucideIcon("Pentagon", [
      [
        "path",
        {
          d: "M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z",
          key: "2hea0t"
        }
      ]
    ]);
    var Percent = createLucideIcon("Percent", [
      ["line", { x1: "19", x2: "5", y1: "5", y2: "19", key: "1x9vlm" }],
      ["circle", { cx: "6.5", cy: "6.5", r: "2.5", key: "4mh3h7" }],
      ["circle", { cx: "17.5", cy: "17.5", r: "2.5", key: "1mdrzq" }]
    ]);
    var PersonStanding = createLucideIcon("PersonStanding", [
      ["circle", { cx: "12", cy: "5", r: "1", key: "gxeob9" }],
      ["path", { d: "m9 20 3-6 3 6", key: "se2kox" }],
      ["path", { d: "m6 8 6 2 6-2", key: "4o3us4" }],
      ["path", { d: "M12 10v4", key: "1kjpxc" }]
    ]);
    var PhilippinePeso = createLucideIcon("PhilippinePeso", [
      ["path", { d: "M20 11H4", key: "6ut86h" }],
      ["path", { d: "M20 7H4", key: "zbl0bi" }],
      ["path", { d: "M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7", key: "1ana5r" }]
    ]);
    var PhoneCall = createLucideIcon("PhoneCall", [
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ],
      ["path", { d: "M14.05 2a9 9 0 0 1 8 7.94", key: "vmijpz" }],
      ["path", { d: "M14.05 6A5 5 0 0 1 18 10", key: "13nbpp" }]
    ]);
    var PhoneForwarded = createLucideIcon("PhoneForwarded", [
      ["polyline", { points: "18 2 22 6 18 10", key: "6vjanh" }],
      ["line", { x1: "14", x2: "22", y1: "6", y2: "6", key: "1jsywh" }],
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ]
    ]);
    var PhoneIncoming = createLucideIcon("PhoneIncoming", [
      ["polyline", { points: "16 2 16 8 22 8", key: "1ygljm" }],
      ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ]
    ]);
    var PhoneMissed = createLucideIcon("PhoneMissed", [
      ["line", { x1: "22", x2: "16", y1: "2", y2: "8", key: "1xzwqn" }],
      ["line", { x1: "16", x2: "22", y1: "2", y2: "8", key: "13zxdn" }],
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ]
    ]);
    var PhoneOff = createLucideIcon("PhoneOff", [
      [
        "path",
        {
          d: "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91",
          key: "z86iuo"
        }
      ],
      ["line", { x1: "22", x2: "2", y1: "2", y2: "22", key: "11kh81" }]
    ]);
    var PhoneOutgoing = createLucideIcon("PhoneOutgoing", [
      ["polyline", { points: "22 8 22 2 16 2", key: "1g204g" }],
      ["line", { x1: "16", x2: "22", y1: "8", y2: "2", key: "1ggias" }],
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ]
    ]);
    var Phone = createLucideIcon("Phone", [
      [
        "path",
        {
          d: "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z",
          key: "foiqr5"
        }
      ]
    ]);
    var Pi = createLucideIcon("Pi", [
      ["line", { x1: "9", x2: "9", y1: "4", y2: "20", key: "ovs5a5" }],
      ["path", { d: "M4 7c0-1.7 1.3-3 3-3h13", key: "10pag4" }],
      ["path", { d: "M18 20c-1.7 0-3-1.3-3-3V4", key: "1gaosr" }]
    ]);
    var Piano = createLucideIcon("Piano", [
      [
        "path",
        {
          d: "M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8",
          key: "lag0yf"
        }
      ],
      ["path", { d: "M2 14h20", key: "myj16y" }],
      ["path", { d: "M6 14v4", key: "9ng0ue" }],
      ["path", { d: "M10 14v4", key: "1v8uk5" }],
      ["path", { d: "M14 14v4", key: "1tqops" }],
      ["path", { d: "M18 14v4", key: "18uqwm" }]
    ]);
    var Pickaxe = createLucideIcon("Pickaxe", [
      ["path", { d: "M14.531 12.469 6.619 20.38a1 1 0 1 1-3-3l7.912-7.912", key: "we99rg" }],
      [
        "path",
        {
          d: "M15.686 4.314A12.5 12.5 0 0 0 5.461 2.958 1 1 0 0 0 5.58 4.71a22 22 0 0 1 6.318 3.393",
          key: "1w6hck"
        }
      ],
      [
        "path",
        {
          d: "M17.7 3.7a1 1 0 0 0-1.4 0l-4.6 4.6a1 1 0 0 0 0 1.4l2.6 2.6a1 1 0 0 0 1.4 0l4.6-4.6a1 1 0 0 0 0-1.4z",
          key: "15hgfx"
        }
      ],
      [
        "path",
        {
          d: "M19.686 8.314a12.501 12.501 0 0 1 1.356 10.225 1 1 0 0 1-1.751-.119 22 22 0 0 0-3.393-6.319",
          key: "452b4h"
        }
      ]
    ]);
    var PictureInPicture2 = createLucideIcon("PictureInPicture2", [
      ["path", { d: "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4", key: "daa4of" }],
      ["rect", { width: "10", height: "7", x: "12", y: "13", rx: "2", key: "1nb8gs" }]
    ]);
    var PictureInPicture = createLucideIcon("PictureInPicture", [
      [
        "path",
        {
          d: "M8 4.5v5H3m-1-6 6 6m13 0v-3c0-1.16-.84-2-2-2h-7m-9 9v2c0 1.05.95 2 2 2h3",
          key: "bcd8fb"
        }
      ],
      ["rect", { width: "10", height: "7", x: "12", y: "13.5", ry: "2", key: "136fx3" }]
    ]);
    var PiggyBank = createLucideIcon("PiggyBank", [
      [
        "path",
        {
          d: "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2V5z",
          key: "1ivx2i"
        }
      ],
      ["path", { d: "M2 9v1c0 1.1.9 2 2 2h1", key: "nm575m" }],
      ["path", { d: "M16 11h.01", key: "xkw8gn" }]
    ]);
    var PilcrowLeft = createLucideIcon("PilcrowLeft", [
      ["path", { d: "M14 3v11", key: "mlfb7b" }],
      ["path", { d: "M14 9h-3a3 3 0 0 1 0-6h9", key: "1ulc19" }],
      ["path", { d: "M18 3v11", key: "1phi0r" }],
      ["path", { d: "M22 18H2l4-4", key: "yt65j9" }],
      ["path", { d: "m6 22-4-4", key: "6jgyf5" }]
    ]);
    var PilcrowRight = createLucideIcon("PilcrowRight", [
      ["path", { d: "M10 3v11", key: "o3l5kj" }],
      ["path", { d: "M10 9H7a1 1 0 0 1 0-6h8", key: "1wb1nc" }],
      ["path", { d: "M14 3v11", key: "mlfb7b" }],
      ["path", { d: "m18 14 4 4H2", key: "4r8io1" }],
      ["path", { d: "m22 18-4 4", key: "1hjjrd" }]
    ]);
    var Pilcrow = createLucideIcon("Pilcrow", [
      ["path", { d: "M13 4v16", key: "8vvj80" }],
      ["path", { d: "M17 4v16", key: "7dpous" }],
      ["path", { d: "M19 4H9.5a4.5 4.5 0 0 0 0 9H13", key: "sh4n9v" }]
    ]);
    var PillBottle = createLucideIcon("PillBottle", [
      ["path", { d: "M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4", key: "17ldeb" }],
      ["path", { d: "M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7", key: "nc37y6" }],
      ["rect", { width: "16", height: "5", x: "4", y: "2", rx: "1", key: "3jeezo" }]
    ]);
    var Pill = createLucideIcon("Pill", [
      [
        "path",
        { d: "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z", key: "wa1lgi" }
      ],
      ["path", { d: "m8.5 8.5 7 7", key: "rvfmvr" }]
    ]);
    var PinOff = createLucideIcon("PinOff", [
      ["path", { d: "M12 17v5", key: "bb1du9" }],
      ["path", { d: "M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89", key: "znwnzq" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      [
        "path",
        {
          d: "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11",
          key: "c9qhm2"
        }
      ]
    ]);
    var Pin = createLucideIcon("Pin", [
      ["path", { d: "M12 17v5", key: "bb1du9" }],
      [
        "path",
        {
          d: "M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z",
          key: "1nkz8b"
        }
      ]
    ]);
    var Pipette = createLucideIcon("Pipette", [
      ["path", { d: "m2 22 1-1h3l9-9", key: "1sre89" }],
      ["path", { d: "M3 21v-3l9-9", key: "hpe2y6" }],
      [
        "path",
        {
          d: "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z",
          key: "196du1"
        }
      ]
    ]);
    var Pizza = createLucideIcon("Pizza", [
      ["path", { d: "m12 14-1 1", key: "11onhr" }],
      ["path", { d: "m13.75 18.25-1.25 1.42", key: "1yisr3" }],
      ["path", { d: "M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12", key: "1qtqk6" }],
      ["path", { d: "M18.8 9.3a1 1 0 0 0 2.1 7.7", key: "fbbbr2" }],
      [
        "path",
        {
          d: "M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z",
          key: "1hyfdd"
        }
      ]
    ]);
    var PlaneLanding = createLucideIcon("PlaneLanding", [
      ["path", { d: "M2 22h20", key: "272qi7" }],
      [
        "path",
        {
          d: "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z",
          key: "1ma21e"
        }
      ]
    ]);
    var PlaneTakeoff = createLucideIcon("PlaneTakeoff", [
      ["path", { d: "M2 22h20", key: "272qi7" }],
      [
        "path",
        {
          d: "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z",
          key: "fkigj9"
        }
      ]
    ]);
    var Plane = createLucideIcon("Plane", [
      [
        "path",
        {
          d: "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z",
          key: "1v9wt8"
        }
      ]
    ]);
    var Play = createLucideIcon("Play", [
      ["polygon", { points: "6 3 20 12 6 21 6 3", key: "1oa8hb" }]
    ]);
    var Plug2 = createLucideIcon("Plug2", [
      ["path", { d: "M9 2v6", key: "17ngun" }],
      ["path", { d: "M15 2v6", key: "s7yy2p" }],
      ["path", { d: "M12 17v5", key: "bb1du9" }],
      ["path", { d: "M5 8h14", key: "pcz4l3" }],
      ["path", { d: "M6 11V8h12v3a6 6 0 1 1-12 0Z", key: "wtfw2c" }]
    ]);
    var PlugZap = createLucideIcon("PlugZap", [
      [
        "path",
        { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
      ],
      ["path", { d: "m2 22 3-3", key: "19mgm9" }],
      ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
      ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
      ["path", { d: "m18 3-4 4h6l-4 4", key: "16psg9" }]
    ]);
    var Plug = createLucideIcon("Plug", [
      ["path", { d: "M12 22v-5", key: "1ega77" }],
      ["path", { d: "M9 8V2", key: "14iosj" }],
      ["path", { d: "M15 8V2", key: "18g5xt" }],
      ["path", { d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z", key: "osxo6l" }]
    ]);
    var Plus = createLucideIcon("Plus", [
      ["path", { d: "M5 12h14", key: "1ays0h" }],
      ["path", { d: "M12 5v14", key: "s699le" }]
    ]);
    var PocketKnife = createLucideIcon("PocketKnife", [
      ["path", { d: "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2", key: "19w3oe" }],
      ["path", { d: "M18 6h.01", key: "1v4wsw" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z", key: "6fykxj" }],
      ["path", { d: "M18 11.66V22a4 4 0 0 0 4-4V6", key: "1utzek" }]
    ]);
    var Pocket = createLucideIcon("Pocket", [
      [
        "path",
        {
          d: "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z",
          key: "1mz881"
        }
      ],
      ["polyline", { points: "8 10 12 14 16 10", key: "w4mbv5" }]
    ]);
    var Podcast = createLucideIcon("Podcast", [
      ["path", { d: "M16.85 18.58a9 9 0 1 0-9.7 0", key: "d71mpg" }],
      ["path", { d: "M8 14a5 5 0 1 1 8 0", key: "fc81rn" }],
      ["circle", { cx: "12", cy: "11", r: "1", key: "1gvufo" }],
      ["path", { d: "M13 17a1 1 0 1 0-2 0l.5 4.5a.5.5 0 1 0 1 0Z", key: "za5kbj" }]
    ]);
    var PointerOff = createLucideIcon("PointerOff", [
      ["path", { d: "M10 4.5V4a2 2 0 0 0-2.41-1.957", key: "jsi14n" }],
      ["path", { d: "M13.9 8.4a2 2 0 0 0-1.26-1.295", key: "hirc7f" }],
      [
        "path",
        { d: "M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158", key: "1jxb2e" }
      ],
      [
        "path",
        {
          d: "m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343",
          key: "10r7hm"
        }
      ],
      ["path", { d: "M6 6v8", key: "tv5xkp" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Pointer = createLucideIcon("Pointer", [
      ["path", { d: "M22 14a8 8 0 0 1-8 8", key: "56vcr3" }],
      ["path", { d: "M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2", key: "1agjmk" }],
      ["path", { d: "M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1", key: "wdbh2u" }],
      ["path", { d: "M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10", key: "1ibuk9" }],
      [
        "path",
        {
          d: "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15",
          key: "g6ys72"
        }
      ]
    ]);
    var Popcorn = createLucideIcon("Popcorn", [
      [
        "path",
        {
          d: "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4",
          key: "10td1f"
        }
      ],
      ["path", { d: "M10 22 9 8", key: "yjptiv" }],
      ["path", { d: "m14 22 1-14", key: "8jwc8b" }],
      [
        "path",
        {
          d: "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z",
          key: "1qo33t"
        }
      ]
    ]);
    var Popsicle = createLucideIcon("Popsicle", [
      [
        "path",
        {
          d: "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z",
          key: "1o68ps"
        }
      ],
      ["path", { d: "m22 22-5.5-5.5", key: "17o70y" }]
    ]);
    var PoundSterling = createLucideIcon("PoundSterling", [
      ["path", { d: "M18 7c0-5.333-8-5.333-8 0", key: "1prm2n" }],
      ["path", { d: "M10 7v14", key: "18tmcs" }],
      ["path", { d: "M6 21h12", key: "4dkmi1" }],
      ["path", { d: "M6 13h10", key: "ybwr4a" }]
    ]);
    var PowerOff = createLucideIcon("PowerOff", [
      ["path", { d: "M18.36 6.64A9 9 0 0 1 20.77 15", key: "dxknvb" }],
      ["path", { d: "M6.16 6.16a9 9 0 1 0 12.68 12.68", key: "1x7qb5" }],
      ["path", { d: "M12 2v4", key: "3427ic" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Power = createLucideIcon("Power", [
      ["path", { d: "M12 2v10", key: "mnfbl" }],
      ["path", { d: "M18.4 6.6a9 9 0 1 1-12.77.04", key: "obofu9" }]
    ]);
    var Presentation = createLucideIcon("Presentation", [
      ["path", { d: "M2 3h20", key: "91anmk" }],
      ["path", { d: "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3", key: "2k9sn8" }],
      ["path", { d: "m7 21 5-5 5 5", key: "bip4we" }]
    ]);
    var PrinterCheck = createLucideIcon("PrinterCheck", [
      ["path", { d: "M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5", key: "qeb09x" }],
      ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }],
      ["path", { d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2", key: "1md90i" }],
      ["path", { d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6", key: "1itne7" }]
    ]);
    var Printer = createLucideIcon("Printer", [
      [
        "path",
        {
          d: "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2",
          key: "143wyd"
        }
      ],
      ["path", { d: "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6", key: "1itne7" }],
      ["rect", { x: "6", y: "14", width: "12", height: "8", rx: "1", key: "1ue0tg" }]
    ]);
    var Projector = createLucideIcon("Projector", [
      ["path", { d: "M5 7 3 5", key: "1yys58" }],
      ["path", { d: "M9 6V3", key: "1ptz9u" }],
      ["path", { d: "m13 7 2-2", key: "1w3vmq" }],
      ["circle", { cx: "9", cy: "13", r: "3", key: "1mma13" }],
      [
        "path",
        {
          d: "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17",
          key: "2frwzc"
        }
      ],
      ["path", { d: "M16 16h2", key: "dnq2od" }]
    ]);
    var Proportions = createLucideIcon("Proportions", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M12 9v11", key: "1fnkrn" }],
      ["path", { d: "M2 9h13a2 2 0 0 1 2 2v9", key: "11z3ex" }]
    ]);
    var Puzzle = createLucideIcon("Puzzle", [
      [
        "path",
        {
          d: "M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z",
          key: "w46dr5"
        }
      ]
    ]);
    var Pyramid = createLucideIcon("Pyramid", [
      [
        "path",
        {
          d: "M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z",
          key: "aenxs0"
        }
      ],
      ["path", { d: "M12 2v20", key: "t6zp3m" }]
    ]);
    var QrCode = createLucideIcon("QrCode", [
      ["rect", { width: "5", height: "5", x: "3", y: "3", rx: "1", key: "1tu5fj" }],
      ["rect", { width: "5", height: "5", x: "16", y: "3", rx: "1", key: "1v8r4q" }],
      ["rect", { width: "5", height: "5", x: "3", y: "16", rx: "1", key: "1x03jg" }],
      ["path", { d: "M21 16h-3a2 2 0 0 0-2 2v3", key: "177gqh" }],
      ["path", { d: "M21 21v.01", key: "ents32" }],
      ["path", { d: "M12 7v3a2 2 0 0 1-2 2H7", key: "8crl2c" }],
      ["path", { d: "M3 12h.01", key: "nlz23k" }],
      ["path", { d: "M12 3h.01", key: "n36tog" }],
      ["path", { d: "M12 16v.01", key: "133mhm" }],
      ["path", { d: "M16 12h1", key: "1slzba" }],
      ["path", { d: "M21 12v.01", key: "1lwtk9" }],
      ["path", { d: "M12 21v-1", key: "1880an" }]
    ]);
    var Quote = createLucideIcon("Quote", [
      [
        "path",
        {
          d: "M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
          key: "rib7q0"
        }
      ],
      [
        "path",
        {
          d: "M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z",
          key: "1ymkrd"
        }
      ]
    ]);
    var Rabbit = createLucideIcon("Rabbit", [
      ["path", { d: "M13 16a3 3 0 0 1 2.24 5", key: "1epib5" }],
      ["path", { d: "M18 12h.01", key: "yjnet6" }],
      [
        "path",
        {
          d: "M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3",
          key: "ue9ozu"
        }
      ],
      ["path", { d: "M20 8.54V4a2 2 0 1 0-4 0v3", key: "49iql8" }],
      ["path", { d: "M7.612 12.524a3 3 0 1 0-1.6 4.3", key: "1e33i0" }]
    ]);
    var Radar = createLucideIcon("Radar", [
      ["path", { d: "M19.07 4.93A10 10 0 0 0 6.99 3.34", key: "z3du51" }],
      ["path", { d: "M4 6h.01", key: "oypzma" }],
      ["path", { d: "M2.29 9.62A10 10 0 1 0 21.31 8.35", key: "qzzz0" }],
      ["path", { d: "M16.24 7.76A6 6 0 1 0 8.23 16.67", key: "1yjesh" }],
      ["path", { d: "M12 18h.01", key: "mhygvu" }],
      ["path", { d: "M17.99 11.66A6 6 0 0 1 15.77 16.67", key: "1u2y91" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "m13.41 10.59 5.66-5.66", key: "mhq4k0" }]
    ]);
    var Radiation = createLucideIcon("Radiation", [
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      [
        "path",
        {
          d: "M7.5 4.2c-.3-.5-.9-.7-1.3-.4C3.9 5.5 2.3 8.1 2 11c-.1.5.4 1 1 1h5c0-1.5.8-2.8 2-3.4-1.1-1.9-2-3.5-2.5-4.4z",
          key: "wy49g3"
        }
      ],
      [
        "path",
        {
          d: "M21 12c.6 0 1-.4 1-1-.3-2.9-1.8-5.5-4.1-7.1-.4-.3-1.1-.2-1.3.3-.6.9-1.5 2.5-2.6 4.3 1.2.7 2 2 2 3.5h5z",
          key: "vklnvr"
        }
      ],
      [
        "path",
        {
          d: "M7.5 19.8c-.3.5-.1 1.1.4 1.3 2.6 1.2 5.6 1.2 8.2 0 .5-.2.7-.8.4-1.3-.5-.9-1.4-2.5-2.5-4.3-1.2.7-2.8.7-4 0-1.1 1.8-2 3.4-2.5 4.3z",
          key: "wkdf1o"
        }
      ]
    ]);
    var Radical = createLucideIcon("Radical", [
      [
        "path",
        {
          d: "M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21",
          key: "1mqj8i"
        }
      ]
    ]);
    var RadioReceiver = createLucideIcon("RadioReceiver", [
      ["path", { d: "M5 16v2", key: "g5qcv5" }],
      ["path", { d: "M19 16v2", key: "1gbaio" }],
      ["rect", { width: "20", height: "8", x: "2", y: "8", rx: "2", key: "vjsjur" }],
      ["path", { d: "M18 12h.01", key: "yjnet6" }]
    ]);
    var RadioTower = createLucideIcon("RadioTower", [
      ["path", { d: "M4.9 16.1C1 12.2 1 5.8 4.9 1.9", key: "s0qx1y" }],
      ["path", { d: "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5", key: "1idnkw" }],
      ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }],
      ["path", { d: "M16.2 4.8c2 2 2.26 5.11.8 7.47", key: "ojru2q" }],
      ["path", { d: "M19.1 1.9a9.96 9.96 0 0 1 0 14.1", key: "rhi7fg" }],
      ["path", { d: "M9.5 18h5", key: "mfy3pd" }],
      ["path", { d: "m8 22 4-11 4 11", key: "25yftu" }]
    ]);
    var Radio = createLucideIcon("Radio", [
      ["path", { d: "M4.9 19.1C1 15.2 1 8.8 4.9 4.9", key: "1vaf9d" }],
      ["path", { d: "M7.8 16.2c-2.3-2.3-2.3-6.1 0-8.5", key: "u1ii0m" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }],
      ["path", { d: "M16.2 7.8c2.3 2.3 2.3 6.1 0 8.5", key: "1j5fej" }],
      ["path", { d: "M19.1 4.9C23 8.8 23 15.1 19.1 19", key: "10b0cb" }]
    ]);
    var Radius = createLucideIcon("Radius", [
      ["path", { d: "M20.34 17.52a10 10 0 1 0-2.82 2.82", key: "fydyku" }],
      ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
      ["path", { d: "m13.41 13.41 4.18 4.18", key: "1gqbwc" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
    ]);
    var RailSymbol = createLucideIcon("RailSymbol", [
      ["path", { d: "M5 15h14", key: "m0yey3" }],
      ["path", { d: "M5 9h14", key: "7tsvo6" }],
      ["path", { d: "m14 20-5-5 6-6-5-5", key: "1jo42i" }]
    ]);
    var Rainbow = createLucideIcon("Rainbow", [
      ["path", { d: "M22 17a10 10 0 0 0-20 0", key: "ozegv" }],
      ["path", { d: "M6 17a6 6 0 0 1 12 0", key: "5giftw" }],
      ["path", { d: "M10 17a2 2 0 0 1 4 0", key: "gnsikk" }]
    ]);
    var Rat = createLucideIcon("Rat", [
      [
        "path",
        {
          d: "M17 5c0-1.7-1.3-3-3-3s-3 1.3-3 3c0 .8.3 1.5.8 2H11c-3.9 0-7 3.1-7 7c0 2.2 1.8 4 4 4",
          key: "1wq71c"
        }
      ],
      [
        "path",
        {
          d: "M16.8 3.9c.3-.3.6-.5 1-.7 1.5-.6 3.3.1 3.9 1.6.6 1.5-.1 3.3-1.6 3.9l1.6 2.8c.2.3.2.7.2 1-.2.8-.9 1.2-1.7 1.1 0 0-1.6-.3-2.7-.6H17c-1.7 0-3 1.3-3 3",
          key: "1crdmb"
        }
      ],
      ["path", { d: "M13.2 18a3 3 0 0 0-2.2-5", key: "1ol3lk" }],
      ["path", { d: "M13 22H4a2 2 0 0 1 0-4h12", key: "bt3f23" }],
      ["path", { d: "M16 9h.01", key: "1bdo4e" }]
    ]);
    var Ratio = createLucideIcon("Ratio", [
      ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }],
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
    ]);
    var ReceiptCent = createLucideIcon("ReceiptCent", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M12 6.5v11", key: "ecfhkf" }],
      ["path", { d: "M15 9.4a4 4 0 1 0 0 5.2", key: "1makmb" }]
    ]);
    var ReceiptEuro = createLucideIcon("ReceiptEuro", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M8 12h5", key: "1g6qi8" }],
      ["path", { d: "M16 9.5a4 4 0 1 0 0 5.2", key: "b2px4r" }]
    ]);
    var ReceiptIndianRupee = createLucideIcon("ReceiptIndianRupee", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M8 7h8", key: "i86dvs" }],
      ["path", { d: "M12 17.5 8 15h1a4 4 0 0 0 0-8", key: "grpkl4" }],
      ["path", { d: "M8 11h8", key: "vwpz6n" }]
    ]);
    var ReceiptJapaneseYen = createLucideIcon("ReceiptJapaneseYen", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "m12 10 3-3", key: "1mc12w" }],
      ["path", { d: "m9 7 3 3v7.5", key: "39i0xv" }],
      ["path", { d: "M9 11h6", key: "1fldmi" }],
      ["path", { d: "M9 15h6", key: "cctwl0" }]
    ]);
    var ReceiptPoundSterling = createLucideIcon("ReceiptPoundSterling", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M8 13h5", key: "1k9z8w" }],
      ["path", { d: "M10 17V9.5a2.5 2.5 0 0 1 5 0", key: "1dzgp0" }],
      ["path", { d: "M8 17h7", key: "8mjdqu" }]
    ]);
    var ReceiptRussianRuble = createLucideIcon("ReceiptRussianRuble", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M8 15h5", key: "vxg57a" }],
      ["path", { d: "M8 11h5a2 2 0 1 0 0-4h-3v10", key: "1usi5u" }]
    ]);
    var ReceiptSwissFranc = createLucideIcon("ReceiptSwissFranc", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M10 17V7h5", key: "k7jq18" }],
      ["path", { d: "M10 11h4", key: "1i0mka" }],
      ["path", { d: "M8 15h5", key: "vxg57a" }]
    ]);
    var ReceiptText = createLucideIcon("ReceiptText", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M14 8H8", key: "1l3xfs" }],
      ["path", { d: "M16 12H8", key: "1fr5h0" }],
      ["path", { d: "M13 16H8", key: "wsln4y" }]
    ]);
    var Receipt = createLucideIcon("Receipt", [
      [
        "path",
        { d: "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z", key: "q3az6g" }
      ],
      ["path", { d: "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8", key: "1h4pet" }],
      ["path", { d: "M12 17.5v-11", key: "1jc1ny" }]
    ]);
    var RectangleEllipsis = createLucideIcon("RectangleEllipsis", [
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M17 12h.01", key: "1m0b6t" }],
      ["path", { d: "M7 12h.01", key: "eqddd0" }]
    ]);
    var RectangleHorizontal = createLucideIcon("RectangleHorizontal", [
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "2", key: "9lu3g6" }]
    ]);
    var RectangleVertical = createLucideIcon("RectangleVertical", [
      ["rect", { width: "12", height: "20", x: "6", y: "2", rx: "2", key: "1oxtiu" }]
    ]);
    var Recycle = createLucideIcon("Recycle", [
      [
        "path",
        {
          d: "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5",
          key: "x6z5xu"
        }
      ],
      [
        "path",
        {
          d: "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12",
          key: "1x4zh5"
        }
      ],
      ["path", { d: "m14 16-3 3 3 3", key: "f6jyew" }],
      ["path", { d: "M8.293 13.596 7.196 9.5 3.1 10.598", key: "wf1obh" }],
      [
        "path",
        {
          d: "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843",
          key: "9tzpgr"
        }
      ],
      ["path", { d: "m13.378 9.633 4.096 1.098 1.097-4.096", key: "1oe83g" }]
    ]);
    var Redo2 = createLucideIcon("Redo2", [
      ["path", { d: "m15 14 5-5-5-5", key: "12vg1m" }],
      ["path", { d: "M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13", key: "6uklza" }]
    ]);
    var RedoDot = createLucideIcon("RedoDot", [
      ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }],
      ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
      ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
    ]);
    var Redo = createLucideIcon("Redo", [
      ["path", { d: "M21 7v6h-6", key: "3ptur4" }],
      ["path", { d: "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7", key: "1kgawr" }]
    ]);
    var RefreshCcwDot = createLucideIcon("RefreshCcwDot", [
      ["path", { d: "M3 2v6h6", key: "18ldww" }],
      ["path", { d: "M21 12A9 9 0 0 0 6 5.3L3 8", key: "1pbrqz" }],
      ["path", { d: "M21 22v-6h-6", key: "usdfbe" }],
      ["path", { d: "M3 12a9 9 0 0 0 15 6.7l3-2.7", key: "1hosoe" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
    ]);
    var RefreshCcw = createLucideIcon("RefreshCcw", [
      ["path", { d: "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "14sxne" }],
      ["path", { d: "M3 3v5h5", key: "1xhq8a" }],
      ["path", { d: "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16", key: "1hlbsb" }],
      ["path", { d: "M16 16h5v5", key: "ccwih5" }]
    ]);
    var RefreshCwOff = createLucideIcon("RefreshCwOff", [
      ["path", { d: "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47", key: "1krf6h" }],
      ["path", { d: "M8 16H3v5", key: "1cv678" }],
      ["path", { d: "M3 12C3 9.51 4 7.26 5.64 5.64", key: "ruvoct" }],
      ["path", { d: "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64", key: "19q130" }],
      ["path", { d: "M21 12c0 1-.16 1.97-.47 2.87", key: "4w8emr" }],
      ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
      ["path", { d: "M22 22 2 2", key: "1r8tn9" }]
    ]);
    var RefreshCw = createLucideIcon("RefreshCw", [
      ["path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8", key: "v9h5vc" }],
      ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
      ["path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16", key: "3uifl3" }],
      ["path", { d: "M8 16H3v5", key: "1cv678" }]
    ]);
    var Refrigerator = createLucideIcon("Refrigerator", [
      [
        "path",
        { d: "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z", key: "fpq118" }
      ],
      ["path", { d: "M5 10h14", key: "elsbfy" }],
      ["path", { d: "M15 7v6", key: "1nx30x" }]
    ]);
    var Regex = createLucideIcon("Regex", [
      ["path", { d: "M17 3v10", key: "15fgeh" }],
      ["path", { d: "m12.67 5.5 8.66 5", key: "1gpheq" }],
      ["path", { d: "m12.67 10.5 8.66-5", key: "1dkfa6" }],
      [
        "path",
        { d: "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z", key: "swwfx4" }
      ]
    ]);
    var RemoveFormatting = createLucideIcon("RemoveFormatting", [
      ["path", { d: "M4 7V4h16v3", key: "9msm58" }],
      ["path", { d: "M5 20h6", key: "1h6pxn" }],
      ["path", { d: "M13 4 8 20", key: "kqq6aj" }],
      ["path", { d: "m15 15 5 5", key: "me55sn" }],
      ["path", { d: "m20 15-5 5", key: "11p7ol" }]
    ]);
    var Repeat1 = createLucideIcon("Repeat1", [
      ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
      ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
      ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
      ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }],
      ["path", { d: "M11 10h1v4", key: "70cz1p" }]
    ]);
    var Repeat2 = createLucideIcon("Repeat2", [
      ["path", { d: "m2 9 3-3 3 3", key: "1ltn5i" }],
      ["path", { d: "M13 18H7a2 2 0 0 1-2-2V6", key: "1r6tfw" }],
      ["path", { d: "m22 15-3 3-3-3", key: "4rnwn2" }],
      ["path", { d: "M11 6h6a2 2 0 0 1 2 2v10", key: "2f72bc" }]
    ]);
    var Repeat = createLucideIcon("Repeat", [
      ["path", { d: "m17 2 4 4-4 4", key: "nntrym" }],
      ["path", { d: "M3 11v-1a4 4 0 0 1 4-4h14", key: "84bu3i" }],
      ["path", { d: "m7 22-4-4 4-4", key: "1wqhfi" }],
      ["path", { d: "M21 13v1a4 4 0 0 1-4 4H3", key: "1rx37r" }]
    ]);
    var ReplaceAll = createLucideIcon("ReplaceAll", [
      ["path", { d: "M14 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "1yyzbs" }],
      ["path", { d: "M14 4a2 2 0 0 1 2-2", key: "1w2hp7" }],
      ["path", { d: "M16 10a2 2 0 0 1-2-2", key: "shjach" }],
      ["path", { d: "M20 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2", key: "zfj4xr" }],
      ["path", { d: "M20 2a2 2 0 0 1 2 2", key: "188mtx" }],
      ["path", { d: "M22 8a2 2 0 0 1-2 2", key: "ddf4tu" }],
      ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
      ["path", { d: "M6 10V5a 3 3 0 0 1 3-3h1", key: "1ageje" }],
      ["rect", { x: "2", y: "14", width: "8", height: "8", rx: "2", key: "4rksxw" }]
    ]);
    var Replace = createLucideIcon("Replace", [
      ["path", { d: "M14 4a2 2 0 0 1 2-2", key: "1w2hp7" }],
      ["path", { d: "M16 10a2 2 0 0 1-2-2", key: "shjach" }],
      ["path", { d: "M20 2a2 2 0 0 1 2 2", key: "188mtx" }],
      ["path", { d: "M22 8a2 2 0 0 1-2 2", key: "ddf4tu" }],
      ["path", { d: "m3 7 3 3 3-3", key: "x25e72" }],
      ["path", { d: "M6 10V5a3 3 0 0 1 3-3h1", key: "3y3t5z" }],
      ["rect", { x: "2", y: "14", width: "8", height: "8", rx: "2", key: "4rksxw" }]
    ]);
    var ReplyAll = createLucideIcon("ReplyAll", [
      ["polyline", { points: "7 17 2 12 7 7", key: "t83bqg" }],
      ["polyline", { points: "12 17 7 12 12 7", key: "1g4ajm" }],
      ["path", { d: "M22 18v-2a4 4 0 0 0-4-4H7", key: "1fcyog" }]
    ]);
    var Reply = createLucideIcon("Reply", [
      ["polyline", { points: "9 17 4 12 9 7", key: "hvgpf2" }],
      ["path", { d: "M20 18v-2a4 4 0 0 0-4-4H4", key: "5vmcpk" }]
    ]);
    var Rewind = createLucideIcon("Rewind", [
      ["polygon", { points: "11 19 2 12 11 5 11 19", key: "14yba5" }],
      ["polygon", { points: "22 19 13 12 22 5 22 19", key: "1pi1cj" }]
    ]);
    var Ribbon = createLucideIcon("Ribbon", [
      [
        "path",
        { d: "M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22", key: "1rnhq3" }
      ],
      ["path", { d: "m12 18 2.57-3.5", key: "116vt7" }],
      ["path", { d: "M6.243 9.016a7 7 0 0 1 11.507-.009", key: "10dq0b" }],
      ["path", { d: "M9.35 14.53 12 11.22", key: "tdsyp2" }],
      [
        "path",
        {
          d: "M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z",
          key: "nmifey"
        }
      ]
    ]);
    var Rocket = createLucideIcon("Rocket", [
      [
        "path",
        {
          d: "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z",
          key: "m3kijz"
        }
      ],
      [
        "path",
        {
          d: "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z",
          key: "1fmvmk"
        }
      ],
      ["path", { d: "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0", key: "1f8sc4" }],
      ["path", { d: "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5", key: "qeys4" }]
    ]);
    var RockingChair = createLucideIcon("RockingChair", [
      ["polyline", { points: "3.5 2 6.5 12.5 18 12.5", key: "y3iy52" }],
      ["line", { x1: "9.5", x2: "5.5", y1: "12.5", y2: "20", key: "19vg5i" }],
      ["line", { x1: "15", x2: "18.5", y1: "12.5", y2: "20", key: "1inpmv" }],
      ["path", { d: "M2.75 18a13 13 0 0 0 18.5 0", key: "1nquas" }]
    ]);
    var RollerCoaster = createLucideIcon("RollerCoaster", [
      ["path", { d: "M6 19V5", key: "1r845m" }],
      ["path", { d: "M10 19V6.8", key: "9j2tfs" }],
      ["path", { d: "M14 19v-7.8", key: "10s8qv" }],
      ["path", { d: "M18 5v4", key: "1tajlv" }],
      ["path", { d: "M18 19v-6", key: "ielfq3" }],
      ["path", { d: "M22 19V9", key: "158nzp" }],
      ["path", { d: "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65", key: "1930oh" }]
    ]);
    var Rotate3d = createLucideIcon("Rotate3d", [
      [
        "path",
        {
          d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2",
          key: "10n0gc"
        }
      ],
      ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814", key: "16shm9" }],
      [
        "path",
        {
          d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4",
          key: "1lxi77"
        }
      ]
    ]);
    var RotateCcwSquare = createLucideIcon("RotateCcwSquare", [
      ["path", { d: "M20 9V7a2 2 0 0 0-2-2h-6", key: "19z8uc" }],
      ["path", { d: "m15 2-3 3 3 3", key: "177bxs" }],
      ["path", { d: "M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2", key: "d36hnl" }]
    ]);
    var RotateCcw = createLucideIcon("RotateCcw", [
      ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
      ["path", { d: "M3 3v5h5", key: "1xhq8a" }]
    ]);
    var RotateCwSquare = createLucideIcon("RotateCwSquare", [
      ["path", { d: "M12 5H6a2 2 0 0 0-2 2v3", key: "l96uqu" }],
      ["path", { d: "m9 8 3-3-3-3", key: "1gzgc3" }],
      ["path", { d: "M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2", key: "1w2k5h" }]
    ]);
    var RotateCw = createLucideIcon("RotateCw", [
      ["path", { d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8", key: "1p45f6" }],
      ["path", { d: "M21 3v5h-5", key: "1q7to0" }]
    ]);
    var RouteOff = createLucideIcon("RouteOff", [
      ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
      ["path", { d: "M9 19h8.5c.4 0 .9-.1 1.3-.2", key: "1effex" }],
      ["path", { d: "M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12", key: "k9y2ds" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M21 15.3a3.5 3.5 0 0 0-3.3-3.3", key: "11nlu2" }],
      ["path", { d: "M15 5h-4.3", key: "6537je" }],
      ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
    ]);
    var Route = createLucideIcon("Route", [
      ["circle", { cx: "6", cy: "19", r: "3", key: "1kj8tv" }],
      ["path", { d: "M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15", key: "1d8sl" }],
      ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }]
    ]);
    var Router = createLucideIcon("Router", [
      ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", key: "w68u3i" }],
      ["path", { d: "M6.01 18H6", key: "19vcac" }],
      ["path", { d: "M10.01 18H10", key: "uamcmx" }],
      ["path", { d: "M15 10v4", key: "qjz1xs" }],
      ["path", { d: "M17.84 7.17a4 4 0 0 0-5.66 0", key: "1rif40" }],
      ["path", { d: "M20.66 4.34a8 8 0 0 0-11.31 0", key: "6a5xfq" }]
    ]);
    var Rows2 = createLucideIcon("Rows2", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 12h18", key: "1i2n21" }]
    ]);
    var Rows3 = createLucideIcon("Rows3", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M21 9H3", key: "1338ky" }],
      ["path", { d: "M21 15H3", key: "9uk58r" }]
    ]);
    var Rows4 = createLucideIcon("Rows4", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M21 7.5H3", key: "1hm9pq" }],
      ["path", { d: "M21 12H3", key: "2avoz0" }],
      ["path", { d: "M21 16.5H3", key: "n7jzkj" }]
    ]);
    var Rss = createLucideIcon("Rss", [
      ["path", { d: "M4 11a9 9 0 0 1 9 9", key: "pv89mb" }],
      ["path", { d: "M4 4a16 16 0 0 1 16 16", key: "k0647b" }],
      ["circle", { cx: "5", cy: "19", r: "1", key: "bfqh0e" }]
    ]);
    var Ruler = createLucideIcon("Ruler", [
      [
        "path",
        {
          d: "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z",
          key: "icamh8"
        }
      ],
      ["path", { d: "m14.5 12.5 2-2", key: "inckbg" }],
      ["path", { d: "m11.5 9.5 2-2", key: "fmmyf7" }],
      ["path", { d: "m8.5 6.5 2-2", key: "vc6u1g" }],
      ["path", { d: "m17.5 15.5 2-2", key: "wo5hmg" }]
    ]);
    var RussianRuble = createLucideIcon("RussianRuble", [
      ["path", { d: "M6 11h8a4 4 0 0 0 0-8H9v18", key: "18ai8t" }],
      ["path", { d: "M6 15h8", key: "1y8f6l" }]
    ]);
    var Sailboat = createLucideIcon("Sailboat", [
      ["path", { d: "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z", key: "1404fh" }],
      ["path", { d: "M21 14 10 2 3 14h18Z", key: "1nzg7v" }],
      ["path", { d: "M10 2v16", key: "1labyt" }]
    ]);
    var Salad = createLucideIcon("Salad", [
      ["path", { d: "M7 21h10", key: "1b0cd5" }],
      ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
      [
        "path",
        {
          d: "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1",
          key: "10xrj0"
        }
      ],
      ["path", { d: "m13 12 4-4", key: "1hckqy" }],
      ["path", { d: "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2", key: "1p4srx" }]
    ]);
    var Sandwich = createLucideIcon("Sandwich", [
      ["path", { d: "m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777", key: "f1wd0e" }],
      ["path", { d: "M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25", key: "1pfu07" }],
      ["path", { d: "M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9", key: "1oq9qw" }],
      ["path", { d: "m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2", key: "1fnwu5" }],
      ["rect", { width: "20", height: "4", x: "2", y: "11", rx: "1", key: "itshg" }]
    ]);
    var SatelliteDish = createLucideIcon("SatelliteDish", [
      ["path", { d: "M4 10a7.31 7.31 0 0 0 10 10Z", key: "1fzpp3" }],
      ["path", { d: "m9 15 3-3", key: "88sc13" }],
      ["path", { d: "M17 13a6 6 0 0 0-6-6", key: "15cc6u" }],
      ["path", { d: "M21 13A10 10 0 0 0 11 3", key: "11nf8s" }]
    ]);
    var Satellite = createLucideIcon("Satellite", [
      ["path", { d: "M13 7 9 3 5 7l4 4", key: "vyckw6" }],
      ["path", { d: "m17 11 4 4-4 4-4-4", key: "rchckc" }],
      ["path", { d: "m8 12 4 4 6-6-4-4Z", key: "1sshf7" }],
      ["path", { d: "m16 8 3-3", key: "x428zp" }],
      ["path", { d: "M9 21a6 6 0 0 0-6-6", key: "1iajcf" }]
    ]);
    var SaveAll = createLucideIcon("SaveAll", [
      ["path", { d: "M10 2v3a1 1 0 0 0 1 1h5", key: "1xspal" }],
      ["path", { d: "M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6", key: "1ra60u" }],
      ["path", { d: "M18 22H4a2 2 0 0 1-2-2V6", key: "pblm9e" }],
      [
        "path",
        {
          d: "M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z",
          key: "1yve0x"
        }
      ]
    ]);
    var SaveOff = createLucideIcon("SaveOff", [
      ["path", { d: "M13 13H8a1 1 0 0 0-1 1v7", key: "h8g396" }],
      ["path", { d: "M14 8h1", key: "1lfen6" }],
      ["path", { d: "M17 21v-4", key: "1yknxs" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      [
        "path",
        { d: "M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41", key: "1t4vdl" }
      ],
      ["path", { d: "M29.5 11.5s5 5 4 5", key: "zzn4i6" }],
      ["path", { d: "M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15", key: "24cby9" }]
    ]);
    var Save = createLucideIcon("Save", [
      [
        "path",
        {
          d: "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",
          key: "1c8476"
        }
      ],
      ["path", { d: "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7", key: "1ydtos" }],
      ["path", { d: "M7 3v4a1 1 0 0 0 1 1h7", key: "t51u73" }]
    ]);
    var Scale3d = createLucideIcon("Scale3d", [
      ["path", { d: "M5 7v11a1 1 0 0 0 1 1h11", key: "13dt1j" }],
      ["path", { d: "M5.293 18.707 11 13", key: "ezgbsx" }],
      ["circle", { cx: "19", cy: "19", r: "2", key: "17f5cg" }],
      ["circle", { cx: "5", cy: "5", r: "2", key: "1gwv83" }]
    ]);
    var Scale = createLucideIcon("Scale", [
      ["path", { d: "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "7g6ntu" }],
      ["path", { d: "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z", key: "ijws7r" }],
      ["path", { d: "M7 21h10", key: "1b0cd5" }],
      ["path", { d: "M12 3v18", key: "108xh3" }],
      ["path", { d: "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2", key: "3gwbw2" }]
    ]);
    var Scaling = createLucideIcon("Scaling", [
      ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
      ["path", { d: "M14 15H9v-5", key: "pi4jk9" }],
      ["path", { d: "M16 3h5v5", key: "1806ms" }],
      ["path", { d: "M21 3 9 15", key: "15kdhq" }]
    ]);
    var ScanBarcode = createLucideIcon("ScanBarcode", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["path", { d: "M8 7v10", key: "23sfjj" }],
      ["path", { d: "M12 7v10", key: "jspqdw" }],
      ["path", { d: "M17 7v10", key: "578dap" }]
    ]);
    var ScanEye = createLucideIcon("ScanEye", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      [
        "path",
        {
          d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0",
          key: "11ak4c"
        }
      ]
    ]);
    var ScanFace = createLucideIcon("ScanFace", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["path", { d: "M15 9h.01", key: "x1ddxp" }]
    ]);
    var ScanLine = createLucideIcon("ScanLine", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["path", { d: "M7 12h10", key: "b7w52i" }]
    ]);
    var ScanQrCode = createLucideIcon("ScanQrCode", [
      ["path", { d: "M17 12v4a1 1 0 0 1-1 1h-4", key: "uk4fdo" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M17 8V7", key: "q2g9wo" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M7 17h.01", key: "19xn7k" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["rect", { x: "7", y: "7", width: "5", height: "5", rx: "1", key: "m9kyts" }]
    ]);
    var ScanSearch = createLucideIcon("ScanSearch", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["path", { d: "m16 16-1.9-1.9", key: "1dq9hf" }]
    ]);
    var ScanText = createLucideIcon("ScanText", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }],
      ["path", { d: "M7 8h8", key: "1jbsf9" }],
      ["path", { d: "M7 12h10", key: "b7w52i" }],
      ["path", { d: "M7 16h6", key: "1vyc9m" }]
    ]);
    var Scan = createLucideIcon("Scan", [
      ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2", key: "aa7l1z" }],
      ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2", key: "4qcy5o" }],
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2", key: "6vwrx8" }],
      ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2", key: "ioqczr" }]
    ]);
    var School = createLucideIcon("School", [
      ["path", { d: "M14 22v-4a2 2 0 1 0-4 0v4", key: "hhkicm" }],
      [
        "path",
        {
          d: "m18 10 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7.382a1 1 0 0 1 .553-.894L6 10",
          key: "1xqip1"
        }
      ],
      ["path", { d: "M18 5v17", key: "1sw6gf" }],
      ["path", { d: "m4 6 7.106-3.553a2 2 0 0 1 1.788 0L20 6", key: "9d2mlk" }],
      ["path", { d: "M6 5v17", key: "1xfsm0" }],
      ["circle", { cx: "12", cy: "9", r: "2", key: "1092wv" }]
    ]);
    var ScissorsLineDashed = createLucideIcon("ScissorsLineDashed", [
      ["path", { d: "M5.42 9.42 8 12", key: "12pkuq" }],
      ["circle", { cx: "4", cy: "8", r: "2", key: "107mxr" }],
      ["path", { d: "m14 6-8.58 8.58", key: "gvzu5l" }],
      ["circle", { cx: "4", cy: "16", r: "2", key: "1ehqvc" }],
      ["path", { d: "M10.8 14.8 14 18", key: "ax7m9r" }],
      ["path", { d: "M16 12h-2", key: "10asgb" }],
      ["path", { d: "M22 12h-2", key: "14jgyd" }]
    ]);
    var Scissors = createLucideIcon("Scissors", [
      ["circle", { cx: "6", cy: "6", r: "3", key: "1lh9wr" }],
      ["path", { d: "M8.12 8.12 12 12", key: "1alkpv" }],
      ["path", { d: "M20 4 8.12 15.88", key: "xgtan2" }],
      ["circle", { cx: "6", cy: "18", r: "3", key: "fqmcym" }],
      ["path", { d: "M14.8 14.8 20 20", key: "ptml3r" }]
    ]);
    var ScreenShareOff = createLucideIcon("ScreenShareOff", [
      ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "m22 3-5 5", key: "12jva0" }],
      ["path", { d: "m17 3 5 5", key: "k36vhe" }]
    ]);
    var ScreenShare = createLucideIcon("ScreenShare", [
      ["path", { d: "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3", key: "i8wdob" }],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }],
      ["path", { d: "m17 8 5-5", key: "fqif7o" }],
      ["path", { d: "M17 3h5v5", key: "1o3tu8" }]
    ]);
    var ScrollText = createLucideIcon("ScrollText", [
      ["path", { d: "M15 12h-5", key: "r7krc0" }],
      ["path", { d: "M15 8h-5", key: "1khuty" }],
      ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
      [
        "path",
        {
          d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3",
          key: "1ph1d7"
        }
      ]
    ]);
    var Scroll = createLucideIcon("Scroll", [
      ["path", { d: "M19 17V5a2 2 0 0 0-2-2H4", key: "zz82l3" }],
      [
        "path",
        {
          d: "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3",
          key: "1ph1d7"
        }
      ]
    ]);
    var SearchCheck = createLucideIcon("SearchCheck", [
      ["path", { d: "m8 11 2 2 4-4", key: "1sed1v" }],
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
    ]);
    var SearchCode = createLucideIcon("SearchCode", [
      ["path", { d: "m13 13.5 2-2.5-2-2.5", key: "1rvxrh" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }],
      ["path", { d: "M9 8.5 7 11l2 2.5", key: "6ffwbx" }],
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }]
    ]);
    var SearchSlash = createLucideIcon("SearchSlash", [
      ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
    ]);
    var SearchX = createLucideIcon("SearchX", [
      ["path", { d: "m13.5 8.5-5 5", key: "1cs55j" }],
      ["path", { d: "m8.5 8.5 5 5", key: "a8mexj" }],
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
    ]);
    var Search = createLucideIcon("Search", [
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
    ]);
    var Section = createLucideIcon("Section", [
      ["path", { d: "M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0", key: "vqan6v" }],
      ["path", { d: "M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0", key: "wdjd8o" }]
    ]);
    var SendHorizontal = createLucideIcon("SendHorizontal", [
      [
        "path",
        {
          d: "M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z",
          key: "117uat"
        }
      ],
      ["path", { d: "M6 12h16", key: "s4cdu5" }]
    ]);
    var SendToBack = createLucideIcon("SendToBack", [
      ["rect", { x: "14", y: "14", width: "8", height: "8", rx: "2", key: "1b0bso" }],
      ["rect", { x: "2", y: "2", width: "8", height: "8", rx: "2", key: "1x09vl" }],
      ["path", { d: "M7 14v1a2 2 0 0 0 2 2h1", key: "pao6x6" }],
      ["path", { d: "M14 7h1a2 2 0 0 1 2 2v1", key: "19tdru" }]
    ]);
    var Send = createLucideIcon("Send", [
      [
        "path",
        {
          d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
          key: "1ffxy3"
        }
      ],
      ["path", { d: "m21.854 2.147-10.94 10.939", key: "12cjpa" }]
    ]);
    var SeparatorHorizontal = createLucideIcon("SeparatorHorizontal", [
      ["line", { x1: "3", x2: "21", y1: "12", y2: "12", key: "10d38w" }],
      ["polyline", { points: "8 8 12 4 16 8", key: "zo8t4w" }],
      ["polyline", { points: "16 16 12 20 8 16", key: "1oyrid" }]
    ]);
    var SeparatorVertical = createLucideIcon("SeparatorVertical", [
      ["line", { x1: "12", x2: "12", y1: "3", y2: "21", key: "1efggb" }],
      ["polyline", { points: "8 8 4 12 8 16", key: "bnfmv4" }],
      ["polyline", { points: "16 16 20 12 16 8", key: "u90052" }]
    ]);
    var ServerCog = createLucideIcon("ServerCog", [
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      [
        "path",
        {
          d: "M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5",
          key: "tn8das"
        }
      ],
      [
        "path",
        {
          d: "M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5",
          key: "1g2pve"
        }
      ],
      ["path", { d: "M6 6h.01", key: "1utrut" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "m15.7 13.4-.9-.3", key: "1jwmzr" }],
      ["path", { d: "m9.2 10.9-.9-.3", key: "qapnim" }],
      ["path", { d: "m10.6 15.7.3-.9", key: "quwk0k" }],
      ["path", { d: "m13.6 15.7-.4-1", key: "cb9xp7" }],
      ["path", { d: "m10.8 9.3-.4-1", key: "1uaiz5" }],
      ["path", { d: "m8.3 13.6 1-.4", key: "s6srou" }],
      ["path", { d: "m14.7 10.8 1-.4", key: "4d31cq" }],
      ["path", { d: "m13.4 8.3-.3.9", key: "1bm987" }]
    ]);
    var ServerCrash = createLucideIcon("ServerCrash", [
      [
        "path",
        {
          d: "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2",
          key: "4b9dqc"
        }
      ],
      [
        "path",
        {
          d: "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2",
          key: "22nnkd"
        }
      ],
      ["path", { d: "M6 6h.01", key: "1utrut" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "m13 6-4 6h6l-4 6", key: "14hqih" }]
    ]);
    var ServerOff = createLucideIcon("ServerOff", [
      ["path", { d: "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5", key: "bt2siv" }],
      ["path", { d: "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z", key: "1hjrv1" }],
      ["path", { d: "M22 17v-1a2 2 0 0 0-2-2h-1", key: "1iynyr" }],
      ["path", { d: "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z", key: "161ggg" }],
      ["path", { d: "M6 18h.01", key: "uhywen" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Server = createLucideIcon("Server", [
      ["rect", { width: "20", height: "8", x: "2", y: "2", rx: "2", ry: "2", key: "ngkwjq" }],
      ["rect", { width: "20", height: "8", x: "2", y: "14", rx: "2", ry: "2", key: "iecqi9" }],
      ["line", { x1: "6", x2: "6.01", y1: "6", y2: "6", key: "16zg32" }],
      ["line", { x1: "6", x2: "6.01", y1: "18", y2: "18", key: "nzw8ys" }]
    ]);
    var Settings2 = createLucideIcon("Settings2", [
      ["path", { d: "M20 7h-9", key: "3s1dr2" }],
      ["path", { d: "M14 17H5", key: "gfn3mx" }],
      ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
      ["circle", { cx: "7", cy: "7", r: "3", key: "dfmy0x" }]
    ]);
    var Settings = createLucideIcon("Settings", [
      [
        "path",
        {
          d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
          key: "1qme2f"
        }
      ],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
    ]);
    var Shapes = createLucideIcon("Shapes", [
      [
        "path",
        {
          d: "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z",
          key: "1bo67w"
        }
      ],
      ["rect", { x: "3", y: "14", width: "7", height: "7", rx: "1", key: "1bkyp8" }],
      ["circle", { cx: "17.5", cy: "17.5", r: "3.5", key: "w3z12y" }]
    ]);
    var Share2 = createLucideIcon("Share2", [
      ["circle", { cx: "18", cy: "5", r: "3", key: "gq8acd" }],
      ["circle", { cx: "6", cy: "12", r: "3", key: "w7nqdw" }],
      ["circle", { cx: "18", cy: "19", r: "3", key: "1xt0gg" }],
      ["line", { x1: "8.59", x2: "15.42", y1: "13.51", y2: "17.49", key: "47mynk" }],
      ["line", { x1: "15.41", x2: "8.59", y1: "6.51", y2: "10.49", key: "1n3mei" }]
    ]);
    var Share = createLucideIcon("Share", [
      ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
      ["polyline", { points: "16 6 12 2 8 6", key: "m901s6" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "15", key: "1p0rca" }]
    ]);
    var Sheet = createLucideIcon("Sheet", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["line", { x1: "3", x2: "21", y1: "9", y2: "9", key: "1vqk6q" }],
      ["line", { x1: "3", x2: "21", y1: "15", y2: "15", key: "o2sbyz" }],
      ["line", { x1: "9", x2: "9", y1: "9", y2: "21", key: "1ib60c" }],
      ["line", { x1: "15", x2: "15", y1: "9", y2: "21", key: "1n26ft" }]
    ]);
    var Shell = createLucideIcon("Shell", [
      [
        "path",
        {
          d: "M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44",
          key: "1cn552"
        }
      ]
    ]);
    var ShieldAlert = createLucideIcon("ShieldAlert", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M12 8v4", key: "1got3b" }],
      ["path", { d: "M12 16h.01", key: "1drbdi" }]
    ]);
    var ShieldBan = createLucideIcon("ShieldBan", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "m4.243 5.21 14.39 12.472", key: "1c9a7c" }]
    ]);
    var ShieldCheck = createLucideIcon("ShieldCheck", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
    ]);
    var ShieldEllipsis = createLucideIcon("ShieldEllipsis", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M8 12h.01", key: "czm47f" }],
      ["path", { d: "M12 12h.01", key: "1mp3jc" }],
      ["path", { d: "M16 12h.01", key: "1l6xoz" }]
    ]);
    var ShieldHalf = createLucideIcon("ShieldHalf", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M12 22V2", key: "zs6s6o" }]
    ]);
    var ShieldMinus = createLucideIcon("ShieldMinus", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M9 12h6", key: "1c52cq" }]
    ]);
    var ShieldOff = createLucideIcon("ShieldOff", [
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      [
        "path",
        {
          d: "M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71",
          key: "1jlk70"
        }
      ],
      [
        "path",
        {
          d: "M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264",
          key: "18rp1v"
        }
      ]
    ]);
    var ShieldPlus = createLucideIcon("ShieldPlus", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M9 12h6", key: "1c52cq" }],
      ["path", { d: "M12 9v6", key: "199k2o" }]
    ]);
    var ShieldQuestion = createLucideIcon("ShieldQuestion", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3", key: "mhlwft" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }]
    ]);
    var ShieldX = createLucideIcon("ShieldX", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ],
      ["path", { d: "m14.5 9.5-5 5", key: "17q4r4" }],
      ["path", { d: "m9.5 9.5 5 5", key: "18nt4w" }]
    ]);
    var Shield = createLucideIcon("Shield", [
      [
        "path",
        {
          d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
          key: "oel41y"
        }
      ]
    ]);
    var ShipWheel = createLucideIcon("ShipWheel", [
      ["circle", { cx: "12", cy: "12", r: "8", key: "46899m" }],
      ["path", { d: "M12 2v7.5", key: "1e5rl5" }],
      ["path", { d: "m19 5-5.23 5.23", key: "1ezxxf" }],
      ["path", { d: "M22 12h-7.5", key: "le1719" }],
      ["path", { d: "m19 19-5.23-5.23", key: "p3fmgn" }],
      ["path", { d: "M12 14.5V22", key: "dgcmos" }],
      ["path", { d: "M10.23 13.77 5 19", key: "qwopd4" }],
      ["path", { d: "M9.5 12H2", key: "r7bup8" }],
      ["path", { d: "M10.23 10.23 5 5", key: "k2y7lj" }],
      ["circle", { cx: "12", cy: "12", r: "2.5", key: "ix0uyj" }]
    ]);
    var Ship = createLucideIcon("Ship", [
      ["path", { d: "M12 10.189V14", key: "1p8cqu" }],
      ["path", { d: "M12 2v3", key: "qbqxhf" }],
      ["path", { d: "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6", key: "qpkstq" }],
      [
        "path",
        {
          d: "M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76",
          key: "7tigtc"
        }
      ],
      [
        "path",
        {
          d: "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
          key: "1924j5"
        }
      ]
    ]);
    var Shirt = createLucideIcon("Shirt", [
      [
        "path",
        {
          d: "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z",
          key: "1wgbhj"
        }
      ]
    ]);
    var ShoppingBag = createLucideIcon("ShoppingBag", [
      ["path", { d: "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4Z", key: "hou9p0" }],
      ["path", { d: "M3 6h18", key: "d0wm0j" }],
      ["path", { d: "M16 10a4 4 0 0 1-8 0", key: "1ltviw" }]
    ]);
    var ShoppingBasket = createLucideIcon("ShoppingBasket", [
      ["path", { d: "m15 11-1 9", key: "5wnq3a" }],
      ["path", { d: "m19 11-4-7", key: "cnml18" }],
      ["path", { d: "M2 11h20", key: "3eubbj" }],
      ["path", { d: "m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4", key: "yiazzp" }],
      ["path", { d: "M4.5 15.5h15", key: "13mye1" }],
      ["path", { d: "m5 11 4-7", key: "116ra9" }],
      ["path", { d: "m9 11 1 9", key: "1ojof7" }]
    ]);
    var ShoppingCart = createLucideIcon("ShoppingCart", [
      ["circle", { cx: "8", cy: "21", r: "1", key: "jimo8o" }],
      ["circle", { cx: "19", cy: "21", r: "1", key: "13723u" }],
      [
        "path",
        {
          d: "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12",
          key: "9zh506"
        }
      ]
    ]);
    var Shovel = createLucideIcon("Shovel", [
      ["path", { d: "M2 22v-5l5-5 5 5-5 5z", key: "1fh25c" }],
      ["path", { d: "M9.5 14.5 16 8", key: "1smz5x" }],
      [
        "path",
        { d: "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2", key: "1q8uv5" }
      ]
    ]);
    var ShowerHead = createLucideIcon("ShowerHead", [
      ["path", { d: "m4 4 2.5 2.5", key: "uv2vmf" }],
      ["path", { d: "M13.5 6.5a4.95 4.95 0 0 0-7 7", key: "frdkwv" }],
      ["path", { d: "M15 5 5 15", key: "1ag8rq" }],
      ["path", { d: "M14 17v.01", key: "eokfpp" }],
      ["path", { d: "M10 16v.01", key: "14uyyl" }],
      ["path", { d: "M13 13v.01", key: "1v1k97" }],
      ["path", { d: "M16 10v.01", key: "5169yg" }],
      ["path", { d: "M11 20v.01", key: "cj92p8" }],
      ["path", { d: "M17 14v.01", key: "11cswd" }],
      ["path", { d: "M20 11v.01", key: "19e0od" }]
    ]);
    var Shrink = createLucideIcon("Shrink", [
      ["path", { d: "m15 15 6 6m-6-6v4.8m0-4.8h4.8", key: "17vawe" }],
      ["path", { d: "M9 19.8V15m0 0H4.2M9 15l-6 6", key: "chjx8e" }],
      ["path", { d: "M15 4.2V9m0 0h4.8M15 9l6-6", key: "lav6yq" }],
      ["path", { d: "M9 4.2V9m0 0H4.2M9 9 3 3", key: "1pxi2q" }]
    ]);
    var Shrub = createLucideIcon("Shrub", [
      ["path", { d: "M12 22v-7l-2-2", key: "eqv9mc" }],
      ["path", { d: "M17 8v.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0Z", key: "ubcgy" }],
      ["path", { d: "m14 14-2 2", key: "847xa2" }]
    ]);
    var Shuffle = createLucideIcon("Shuffle", [
      ["path", { d: "m18 14 4 4-4 4", key: "10pe0f" }],
      ["path", { d: "m18 2 4 4-4 4", key: "pucp1d" }],
      ["path", { d: "M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22", key: "1ailkh" }],
      ["path", { d: "M2 6h1.972a4 4 0 0 1 3.6 2.2", key: "km57vx" }],
      ["path", { d: "M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45", key: "os18l9" }]
    ]);
    var Sigma = createLucideIcon("Sigma", [
      [
        "path",
        {
          d: "M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2",
          key: "wuwx1p"
        }
      ]
    ]);
    var SignalHigh = createLucideIcon("SignalHigh", [
      ["path", { d: "M2 20h.01", key: "4haj6o" }],
      ["path", { d: "M7 20v-4", key: "j294jx" }],
      ["path", { d: "M12 20v-8", key: "i3yub9" }],
      ["path", { d: "M17 20V8", key: "1tkaf5" }]
    ]);
    var SignalLow = createLucideIcon("SignalLow", [
      ["path", { d: "M2 20h.01", key: "4haj6o" }],
      ["path", { d: "M7 20v-4", key: "j294jx" }]
    ]);
    var SignalMedium = createLucideIcon("SignalMedium", [
      ["path", { d: "M2 20h.01", key: "4haj6o" }],
      ["path", { d: "M7 20v-4", key: "j294jx" }],
      ["path", { d: "M12 20v-8", key: "i3yub9" }]
    ]);
    var SignalZero = createLucideIcon("SignalZero", [["path", { d: "M2 20h.01", key: "4haj6o" }]]);
    var Signal = createLucideIcon("Signal", [
      ["path", { d: "M2 20h.01", key: "4haj6o" }],
      ["path", { d: "M7 20v-4", key: "j294jx" }],
      ["path", { d: "M12 20v-8", key: "i3yub9" }],
      ["path", { d: "M17 20V8", key: "1tkaf5" }],
      ["path", { d: "M22 4v16", key: "sih9yq" }]
    ]);
    var Signature = createLucideIcon("Signature", [
      [
        "path",
        {
          d: "m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284",
          key: "y32ogt"
        }
      ],
      ["path", { d: "M3 21h18", key: "itz85i" }]
    ]);
    var SignpostBig = createLucideIcon("SignpostBig", [
      ["path", { d: "M10 9H4L2 7l2-2h6", key: "1hq7x2" }],
      ["path", { d: "M14 5h6l2 2-2 2h-6", key: "bv62ej" }],
      ["path", { d: "M10 22V4a2 2 0 1 1 4 0v18", key: "eqpcf2" }],
      ["path", { d: "M8 22h8", key: "rmew8v" }]
    ]);
    var Signpost = createLucideIcon("Signpost", [
      ["path", { d: "M12 13v8", key: "1l5pq0" }],
      ["path", { d: "M12 3v3", key: "1n5kay" }],
      [
        "path",
        {
          d: "M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z",
          key: "gqqp9m"
        }
      ]
    ]);
    var Siren = createLucideIcon("Siren", [
      ["path", { d: "M7 18v-6a5 5 0 1 1 10 0v6", key: "pcx96s" }],
      [
        "path",
        { d: "M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z", key: "1b4s83" }
      ],
      ["path", { d: "M21 12h1", key: "jtio3y" }],
      ["path", { d: "M18.5 4.5 18 5", key: "g5sp9y" }],
      ["path", { d: "M2 12h1", key: "1uaihz" }],
      ["path", { d: "M12 2v1", key: "11qlp1" }],
      ["path", { d: "m4.929 4.929.707.707", key: "1i51kw" }],
      ["path", { d: "M12 12v6", key: "3ahymv" }]
    ]);
    var SkipBack = createLucideIcon("SkipBack", [
      ["polygon", { points: "19 20 9 12 19 4 19 20", key: "o2sva" }],
      ["line", { x1: "5", x2: "5", y1: "19", y2: "5", key: "1ocqjk" }]
    ]);
    var SkipForward = createLucideIcon("SkipForward", [
      ["polygon", { points: "5 4 15 12 5 20 5 4", key: "16p6eg" }],
      ["line", { x1: "19", x2: "19", y1: "5", y2: "19", key: "futhcm" }]
    ]);
    var Skull = createLucideIcon("Skull", [
      ["path", { d: "m12.5 17-.5-1-.5 1h1z", key: "3me087" }],
      [
        "path",
        {
          d: "M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z",
          key: "1o5pge"
        }
      ],
      ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
      ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }]
    ]);
    var Slack = createLucideIcon("Slack", [
      ["rect", { width: "3", height: "8", x: "13", y: "2", rx: "1.5", key: "diqz80" }],
      ["path", { d: "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5", key: "183iwg" }],
      ["rect", { width: "3", height: "8", x: "8", y: "14", rx: "1.5", key: "hqg7r1" }],
      ["path", { d: "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5", key: "76g71w" }],
      ["rect", { width: "8", height: "3", x: "14", y: "13", rx: "1.5", key: "1kmz0a" }],
      ["path", { d: "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5", key: "jc4sz0" }],
      ["rect", { width: "8", height: "3", x: "2", y: "8", rx: "1.5", key: "1omvl4" }],
      ["path", { d: "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5", key: "16f3cl" }]
    ]);
    var Slash = createLucideIcon("Slash", [["path", { d: "M22 2 2 22", key: "y4kqgn" }]]);
    var Slice = createLucideIcon("Slice", [
      [
        "path",
        {
          d: "M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14",
          key: "1sllp5"
        }
      ]
    ]);
    var SlidersHorizontal = createLucideIcon("SlidersHorizontal", [
      ["line", { x1: "21", x2: "14", y1: "4", y2: "4", key: "obuewd" }],
      ["line", { x1: "10", x2: "3", y1: "4", y2: "4", key: "1q6298" }],
      ["line", { x1: "21", x2: "12", y1: "12", y2: "12", key: "1iu8h1" }],
      ["line", { x1: "8", x2: "3", y1: "12", y2: "12", key: "ntss68" }],
      ["line", { x1: "21", x2: "16", y1: "20", y2: "20", key: "14d8ph" }],
      ["line", { x1: "12", x2: "3", y1: "20", y2: "20", key: "m0wm8r" }],
      ["line", { x1: "14", x2: "14", y1: "2", y2: "6", key: "14e1ph" }],
      ["line", { x1: "8", x2: "8", y1: "10", y2: "14", key: "1i6ji0" }],
      ["line", { x1: "16", x2: "16", y1: "18", y2: "22", key: "1lctlv" }]
    ]);
    var SlidersVertical = createLucideIcon("SlidersVertical", [
      ["line", { x1: "4", x2: "4", y1: "21", y2: "14", key: "1p332r" }],
      ["line", { x1: "4", x2: "4", y1: "10", y2: "3", key: "gb41h5" }],
      ["line", { x1: "12", x2: "12", y1: "21", y2: "12", key: "hf2csr" }],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "3", key: "1kfi7u" }],
      ["line", { x1: "20", x2: "20", y1: "21", y2: "16", key: "1lhrwl" }],
      ["line", { x1: "20", x2: "20", y1: "12", y2: "3", key: "16vvfq" }],
      ["line", { x1: "2", x2: "6", y1: "14", y2: "14", key: "1uebub" }],
      ["line", { x1: "10", x2: "14", y1: "8", y2: "8", key: "1yglbp" }],
      ["line", { x1: "18", x2: "22", y1: "16", y2: "16", key: "1jxqpz" }]
    ]);
    var SmartphoneCharging = createLucideIcon("SmartphoneCharging", [
      ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
      ["path", { d: "M12.667 8 10 12h4l-2.667 4", key: "h9lk2d" }]
    ]);
    var SmartphoneNfc = createLucideIcon("SmartphoneNfc", [
      ["rect", { width: "7", height: "12", x: "2", y: "6", rx: "1", key: "5nje8w" }],
      ["path", { d: "M13 8.32a7.43 7.43 0 0 1 0 7.36", key: "1g306n" }],
      ["path", { d: "M16.46 6.21a11.76 11.76 0 0 1 0 11.58", key: "uqvjvo" }],
      ["path", { d: "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8", key: "ujntz3" }]
    ]);
    var Smartphone = createLucideIcon("Smartphone", [
      ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
      ["path", { d: "M12 18h.01", key: "mhygvu" }]
    ]);
    var SmilePlus = createLucideIcon("SmilePlus", [
      ["path", { d: "M22 11v1a10 10 0 1 1-9-10", key: "ew0xw9" }],
      ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
      ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
      ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }],
      ["path", { d: "M16 5h6", key: "1vod17" }],
      ["path", { d: "M19 2v6", key: "4bpg5p" }]
    ]);
    var Smile = createLucideIcon("Smile", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["path", { d: "M8 14s1.5 2 4 2 4-2 4-2", key: "1y1vjs" }],
      ["line", { x1: "9", x2: "9.01", y1: "9", y2: "9", key: "yxxnd0" }],
      ["line", { x1: "15", x2: "15.01", y1: "9", y2: "9", key: "1p4y9e" }]
    ]);
    var Snail = createLucideIcon("Snail", [
      ["path", { d: "M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0", key: "hneq2s" }],
      ["circle", { cx: "10", cy: "13", r: "8", key: "194lz3" }],
      ["path", { d: "M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6", key: "ixqyt7" }],
      ["path", { d: "M18 3 19.1 5.2", key: "9tjm43" }],
      ["path", { d: "M22 3 20.9 5.2", key: "j3odrs" }]
    ]);
    var Snowflake = createLucideIcon("Snowflake", [
      ["line", { x1: "2", x2: "22", y1: "12", y2: "12", key: "1dnqot" }],
      ["line", { x1: "12", x2: "12", y1: "2", y2: "22", key: "7eqyqh" }],
      ["path", { d: "m20 16-4-4 4-4", key: "rquw4f" }],
      ["path", { d: "m4 8 4 4-4 4", key: "12s3z9" }],
      ["path", { d: "m16 4-4 4-4-4", key: "1tumq1" }],
      ["path", { d: "m8 20 4-4 4 4", key: "9p200w" }]
    ]);
    var Sofa = createLucideIcon("Sofa", [
      ["path", { d: "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3", key: "1dgpiv" }],
      [
        "path",
        {
          d: "M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z",
          key: "xacw8m"
        }
      ],
      ["path", { d: "M4 18v2", key: "jwo5n2" }],
      ["path", { d: "M20 18v2", key: "1ar1qi" }],
      ["path", { d: "M12 4v9", key: "oqhhn3" }]
    ]);
    var Soup = createLucideIcon("Soup", [
      ["path", { d: "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z", key: "4rw317" }],
      ["path", { d: "M7 21h10", key: "1b0cd5" }],
      ["path", { d: "M19.5 12 22 6", key: "shfsr5" }],
      [
        "path",
        {
          d: "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62",
          key: "rpc6vp"
        }
      ],
      [
        "path",
        {
          d: "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62",
          key: "1lf63m"
        }
      ],
      [
        "path",
        { d: "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62", key: "97tijn" }
      ]
    ]);
    var Space = createLucideIcon("Space", [
      ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
    ]);
    var Spade = createLucideIcon("Spade", [
      [
        "path",
        {
          d: "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z",
          key: "40bo9n"
        }
      ],
      ["path", { d: "M12 18v4", key: "jadmvz" }]
    ]);
    var Sparkle = createLucideIcon("Sparkle", [
      [
        "path",
        {
          d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
          key: "4pj2yx"
        }
      ]
    ]);
    var Sparkles = createLucideIcon("Sparkles", [
      [
        "path",
        {
          d: "M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z",
          key: "4pj2yx"
        }
      ],
      ["path", { d: "M20 3v4", key: "1olli1" }],
      ["path", { d: "M22 5h-4", key: "1gvqau" }],
      ["path", { d: "M4 17v2", key: "vumght" }],
      ["path", { d: "M5 18H3", key: "zchphs" }]
    ]);
    var Speaker = createLucideIcon("Speaker", [
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", key: "1nb95v" }],
      ["path", { d: "M12 6h.01", key: "1vi96p" }],
      ["circle", { cx: "12", cy: "14", r: "4", key: "1jruaj" }],
      ["path", { d: "M12 14h.01", key: "1etili" }]
    ]);
    var Speech = createLucideIcon("Speech", [
      [
        "path",
        {
          d: "M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20",
          key: "11atix"
        }
      ],
      ["path", { d: "M19.8 17.8a7.5 7.5 0 0 0 .003-10.603", key: "yol142" }],
      ["path", { d: "M17 15a3.5 3.5 0 0 0-.025-4.975", key: "ssbmkc" }]
    ]);
    var SpellCheck2 = createLucideIcon("SpellCheck2", [
      ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      [
        "path",
        {
          d: "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1",
          key: "8mdmtu"
        }
      ]
    ]);
    var SpellCheck = createLucideIcon("SpellCheck", [
      ["path", { d: "m6 16 6-12 6 12", key: "1b4byz" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "m16 20 2 2 4-4", key: "13tcca" }]
    ]);
    var Spline = createLucideIcon("Spline", [
      ["circle", { cx: "19", cy: "5", r: "2", key: "mhkx31" }],
      ["circle", { cx: "5", cy: "19", r: "2", key: "v8kfzx" }],
      ["path", { d: "M5 17A12 12 0 0 1 17 5", key: "1okkup" }]
    ]);
    var Split = createLucideIcon("Split", [
      ["path", { d: "M16 3h5v5", key: "1806ms" }],
      ["path", { d: "M8 3H3v5", key: "15dfkv" }],
      ["path", { d: "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3", key: "1qrqzj" }],
      ["path", { d: "m15 9 6-6", key: "ko1vev" }]
    ]);
    var SprayCan = createLucideIcon("SprayCan", [
      ["path", { d: "M3 3h.01", key: "159qn6" }],
      ["path", { d: "M7 5h.01", key: "1hq22a" }],
      ["path", { d: "M11 7h.01", key: "1osv80" }],
      ["path", { d: "M3 7h.01", key: "1xzrh3" }],
      ["path", { d: "M7 9h.01", key: "19b3jx" }],
      ["path", { d: "M3 11h.01", key: "1eifu7" }],
      ["rect", { width: "4", height: "4", x: "15", y: "5", key: "mri9e4" }],
      ["path", { d: "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2", key: "aib6hk" }],
      ["path", { d: "m13 14 8-2", key: "1d7bmk" }],
      ["path", { d: "m13 19 8-2", key: "1y2vml" }]
    ]);
    var Sprout = createLucideIcon("Sprout", [
      ["path", { d: "M7 20h10", key: "e6iznv" }],
      ["path", { d: "M10 20c5.5-2.5.8-6.4 3-10", key: "161w41" }],
      [
        "path",
        {
          d: "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z",
          key: "9gtqwd"
        }
      ],
      [
        "path",
        {
          d: "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z",
          key: "bkxnd2"
        }
      ]
    ]);
    var SquareActivity = createLucideIcon("SquareActivity", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M17 12h-2l-2 5-2-10-2 5H7", key: "15hlnc" }]
    ]);
    var SquareArrowDownLeft = createLucideIcon("SquareArrowDownLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m16 8-8 8", key: "166keh" }],
      ["path", { d: "M16 16H8V8", key: "1w2ppm" }]
    ]);
    var SquareArrowDownRight = createLucideIcon("SquareArrowDownRight", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m8 8 8 8", key: "1imecy" }],
      ["path", { d: "M16 8v8H8", key: "1lbpgo" }]
    ]);
    var SquareArrowDown = createLucideIcon("SquareArrowDown", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M12 8v8", key: "napkw2" }],
      ["path", { d: "m8 12 4 4 4-4", key: "k98ssh" }]
    ]);
    var SquareArrowLeft = createLucideIcon("SquareArrowLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m12 8-4 4 4 4", key: "15vm53" }],
      ["path", { d: "M16 12H8", key: "1fr5h0" }]
    ]);
    var SquareArrowOutDownLeft = createLucideIcon("SquareArrowOutDownLeft", [
      ["path", { d: "M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6", key: "14qz4y" }],
      ["path", { d: "m3 21 9-9", key: "1jfql5" }],
      ["path", { d: "M9 21H3v-6", key: "wtvkvv" }]
    ]);
    var SquareArrowOutDownRight = createLucideIcon("SquareArrowOutDownRight", [
      ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }],
      ["path", { d: "m21 21-9-9", key: "1et2py" }],
      ["path", { d: "M21 15v6h-6", key: "1jko0i" }]
    ]);
    var SquareArrowOutUpLeft = createLucideIcon("SquareArrowOutUpLeft", [
      ["path", { d: "M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6", key: "14mv1t" }],
      ["path", { d: "m3 3 9 9", key: "rks13r" }],
      ["path", { d: "M3 9V3h6", key: "ira0h2" }]
    ]);
    var SquareArrowOutUpRight = createLucideIcon("SquareArrowOutUpRight", [
      ["path", { d: "M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6", key: "y09zxi" }],
      ["path", { d: "m21 3-9 9", key: "mpx6sq" }],
      ["path", { d: "M15 3h6v6", key: "1q9fwt" }]
    ]);
    var SquareArrowRight = createLucideIcon("SquareArrowRight", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "m12 16 4-4-4-4", key: "1i9zcv" }]
    ]);
    var SquareArrowUpLeft = createLucideIcon("SquareArrowUpLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 16V8h8", key: "19xb1h" }],
      ["path", { d: "M16 16 8 8", key: "1qdy8n" }]
    ]);
    var SquareArrowUpRight = createLucideIcon("SquareArrowUpRight", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 8h8v8", key: "b65dnt" }],
      ["path", { d: "m8 16 8-8", key: "13b9ih" }]
    ]);
    var SquareArrowUp = createLucideIcon("SquareArrowUp", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m16 12-4-4-4 4", key: "177agl" }],
      ["path", { d: "M12 16V8", key: "1sbj14" }]
    ]);
    var SquareAsterisk = createLucideIcon("SquareAsterisk", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M12 8v8", key: "napkw2" }],
      ["path", { d: "m8.5 14 7-4", key: "12hpby" }],
      ["path", { d: "m8.5 10 7 4", key: "wwy2dy" }]
    ]);
    var SquareBottomDashedScissors = createLucideIcon("SquareBottomDashedScissors", [
      [
        "path",
        { d: "M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2", key: "1vzg26" }
      ],
      ["path", { d: "M10 22H8", key: "euku7a" }],
      ["path", { d: "M16 22h-2", key: "18d249" }],
      ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
      ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
      ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
      ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
      ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
    ]);
    var SquareChartGantt = createLucideIcon("SquareChartGantt", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 8h7", key: "kbo1nt" }],
      ["path", { d: "M8 12h6", key: "ikassy" }],
      ["path", { d: "M11 16h5", key: "oq65wt" }]
    ]);
    var SquareCheckBig = createLucideIcon("SquareCheckBig", [
      ["path", { d: "M21 10.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.5", key: "1uzm8b" }],
      ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
    ]);
    var SquareCheck = createLucideIcon("SquareCheck", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
    ]);
    var SquareChevronDown = createLucideIcon("SquareChevronDown", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m16 10-4 4-4-4", key: "894hmk" }]
    ]);
    var SquareChevronLeft = createLucideIcon("SquareChevronLeft", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m14 16-4-4 4-4", key: "ojs7w8" }]
    ]);
    var SquareChevronRight = createLucideIcon("SquareChevronRight", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m10 8 4 4-4 4", key: "1wy4r4" }]
    ]);
    var SquareChevronUp = createLucideIcon("SquareChevronUp", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m8 14 4-4 4 4", key: "fy2ptz" }]
    ]);
    var SquareCode = createLucideIcon("SquareCode", [
      ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
      ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
    ]);
    var SquareDashedBottomCode = createLucideIcon("SquareDashedBottomCode", [
      ["path", { d: "M10 9.5 8 12l2 2.5", key: "3mjy60" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }],
      ["path", { d: "m14 9.5 2 2.5-2 2.5", key: "1bir2l" }],
      [
        "path",
        { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
      ],
      ["path", { d: "M9 21h1", key: "15o7lz" }]
    ]);
    var SquareDashedBottom = createLucideIcon("SquareDashedBottom", [
      [
        "path",
        { d: "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2", key: "as5y1o" }
      ],
      ["path", { d: "M9 21h1", key: "15o7lz" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }]
    ]);
    var SquareDashedKanban = createLucideIcon("SquareDashedKanban", [
      ["path", { d: "M8 7v7", key: "1x2jlm" }],
      ["path", { d: "M12 7v4", key: "xawao1" }],
      ["path", { d: "M16 7v9", key: "1hp2iy" }],
      ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
      ["path", { d: "M9 3h1", key: "1yesri" }],
      ["path", { d: "M14 3h1", key: "1ec4yj" }],
      ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
      ["path", { d: "M21 9v1", key: "mxsmne" }],
      ["path", { d: "M21 14v1", key: "169vum" }],
      ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }],
      ["path", { d: "M9 21h1", key: "15o7lz" }],
      ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
      ["path", { d: "M3 14v1", key: "vnatye" }],
      ["path", { d: "M3 9v1", key: "1r0deq" }]
    ]);
    var SquareDashedMousePointer = createLucideIcon("SquareDashedMousePointer", [
      [
        "path",
        {
          d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z",
          key: "xwnzip"
        }
      ],
      ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
      ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
      ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
      ["path", { d: "M9 3h1", key: "1yesri" }],
      ["path", { d: "M9 21h2", key: "1qve2z" }],
      ["path", { d: "M14 3h1", key: "1ec4yj" }],
      ["path", { d: "M3 9v1", key: "1r0deq" }],
      ["path", { d: "M21 9v2", key: "p14lih" }],
      ["path", { d: "M3 14v1", key: "vnatye" }]
    ]);
    var SquareDashed = createLucideIcon("SquareDashed", [
      ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
      ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
      ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
      ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
      ["path", { d: "M9 3h1", key: "1yesri" }],
      ["path", { d: "M9 21h1", key: "15o7lz" }],
      ["path", { d: "M14 3h1", key: "1ec4yj" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }],
      ["path", { d: "M3 9v1", key: "1r0deq" }],
      ["path", { d: "M21 9v1", key: "mxsmne" }],
      ["path", { d: "M3 14v1", key: "vnatye" }],
      ["path", { d: "M21 14v1", key: "169vum" }]
    ]);
    var SquareDivide = createLucideIcon("SquareDivide", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["line", { x1: "8", x2: "16", y1: "12", y2: "12", key: "1jonct" }],
      ["line", { x1: "12", x2: "12", y1: "16", y2: "16", key: "aqc6ln" }],
      ["line", { x1: "12", x2: "12", y1: "8", y2: "8", key: "1mkcni" }]
    ]);
    var SquareDot = createLucideIcon("SquareDot", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }]
    ]);
    var SquareEqual = createLucideIcon("SquareEqual", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 10h10", key: "1101jm" }],
      ["path", { d: "M7 14h10", key: "1mhdw3" }]
    ]);
    var SquareFunction = createLucideIcon("SquareFunction", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3", key: "m1af9g" }],
      ["path", { d: "M9 11.2h5.7", key: "3zgcl2" }]
    ]);
    var SquareKanban = createLucideIcon("SquareKanban", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 7v7", key: "1x2jlm" }],
      ["path", { d: "M12 7v4", key: "xawao1" }],
      ["path", { d: "M16 7v9", key: "1hp2iy" }]
    ]);
    var SquareLibrary = createLucideIcon("SquareLibrary", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 7v10", key: "d5nglc" }],
      ["path", { d: "M11 7v10", key: "pptsnr" }],
      ["path", { d: "m15 7 2 10", key: "1m7qm5" }]
    ]);
    var SquareM = createLucideIcon("SquareM", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 16V8l4 4 4-4v8", key: "141u4e" }]
    ]);
    var SquareMenu = createLucideIcon("SquareMenu", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 8h10", key: "1jw688" }],
      ["path", { d: "M7 12h10", key: "b7w52i" }],
      ["path", { d: "M7 16h10", key: "wp8him" }]
    ]);
    var SquareMinus = createLucideIcon("SquareMinus", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }]
    ]);
    var SquareMousePointer = createLucideIcon("SquareMousePointer", [
      [
        "path",
        {
          d: "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z",
          key: "xwnzip"
        }
      ],
      ["path", { d: "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6", key: "14rsvq" }]
    ]);
    var SquareParkingOff = createLucideIcon("SquareParkingOff", [
      ["path", { d: "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41", key: "9l1ft6" }],
      ["path", { d: "M3 8.7V19a2 2 0 0 0 2 2h10.3", key: "17knke" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M13 13a3 3 0 1 0 0-6H9v2", key: "uoagbd" }],
      ["path", { d: "M9 17v-2.3", key: "1jxgo2" }]
    ]);
    var SquareParking = createLucideIcon("SquareParking", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M9 17V7h4a3 3 0 0 1 0 6H9", key: "1dfk2c" }]
    ]);
    var SquarePen = createLucideIcon("SquarePen", [
      ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
      [
        "path",
        {
          d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z",
          key: "ohrbg2"
        }
      ]
    ]);
    var SquarePercent = createLucideIcon("SquarePercent", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["path", { d: "M15 15h.01", key: "lqbp3k" }]
    ]);
    var SquarePi = createLucideIcon("SquarePi", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M7 7h10", key: "udp07y" }],
      ["path", { d: "M10 7v10", key: "i1d9ee" }],
      ["path", { d: "M16 17a2 2 0 0 1-2-2V7", key: "ftwdc7" }]
    ]);
    var SquarePilcrow = createLucideIcon("SquarePilcrow", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M12 12H9.5a2.5 2.5 0 0 1 0-5H17", key: "1l9586" }],
      ["path", { d: "M12 7v10", key: "jspqdw" }],
      ["path", { d: "M16 7v10", key: "lavkr4" }]
    ]);
    var SquarePlay = createLucideIcon("SquarePlay", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "m9 8 6 4-6 4Z", key: "f1r3lt" }]
    ]);
    var SquarePlus = createLucideIcon("SquarePlus", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["path", { d: "M12 8v8", key: "napkw2" }]
    ]);
    var SquarePower = createLucideIcon("SquarePower", [
      ["path", { d: "M12 7v4", key: "xawao1" }],
      ["path", { d: "M7.998 9.003a5 5 0 1 0 8-.005", key: "1pek45" }],
      ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
    ]);
    var SquareRadical = createLucideIcon("SquareRadical", [
      ["path", { d: "M7 12h2l2 5 2-10h4", key: "1fxv6h" }],
      ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }]
    ]);
    var SquareScissors = createLucideIcon("SquareScissors", [
      ["rect", { width: "20", height: "20", x: "2", y: "2", rx: "2", key: "1btzen" }],
      ["circle", { cx: "8", cy: "8", r: "2", key: "14cg06" }],
      ["path", { d: "M9.414 9.414 12 12", key: "qz4lzr" }],
      ["path", { d: "M14.8 14.8 18 18", key: "11flf1" }],
      ["circle", { cx: "8", cy: "16", r: "2", key: "1acxsx" }],
      ["path", { d: "m18 6-8.586 8.586", key: "11kzk1" }]
    ]);
    var SquareSigma = createLucideIcon("SquareSigma", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M16 8.9V7H8l4 5-4 5h8v-1.9", key: "9nih0i" }]
    ]);
    var SquareSlash = createLucideIcon("SquareSlash", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["line", { x1: "9", x2: "15", y1: "15", y2: "9", key: "1dfufj" }]
    ]);
    var SquareSplitHorizontal = createLucideIcon("SquareSplitHorizontal", [
      ["path", { d: "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3", key: "lubmu8" }],
      ["path", { d: "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3", key: "1ag34g" }],
      ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
    ]);
    var SquareSplitVertical = createLucideIcon("SquareSplitVertical", [
      ["path", { d: "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3", key: "1pi83i" }],
      ["path", { d: "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3", key: "ido5k7" }],
      ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
    ]);
    var SquareSquare = createLucideIcon("SquareSquare", [
      ["rect", { x: "3", y: "3", width: "18", height: "18", rx: "2", key: "h1oib" }],
      ["rect", { x: "8", y: "8", width: "8", height: "8", rx: "1", key: "z9xiuo" }]
    ]);
    var SquareStack = createLucideIcon("SquareStack", [
      ["path", { d: "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "4i38lg" }],
      ["path", { d: "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2", key: "mlte4a" }],
      ["rect", { width: "8", height: "8", x: "14", y: "14", rx: "2", key: "1fa9i4" }]
    ]);
    var SquareTerminal = createLucideIcon("SquareTerminal", [
      ["path", { d: "m7 11 2-2-2-2", key: "1lz0vl" }],
      ["path", { d: "M11 13h4", key: "1p7l4v" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }]
    ]);
    var SquareUserRound = createLucideIcon("SquareUserRound", [
      ["path", { d: "M18 21a6 6 0 0 0-12 0", key: "kaz2du" }],
      ["circle", { cx: "12", cy: "11", r: "4", key: "1gt34v" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
    ]);
    var SquareUser = createLucideIcon("SquareUser", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2", key: "1m6ac2" }]
    ]);
    var SquareX = createLucideIcon("SquareX", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "m9 9 6 6", key: "z0biqf" }]
    ]);
    var Square = createLucideIcon("Square", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
    ]);
    var Squircle = createLucideIcon("Squircle", [
      ["path", { d: "M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9", key: "garfkc" }]
    ]);
    var Squirrel = createLucideIcon("Squirrel", [
      ["path", { d: "M15.236 22a3 3 0 0 0-2.2-5", key: "21bitc" }],
      ["path", { d: "M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4", key: "oh0fg0" }],
      ["path", { d: "M18 13h.01", key: "9veqaj" }],
      [
        "path",
        {
          d: "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10",
          key: "980v8a"
        }
      ]
    ]);
    var Stamp = createLucideIcon("Stamp", [
      ["path", { d: "M5 22h14", key: "ehvnwv" }],
      [
        "path",
        {
          d: "M19.27 13.73A2.5 2.5 0 0 0 17.5 13h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-1.5c0-.66-.26-1.3-.73-1.77Z",
          key: "1sy9ra"
        }
      ],
      [
        "path",
        { d: "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-3-3c-1.66 0-3 1-3 3s1 2 1 3.5V13", key: "cnxgux" }
      ]
    ]);
    var StarHalf = createLucideIcon("StarHalf", [
      [
        "path",
        {
          d: "M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2",
          key: "2ksp49"
        }
      ]
    ]);
    var StarOff = createLucideIcon("StarOff", [
      ["path", { d: "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43", key: "16m0ql" }],
      ["path", { d: "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91", key: "1vt8nq" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Star = createLucideIcon("Star", [
      [
        "path",
        {
          d: "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z",
          key: "r04s7s"
        }
      ]
    ]);
    var StepBack = createLucideIcon("StepBack", [
      ["line", { x1: "18", x2: "18", y1: "20", y2: "4", key: "cun8e5" }],
      ["polygon", { points: "14,20 4,12 14,4", key: "ypakod" }]
    ]);
    var StepForward = createLucideIcon("StepForward", [
      ["line", { x1: "6", x2: "6", y1: "4", y2: "20", key: "fy8qot" }],
      ["polygon", { points: "10,4 20,12 10,20", key: "1mc1pf" }]
    ]);
    var Stethoscope = createLucideIcon("Stethoscope", [
      ["path", { d: "M11 2v2", key: "1539x4" }],
      ["path", { d: "M5 2v2", key: "1yf1q8" }],
      ["path", { d: "M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1", key: "rb5t3r" }],
      ["path", { d: "M8 15a6 6 0 0 0 12 0v-3", key: "x18d4x" }],
      ["circle", { cx: "20", cy: "10", r: "2", key: "ts1r5v" }]
    ]);
    var Sticker = createLucideIcon("Sticker", [
      [
        "path",
        { d: "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z", key: "1wis1t" }
      ],
      ["path", { d: "M14 3v4a2 2 0 0 0 2 2h4", key: "36rjfy" }],
      ["path", { d: "M8 13h.01", key: "1sbv64" }],
      ["path", { d: "M16 13h.01", key: "wip0gl" }],
      ["path", { d: "M10 16s.8 1 2 1c1.3 0 2-1 2-1", key: "1vvgv3" }]
    ]);
    var StickyNote = createLucideIcon("StickyNote", [
      ["path", { d: "M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z", key: "qazsjp" }],
      ["path", { d: "M15 3v4a2 2 0 0 0 2 2h4", key: "40519r" }]
    ]);
    var Store = createLucideIcon("Store", [
      ["path", { d: "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7", key: "ztvudi" }],
      ["path", { d: "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8", key: "1b2hhj" }],
      ["path", { d: "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4", key: "2ebpfo" }],
      ["path", { d: "M2 7h20", key: "1fcdvo" }],
      [
        "path",
        {
          d: "M22 7v3a2 2 0 0 1-2 2a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12a2 2 0 0 1-2-2V7",
          key: "6c3vgh"
        }
      ]
    ]);
    var StretchHorizontal = createLucideIcon("StretchHorizontal", [
      ["rect", { width: "20", height: "6", x: "2", y: "4", rx: "2", key: "qdearl" }],
      ["rect", { width: "20", height: "6", x: "2", y: "14", rx: "2", key: "1xrn6j" }]
    ]);
    var StretchVertical = createLucideIcon("StretchVertical", [
      ["rect", { width: "6", height: "20", x: "4", y: "2", rx: "2", key: "19qu7m" }],
      ["rect", { width: "6", height: "20", x: "14", y: "2", rx: "2", key: "24v0nk" }]
    ]);
    var Strikethrough = createLucideIcon("Strikethrough", [
      ["path", { d: "M16 4H9a3 3 0 0 0-2.83 4", key: "43sutm" }],
      ["path", { d: "M14 12a4 4 0 0 1 0 8H6", key: "nlfj13" }],
      ["line", { x1: "4", x2: "20", y1: "12", y2: "12", key: "1e0a9i" }]
    ]);
    var Subscript = createLucideIcon("Subscript", [
      ["path", { d: "m4 5 8 8", key: "1eunvl" }],
      ["path", { d: "m12 5-8 8", key: "1ah0jp" }],
      [
        "path",
        {
          d: "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07",
          key: "e8ta8j"
        }
      ]
    ]);
    var SunDim = createLucideIcon("SunDim", [
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["path", { d: "M12 4h.01", key: "1ujb9j" }],
      ["path", { d: "M20 12h.01", key: "1ykeid" }],
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M4 12h.01", key: "158zrr" }],
      ["path", { d: "M17.657 6.343h.01", key: "31pqzk" }],
      ["path", { d: "M17.657 17.657h.01", key: "jehnf4" }],
      ["path", { d: "M6.343 17.657h.01", key: "gdk6ow" }],
      ["path", { d: "M6.343 6.343h.01", key: "1uurf0" }]
    ]);
    var SunMedium = createLucideIcon("SunMedium", [
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["path", { d: "M12 3v1", key: "1asbbs" }],
      ["path", { d: "M12 20v1", key: "1wcdkc" }],
      ["path", { d: "M3 12h1", key: "lp3yf2" }],
      ["path", { d: "M20 12h1", key: "1vloll" }],
      ["path", { d: "m18.364 5.636-.707.707", key: "1hakh0" }],
      ["path", { d: "m6.343 17.657-.707.707", key: "18m9nf" }],
      ["path", { d: "m5.636 5.636.707.707", key: "1xv1c5" }],
      ["path", { d: "m17.657 17.657.707.707", key: "vl76zb" }]
    ]);
    var SunMoon = createLucideIcon("SunMoon", [
      ["path", { d: "M12 8a2.83 2.83 0 0 0 4 4 4 4 0 1 1-4-4", key: "1fu5g2" }],
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "m4.9 4.9 1.4 1.4", key: "b9915j" }],
      ["path", { d: "m17.7 17.7 1.4 1.4", key: "qc3ed3" }],
      ["path", { d: "M2 12h2", key: "1t8f8n" }],
      ["path", { d: "M20 12h2", key: "1q8mjw" }],
      ["path", { d: "m6.3 17.7-1.4 1.4", key: "5gca6" }],
      ["path", { d: "m19.1 4.9-1.4 1.4", key: "wpu9u6" }]
    ]);
    var SunSnow = createLucideIcon("SunSnow", [
      ["path", { d: "M10 9a3 3 0 1 0 0 6", key: "6zmtdl" }],
      ["path", { d: "M2 12h1", key: "1uaihz" }],
      ["path", { d: "M14 21V3", key: "1llu3z" }],
      ["path", { d: "M10 4V3", key: "pkzwkn" }],
      ["path", { d: "M10 21v-1", key: "1u8rkd" }],
      ["path", { d: "m3.64 18.36.7-.7", key: "105rm9" }],
      ["path", { d: "m4.34 6.34-.7-.7", key: "d3unjp" }],
      ["path", { d: "M14 12h8", key: "4f43i9" }],
      ["path", { d: "m17 4-3 3", key: "15jcng" }],
      ["path", { d: "m14 17 3 3", key: "6tlq38" }],
      ["path", { d: "m21 15-3-3 3-3", key: "1nlnje" }]
    ]);
    var Sun = createLucideIcon("Sun", [
      ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
      ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
      ["path", { d: "M2 12h2", key: "1t8f8n" }],
      ["path", { d: "M20 12h2", key: "1q8mjw" }],
      ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
      ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
    ]);
    var Sunrise = createLucideIcon("Sunrise", [
      ["path", { d: "M12 2v8", key: "1q4o3n" }],
      ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
      ["path", { d: "M2 18h2", key: "j10viu" }],
      ["path", { d: "M20 18h2", key: "wocana" }],
      ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
      ["path", { d: "M22 22H2", key: "19qnx5" }],
      ["path", { d: "m8 6 4-4 4 4", key: "ybng9g" }],
      ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
    ]);
    var Sunset = createLucideIcon("Sunset", [
      ["path", { d: "M12 10V2", key: "16sf7g" }],
      ["path", { d: "m4.93 10.93 1.41 1.41", key: "2a7f42" }],
      ["path", { d: "M2 18h2", key: "j10viu" }],
      ["path", { d: "M20 18h2", key: "wocana" }],
      ["path", { d: "m19.07 10.93-1.41 1.41", key: "15zs5n" }],
      ["path", { d: "M22 22H2", key: "19qnx5" }],
      ["path", { d: "m16 6-4 4-4-4", key: "6wukr" }],
      ["path", { d: "M16 18a4 4 0 0 0-8 0", key: "1lzouq" }]
    ]);
    var Superscript = createLucideIcon("Superscript", [
      ["path", { d: "m4 19 8-8", key: "hr47gm" }],
      ["path", { d: "m12 19-8-8", key: "1dhhmo" }],
      [
        "path",
        {
          d: "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06",
          key: "1dfcux"
        }
      ]
    ]);
    var SwatchBook = createLucideIcon("SwatchBook", [
      ["path", { d: "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z", key: "1ldrpk" }],
      ["path", { d: "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7", key: "11i5po" }],
      ["path", { d: "M 7 17h.01", key: "1euzgo" }],
      [
        "path",
        {
          d: "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8",
          key: "o2gii7"
        }
      ]
    ]);
    var SwissFranc = createLucideIcon("SwissFranc", [
      ["path", { d: "M10 21V3h8", key: "br2l0g" }],
      ["path", { d: "M6 16h9", key: "2py0wn" }],
      ["path", { d: "M10 9.5h7", key: "13dmhz" }]
    ]);
    var SwitchCamera = createLucideIcon("SwitchCamera", [
      ["path", { d: "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5", key: "mtk2lu" }],
      ["path", { d: "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5", key: "120jsl" }],
      ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }],
      ["path", { d: "m18 22-3-3 3-3", key: "kgdoj7" }],
      ["path", { d: "m6 2 3 3-3 3", key: "1fnbkv" }]
    ]);
    var Sword = createLucideIcon("Sword", [
      ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
      ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
      ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
      ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }]
    ]);
    var Swords = createLucideIcon("Swords", [
      ["polyline", { points: "14.5 17.5 3 6 3 3 6 3 17.5 14.5", key: "1hfsw2" }],
      ["line", { x1: "13", x2: "19", y1: "19", y2: "13", key: "1vrmhu" }],
      ["line", { x1: "16", x2: "20", y1: "16", y2: "20", key: "1bron3" }],
      ["line", { x1: "19", x2: "21", y1: "21", y2: "19", key: "13pww6" }],
      ["polyline", { points: "14.5 6.5 18 3 21 3 21 6 17.5 9.5", key: "hbey2j" }],
      ["line", { x1: "5", x2: "9", y1: "14", y2: "18", key: "1hf58s" }],
      ["line", { x1: "7", x2: "4", y1: "17", y2: "20", key: "pidxm4" }],
      ["line", { x1: "3", x2: "5", y1: "19", y2: "21", key: "1pehsh" }]
    ]);
    var Syringe = createLucideIcon("Syringe", [
      ["path", { d: "m18 2 4 4", key: "22kx64" }],
      ["path", { d: "m17 7 3-3", key: "1w1zoj" }],
      ["path", { d: "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5", key: "1exhtz" }],
      ["path", { d: "m9 11 4 4", key: "rovt3i" }],
      ["path", { d: "m5 19-3 3", key: "59f2uf" }],
      ["path", { d: "m14 4 6 6", key: "yqp9t2" }]
    ]);
    var Table2 = createLucideIcon("Table2", [
      [
        "path",
        {
          d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
          key: "gugj83"
        }
      ]
    ]);
    var TableCellsMerge = createLucideIcon("TableCellsMerge", [
      ["path", { d: "M12 21v-6", key: "lihzve" }],
      ["path", { d: "M12 9V3", key: "da5inc" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
    ]);
    var TableCellsSplit = createLucideIcon("TableCellsSplit", [
      ["path", { d: "M12 15V9", key: "8c7uyn" }],
      ["path", { d: "M3 15h18", key: "5xshup" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }]
    ]);
    var TableColumnsSplit = createLucideIcon("TableColumnsSplit", [
      ["path", { d: "M14 14v2", key: "w2a1xv" }],
      ["path", { d: "M14 20v2", key: "1lq872" }],
      ["path", { d: "M14 2v2", key: "6buw04" }],
      ["path", { d: "M14 8v2", key: "i67w9a" }],
      ["path", { d: "M2 15h8", key: "82wtch" }],
      ["path", { d: "M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2", key: "up0l64" }],
      ["path", { d: "M2 9h8", key: "yelfik" }],
      ["path", { d: "M22 15h-4", key: "1es58f" }],
      ["path", { d: "M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2", key: "pdjoqf" }],
      ["path", { d: "M22 9h-4", key: "1luja7" }],
      ["path", { d: "M5 3v18", key: "14hmio" }]
    ]);
    var TableOfContents = createLucideIcon("TableOfContents", [
      ["path", { d: "M16 12H3", key: "1a2rj7" }],
      ["path", { d: "M16 18H3", key: "12xzn7" }],
      ["path", { d: "M16 6H3", key: "1wxfjs" }],
      ["path", { d: "M21 12h.01", key: "msek7k" }],
      ["path", { d: "M21 18h.01", key: "1e8rq1" }],
      ["path", { d: "M21 6h.01", key: "1koanj" }]
    ]);
    var TableProperties = createLucideIcon("TableProperties", [
      ["path", { d: "M15 3v18", key: "14nvp0" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M21 9H3", key: "1338ky" }],
      ["path", { d: "M21 15H3", key: "9uk58r" }]
    ]);
    var TableRowsSplit = createLucideIcon("TableRowsSplit", [
      ["path", { d: "M14 10h2", key: "1lstlu" }],
      ["path", { d: "M15 22v-8", key: "1fwwgm" }],
      ["path", { d: "M15 2v4", key: "1044rn" }],
      ["path", { d: "M2 10h2", key: "1r8dkt" }],
      ["path", { d: "M20 10h2", key: "1ug425" }],
      ["path", { d: "M3 19h18", key: "awlh7x" }],
      ["path", { d: "M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6", key: "ibqhof" }],
      ["path", { d: "M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2", key: "1uenja" }],
      ["path", { d: "M8 10h2", key: "66od0" }],
      ["path", { d: "M9 22v-8", key: "fmnu31" }],
      ["path", { d: "M9 2v4", key: "j1yeou" }]
    ]);
    var Table = createLucideIcon("Table", [
      ["path", { d: "M12 3v18", key: "108xh3" }],
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9h18", key: "1pudct" }],
      ["path", { d: "M3 15h18", key: "5xshup" }]
    ]);
    var TabletSmartphone = createLucideIcon("TabletSmartphone", [
      ["rect", { width: "10", height: "14", x: "3", y: "8", rx: "2", key: "1vrsiq" }],
      ["path", { d: "M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4", key: "1j4zmg" }],
      ["path", { d: "M8 18h.01", key: "lrp35t" }]
    ]);
    var Tablet = createLucideIcon("Tablet", [
      ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
      ["line", { x1: "12", x2: "12.01", y1: "18", y2: "18", key: "1dp563" }]
    ]);
    var Tablets = createLucideIcon("Tablets", [
      ["circle", { cx: "7", cy: "7", r: "5", key: "x29byf" }],
      ["circle", { cx: "17", cy: "17", r: "5", key: "1op1d2" }],
      ["path", { d: "M12 17h10", key: "ls21zv" }],
      ["path", { d: "m3.46 10.54 7.08-7.08", key: "1rehiu" }]
    ]);
    var Tag = createLucideIcon("Tag", [
      [
        "path",
        {
          d: "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z",
          key: "vktsd0"
        }
      ],
      ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }]
    ]);
    var Tags = createLucideIcon("Tags", [
      ["path", { d: "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19", key: "1cbfv1" }],
      [
        "path",
        {
          d: "M9.586 5.586A2 2 0 0 0 8.172 5H3a1 1 0 0 0-1 1v5.172a2 2 0 0 0 .586 1.414L8.29 18.29a2.426 2.426 0 0 0 3.42 0l3.58-3.58a2.426 2.426 0 0 0 0-3.42z",
          key: "135mg7"
        }
      ],
      ["circle", { cx: "6.5", cy: "9.5", r: ".5", fill: "currentColor", key: "5pm5xn" }]
    ]);
    var Tally1 = createLucideIcon("Tally1", [["path", { d: "M4 4v16", key: "6qkkli" }]]);
    var Tally2 = createLucideIcon("Tally2", [
      ["path", { d: "M4 4v16", key: "6qkkli" }],
      ["path", { d: "M9 4v16", key: "81ygyz" }]
    ]);
    var Tally3 = createLucideIcon("Tally3", [
      ["path", { d: "M4 4v16", key: "6qkkli" }],
      ["path", { d: "M9 4v16", key: "81ygyz" }],
      ["path", { d: "M14 4v16", key: "12vmem" }]
    ]);
    var Tally4 = createLucideIcon("Tally4", [
      ["path", { d: "M4 4v16", key: "6qkkli" }],
      ["path", { d: "M9 4v16", key: "81ygyz" }],
      ["path", { d: "M14 4v16", key: "12vmem" }],
      ["path", { d: "M19 4v16", key: "8ij5ei" }]
    ]);
    var Tally5 = createLucideIcon("Tally5", [
      ["path", { d: "M4 4v16", key: "6qkkli" }],
      ["path", { d: "M9 4v16", key: "81ygyz" }],
      ["path", { d: "M14 4v16", key: "12vmem" }],
      ["path", { d: "M19 4v16", key: "8ij5ei" }],
      ["path", { d: "M22 6 2 18", key: "h9moai" }]
    ]);
    var Tangent = createLucideIcon("Tangent", [
      ["circle", { cx: "17", cy: "4", r: "2", key: "y5j2s2" }],
      ["path", { d: "M15.59 5.41 5.41 15.59", key: "l0vprr" }],
      ["circle", { cx: "4", cy: "17", r: "2", key: "9p4efm" }],
      ["path", { d: "M12 22s-4-9-1.5-11.5S22 12 22 12", key: "1twk4o" }]
    ]);
    var Target = createLucideIcon("Target", [
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
      ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
    ]);
    var Telescope = createLucideIcon("Telescope", [
      [
        "path",
        {
          d: "m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44",
          key: "k4qptu"
        }
      ],
      ["path", { d: "m13.56 11.747 4.332-.924", key: "19l80z" }],
      ["path", { d: "m16 21-3.105-6.21", key: "7oh9d" }],
      [
        "path",
        {
          d: "M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z",
          key: "m7xp4m"
        }
      ],
      ["path", { d: "m6.158 8.633 1.114 4.456", key: "74o979" }],
      ["path", { d: "m8 21 3.105-6.21", key: "1fvxut" }],
      ["circle", { cx: "12", cy: "13", r: "2", key: "1c1ljs" }]
    ]);
    var TentTree = createLucideIcon("TentTree", [
      ["circle", { cx: "4", cy: "4", r: "2", key: "bt5ra8" }],
      ["path", { d: "m14 5 3-3 3 3", key: "1sorif" }],
      ["path", { d: "m14 10 3-3 3 3", key: "1jyi9h" }],
      ["path", { d: "M17 14V2", key: "8ymqnk" }],
      ["path", { d: "M17 14H7l-5 8h20Z", key: "13ar7p" }],
      ["path", { d: "M8 14v8", key: "1ghmqk" }],
      ["path", { d: "m9 14 5 8", key: "13pgi6" }]
    ]);
    var Tent = createLucideIcon("Tent", [
      ["path", { d: "M3.5 21 14 3", key: "1szst5" }],
      ["path", { d: "M20.5 21 10 3", key: "1310c3" }],
      ["path", { d: "M15.5 21 12 15l-3.5 6", key: "1ddtfw" }],
      ["path", { d: "M2 21h20", key: "1nyx9w" }]
    ]);
    var Terminal = createLucideIcon("Terminal", [
      ["polyline", { points: "4 17 10 11 4 5", key: "akl6gq" }],
      ["line", { x1: "12", x2: "20", y1: "19", y2: "19", key: "q2wloq" }]
    ]);
    var TestTubeDiagonal = createLucideIcon("TestTubeDiagonal", [
      [
        "path",
        { d: "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3", key: "1ub6xw" }
      ],
      ["path", { d: "m16 2 6 6", key: "1gw87d" }],
      ["path", { d: "M12 16H4", key: "1cjfip" }]
    ]);
    var TestTube = createLucideIcon("TestTube", [
      ["path", { d: "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2", key: "125lnx" }],
      ["path", { d: "M8.5 2h7", key: "csnxdl" }],
      ["path", { d: "M14.5 16h-5", key: "1ox875" }]
    ]);
    var TestTubes = createLucideIcon("TestTubes", [
      ["path", { d: "M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2", key: "1hjrqt" }],
      ["path", { d: "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2", key: "16lc8n" }],
      ["path", { d: "M3 2h7", key: "7s29d5" }],
      ["path", { d: "M14 2h7", key: "7sicin" }],
      ["path", { d: "M9 16H4", key: "1bfye3" }],
      ["path", { d: "M20 16h-5", key: "ddnjpe" }]
    ]);
    var TextCursorInput = createLucideIcon("TextCursorInput", [
      ["path", { d: "M5 4h1a3 3 0 0 1 3 3 3 3 0 0 1 3-3h1", key: "18xjzo" }],
      ["path", { d: "M13 20h-1a3 3 0 0 1-3-3 3 3 0 0 1-3 3H5", key: "fj48gi" }],
      ["path", { d: "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1", key: "1n9rhb" }],
      ["path", { d: "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7", key: "13ksps" }],
      ["path", { d: "M9 7v10", key: "1vc8ob" }]
    ]);
    var TextCursor = createLucideIcon("TextCursor", [
      ["path", { d: "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1", key: "uvaxm9" }],
      ["path", { d: "M7 22h1a4 4 0 0 0 4-4v-1", key: "11xy8d" }],
      ["path", { d: "M7 2h1a4 4 0 0 1 4 4v1", key: "1uw06m" }]
    ]);
    var TextQuote = createLucideIcon("TextQuote", [
      ["path", { d: "M17 6H3", key: "16j9eg" }],
      ["path", { d: "M21 12H8", key: "scolzb" }],
      ["path", { d: "M21 18H8", key: "1wfozv" }],
      ["path", { d: "M3 12v6", key: "fv4c87" }]
    ]);
    var TextSearch = createLucideIcon("TextSearch", [
      ["path", { d: "M21 6H3", key: "1jwq7v" }],
      ["path", { d: "M10 12H3", key: "1ulcyk" }],
      ["path", { d: "M10 18H3", key: "13769t" }],
      ["circle", { cx: "17", cy: "15", r: "3", key: "1upz2a" }],
      ["path", { d: "m21 19-1.9-1.9", key: "dwi7p8" }]
    ]);
    var TextSelect = createLucideIcon("TextSelect", [
      ["path", { d: "M5 3a2 2 0 0 0-2 2", key: "y57alp" }],
      ["path", { d: "M19 3a2 2 0 0 1 2 2", key: "18rm91" }],
      ["path", { d: "M21 19a2 2 0 0 1-2 2", key: "1j7049" }],
      ["path", { d: "M5 21a2 2 0 0 1-2-2", key: "sbafld" }],
      ["path", { d: "M9 3h1", key: "1yesri" }],
      ["path", { d: "M9 21h1", key: "15o7lz" }],
      ["path", { d: "M14 3h1", key: "1ec4yj" }],
      ["path", { d: "M14 21h1", key: "v9vybs" }],
      ["path", { d: "M3 9v1", key: "1r0deq" }],
      ["path", { d: "M21 9v1", key: "mxsmne" }],
      ["path", { d: "M3 14v1", key: "vnatye" }],
      ["path", { d: "M21 14v1", key: "169vum" }],
      ["line", { x1: "7", x2: "15", y1: "8", y2: "8", key: "1758g8" }],
      ["line", { x1: "7", x2: "17", y1: "12", y2: "12", key: "197423" }],
      ["line", { x1: "7", x2: "13", y1: "16", y2: "16", key: "37cgm6" }]
    ]);
    var Text = createLucideIcon("Text", [
      ["path", { d: "M17 6.1H3", key: "wptmhv" }],
      ["path", { d: "M21 12.1H3", key: "1j38uz" }],
      ["path", { d: "M15.1 18H3", key: "1nb16a" }]
    ]);
    var Theater = createLucideIcon("Theater", [
      ["path", { d: "M2 10s3-3 3-8", key: "3xiif0" }],
      ["path", { d: "M22 10s-3-3-3-8", key: "ioaa5q" }],
      ["path", { d: "M10 2c0 4.4-3.6 8-8 8", key: "16fkpi" }],
      ["path", { d: "M14 2c0 4.4 3.6 8 8 8", key: "b9eulq" }],
      ["path", { d: "M2 10s2 2 2 5", key: "1au1lb" }],
      ["path", { d: "M22 10s-2 2-2 5", key: "qi2y5e" }],
      ["path", { d: "M8 15h8", key: "45n4r" }],
      ["path", { d: "M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "1vsc2m" }],
      ["path", { d: "M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1", key: "hrha4u" }]
    ]);
    var ThermometerSnowflake = createLucideIcon("ThermometerSnowflake", [
      ["path", { d: "M2 12h10", key: "19562f" }],
      ["path", { d: "M9 4v16", key: "81ygyz" }],
      ["path", { d: "m3 9 3 3-3 3", key: "1sas0l" }],
      ["path", { d: "M12 6 9 9 6 6", key: "pfrgxu" }],
      ["path", { d: "m6 18 3-3 1.5 1.5", key: "1e277p" }],
      ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }]
    ]);
    var ThermometerSun = createLucideIcon("ThermometerSun", [
      ["path", { d: "M12 9a4 4 0 0 0-2 7.5", key: "1jvsq6" }],
      ["path", { d: "M12 3v2", key: "1w22ol" }],
      ["path", { d: "m6.6 18.4-1.4 1.4", key: "w2yidj" }],
      ["path", { d: "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "iof6y5" }],
      ["path", { d: "M4 13H2", key: "118le4" }],
      ["path", { d: "M6.34 7.34 4.93 5.93", key: "1brd51" }]
    ]);
    var Thermometer = createLucideIcon("Thermometer", [
      ["path", { d: "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z", key: "17jzev" }]
    ]);
    var ThumbsDown = createLucideIcon("ThumbsDown", [
      ["path", { d: "M17 14V2", key: "8ymqnk" }],
      [
        "path",
        {
          d: "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z",
          key: "m61m77"
        }
      ]
    ]);
    var ThumbsUp = createLucideIcon("ThumbsUp", [
      ["path", { d: "M7 10v12", key: "1qc93n" }],
      [
        "path",
        {
          d: "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z",
          key: "emmmcr"
        }
      ]
    ]);
    var TicketCheck = createLucideIcon("TicketCheck", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }]
    ]);
    var TicketMinus = createLucideIcon("TicketMinus", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "M9 12h6", key: "1c52cq" }]
    ]);
    var TicketPercent = createLucideIcon("TicketPercent", [
      [
        "path",
        {
          d: "M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "1l48ns"
        }
      ],
      ["path", { d: "M9 9h.01", key: "1q5me6" }],
      ["path", { d: "m15 9-6 6", key: "1uzhvr" }],
      ["path", { d: "M15 15h.01", key: "lqbp3k" }]
    ]);
    var TicketPlus = createLucideIcon("TicketPlus", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "M9 12h6", key: "1c52cq" }],
      ["path", { d: "M12 9v6", key: "199k2o" }]
    ]);
    var TicketSlash = createLucideIcon("TicketSlash", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }]
    ]);
    var TicketX = createLucideIcon("TicketX", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "m9.5 14.5 5-5", key: "qviqfa" }],
      ["path", { d: "m9.5 9.5 5 5", key: "18nt4w" }]
    ]);
    var Ticket = createLucideIcon("Ticket", [
      [
        "path",
        {
          d: "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z",
          key: "qn84l0"
        }
      ],
      ["path", { d: "M13 5v2", key: "dyzc3o" }],
      ["path", { d: "M13 17v2", key: "1ont0d" }],
      ["path", { d: "M13 11v2", key: "1wjjxi" }]
    ]);
    var TicketsPlane = createLucideIcon("TicketsPlane", [
      ["path", { d: "M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12", key: "16muxl" }],
      ["path", { d: "m12 13.5 3.75.5", key: "1i9qhk" }],
      ["path", { d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8", key: "12lg5p" }],
      ["path", { d: "M6 10V8", key: "1y41hn" }],
      ["path", { d: "M6 14v1", key: "cao2tf" }],
      ["path", { d: "M6 19v2", key: "1loha6" }],
      ["rect", { x: "2", y: "8", width: "20", height: "13", rx: "2", key: "p3bz5l" }]
    ]);
    var Tickets = createLucideIcon("Tickets", [
      ["path", { d: "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8", key: "12lg5p" }],
      ["path", { d: "M6 10V8", key: "1y41hn" }],
      ["path", { d: "M6 14v1", key: "cao2tf" }],
      ["path", { d: "M6 19v2", key: "1loha6" }],
      ["rect", { x: "2", y: "8", width: "20", height: "13", rx: "2", key: "p3bz5l" }]
    ]);
    var TimerOff = createLucideIcon("TimerOff", [
      ["path", { d: "M10 2h4", key: "n1abiw" }],
      ["path", { d: "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7", key: "10he05" }],
      ["path", { d: "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2", key: "15f7sh" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M12 12v-2", key: "fwoke6" }]
    ]);
    var TimerReset = createLucideIcon("TimerReset", [
      ["path", { d: "M10 2h4", key: "n1abiw" }],
      ["path", { d: "M12 14v-4", key: "1evpnu" }],
      ["path", { d: "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6", key: "1ts96g" }],
      ["path", { d: "M9 17H4v5", key: "8t5av" }]
    ]);
    var Timer = createLucideIcon("Timer", [
      ["line", { x1: "10", x2: "14", y1: "2", y2: "2", key: "14vaq8" }],
      ["line", { x1: "12", x2: "15", y1: "14", y2: "11", key: "17fdiu" }],
      ["circle", { cx: "12", cy: "14", r: "8", key: "1e1u0o" }]
    ]);
    var ToggleLeft = createLucideIcon("ToggleLeft", [
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "6", ry: "6", key: "f2vt7d" }],
      ["circle", { cx: "8", cy: "12", r: "2", key: "1nvbw3" }]
    ]);
    var ToggleRight = createLucideIcon("ToggleRight", [
      ["rect", { width: "20", height: "12", x: "2", y: "6", rx: "6", ry: "6", key: "f2vt7d" }],
      ["circle", { cx: "16", cy: "12", r: "2", key: "4ma0v8" }]
    ]);
    var Toilet = createLucideIcon("Toilet", [
      [
        "path",
        {
          d: "M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18",
          key: "kc4kqr"
        }
      ],
      ["path", { d: "M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8", key: "1tqs57" }]
    ]);
    var Tornado = createLucideIcon("Tornado", [
      ["path", { d: "M21 4H3", key: "1hwok0" }],
      ["path", { d: "M18 8H6", key: "41n648" }],
      ["path", { d: "M19 12H9", key: "1g4lpz" }],
      ["path", { d: "M16 16h-6", key: "1j5d54" }],
      ["path", { d: "M11 20H9", key: "39obr8" }]
    ]);
    var Torus = createLucideIcon("Torus", [
      ["ellipse", { cx: "12", cy: "11", rx: "3", ry: "2", key: "1b2qxu" }],
      ["ellipse", { cx: "12", cy: "12.5", rx: "10", ry: "8.5", key: "h8emeu" }]
    ]);
    var TouchpadOff = createLucideIcon("TouchpadOff", [
      ["path", { d: "M4 4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16", key: "lnt0bk" }],
      ["path", { d: "M2 14h12", key: "d8icqz" }],
      ["path", { d: "M22 14h-2", key: "jrx26d" }],
      ["path", { d: "M12 20v-6", key: "1rm09r" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      ["path", { d: "M22 16V6a2 2 0 0 0-2-2H10", key: "11y8e4" }]
    ]);
    var Touchpad = createLucideIcon("Touchpad", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M2 14h20", key: "myj16y" }],
      ["path", { d: "M12 20v-6", key: "1rm09r" }]
    ]);
    var TowerControl = createLucideIcon("TowerControl", [
      [
        "path",
        { d: "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z", key: "1pledb" }
      ],
      ["path", { d: "M8 13v9", key: "hmv0ci" }],
      ["path", { d: "M16 22v-9", key: "ylnf1u" }],
      ["path", { d: "m9 6 1 7", key: "dpdgam" }],
      ["path", { d: "m15 6-1 7", key: "ls7zgu" }],
      ["path", { d: "M12 6V2", key: "1pj48d" }],
      ["path", { d: "M13 2h-2", key: "mj6ths" }]
    ]);
    var ToyBrick = createLucideIcon("ToyBrick", [
      ["rect", { width: "18", height: "12", x: "3", y: "8", rx: "1", key: "158fvp" }],
      ["path", { d: "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3", key: "s0042v" }],
      ["path", { d: "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3", key: "9wmeh2" }]
    ]);
    var Tractor = createLucideIcon("Tractor", [
      ["path", { d: "m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20", key: "she1j9" }],
      ["path", { d: "M16 18h-5", key: "bq60fd" }],
      ["path", { d: "M18 5a1 1 0 0 0-1 1v5.573", key: "1kv8ia" }],
      ["path", { d: "M3 4h8.129a1 1 0 0 1 .99.863L13 11.246", key: "1q1ert" }],
      ["path", { d: "M4 11V4", key: "9ft8pt" }],
      ["path", { d: "M7 15h.01", key: "k5ht0j" }],
      ["path", { d: "M8 10.1V4", key: "1jgyzo" }],
      ["circle", { cx: "18", cy: "18", r: "2", key: "1emm8v" }],
      ["circle", { cx: "7", cy: "15", r: "5", key: "ddtuc" }]
    ]);
    var TrafficCone = createLucideIcon("TrafficCone", [
      ["path", { d: "M9.3 6.2a4.55 4.55 0 0 0 5.4 0", key: "flyxqv" }],
      ["path", { d: "M7.9 10.7c.9.8 2.4 1.3 4.1 1.3s3.2-.5 4.1-1.3", key: "1nlxxg" }],
      [
        "path",
        {
          d: "M13.9 3.5a1.93 1.93 0 0 0-3.8-.1l-3 10c-.1.2-.1.4-.1.6 0 1.7 2.2 3 5 3s5-1.3 5-3c0-.2 0-.4-.1-.5Z",
          key: "vz7x1l"
        }
      ],
      [
        "path",
        {
          d: "m7.5 12.2-4.7 2.7c-.5.3-.8.7-.8 1.1s.3.8.8 1.1l7.6 4.5c.9.5 2.1.5 3 0l7.6-4.5c.7-.3 1-.7 1-1.1s-.3-.8-.8-1.1l-4.7-2.8",
          key: "1xfzlw"
        }
      ]
    ]);
    var TrainFrontTunnel = createLucideIcon("TrainFrontTunnel", [
      ["path", { d: "M2 22V12a10 10 0 1 1 20 0v10", key: "o0fyp0" }],
      ["path", { d: "M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8", key: "m8q3n9" }],
      ["path", { d: "M10 15h.01", key: "44in9x" }],
      ["path", { d: "M14 15h.01", key: "5mohn5" }],
      ["path", { d: "M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z", key: "hckbmu" }],
      ["path", { d: "m9 19-2 3", key: "iij7hm" }],
      ["path", { d: "m15 19 2 3", key: "npx8sa" }]
    ]);
    var TrainFront = createLucideIcon("TrainFront", [
      ["path", { d: "M8 3.1V7a4 4 0 0 0 8 0V3.1", key: "1v71zp" }],
      ["path", { d: "m9 15-1-1", key: "1yrq24" }],
      ["path", { d: "m15 15 1-1", key: "1t0d6s" }],
      ["path", { d: "M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z", key: "1p0hjs" }],
      ["path", { d: "m8 19-2 3", key: "13i0xs" }],
      ["path", { d: "m16 19 2 3", key: "xo31yx" }]
    ]);
    var TrainTrack = createLucideIcon("TrainTrack", [
      ["path", { d: "M2 17 17 2", key: "18b09t" }],
      ["path", { d: "m2 14 8 8", key: "1gv9hu" }],
      ["path", { d: "m5 11 8 8", key: "189pqp" }],
      ["path", { d: "m8 8 8 8", key: "1imecy" }],
      ["path", { d: "m11 5 8 8", key: "ummqn6" }],
      ["path", { d: "m14 2 8 8", key: "1vk7dn" }],
      ["path", { d: "M7 22 22 7", key: "15mb1i" }]
    ]);
    var TramFront = createLucideIcon("TramFront", [
      ["rect", { width: "16", height: "16", x: "4", y: "3", rx: "2", key: "1wxw4b" }],
      ["path", { d: "M4 11h16", key: "mpoxn0" }],
      ["path", { d: "M12 3v8", key: "1h2ygw" }],
      ["path", { d: "m8 19-2 3", key: "13i0xs" }],
      ["path", { d: "m18 22-2-3", key: "1p0ohu" }],
      ["path", { d: "M8 15h.01", key: "a7atzg" }],
      ["path", { d: "M16 15h.01", key: "rnfrdf" }]
    ]);
    var Trash2 = createLucideIcon("Trash2", [
      ["path", { d: "M3 6h18", key: "d0wm0j" }],
      ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
      ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
      ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
      ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }]
    ]);
    var Trash = createLucideIcon("Trash", [
      ["path", { d: "M3 6h18", key: "d0wm0j" }],
      ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
      ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }]
    ]);
    var TreeDeciduous = createLucideIcon("TreeDeciduous", [
      [
        "path",
        {
          d: "M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z",
          key: "oadzkq"
        }
      ],
      ["path", { d: "M12 19v3", key: "npa21l" }]
    ]);
    var TreePalm = createLucideIcon("TreePalm", [
      ["path", { d: "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4", key: "foxbe7" }],
      [
        "path",
        { d: "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3", key: "18arnh" }
      ],
      [
        "path",
        {
          d: "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35",
          key: "ywahnh"
        }
      ],
      ["path", { d: "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14", key: "ft0feo" }]
    ]);
    var TreePine = createLucideIcon("TreePine", [
      [
        "path",
        {
          d: "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z",
          key: "cpyugq"
        }
      ],
      ["path", { d: "M12 22v-3", key: "kmzjlo" }]
    ]);
    var Trees = createLucideIcon("Trees", [
      ["path", { d: "M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z", key: "1l6gj6" }],
      ["path", { d: "M7 16v6", key: "1a82de" }],
      ["path", { d: "M13 19v3", key: "13sx9i" }],
      [
        "path",
        {
          d: "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5",
          key: "1sj9kv"
        }
      ]
    ]);
    var Trello = createLucideIcon("Trello", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", ry: "2", key: "1m3agn" }],
      ["rect", { width: "3", height: "9", x: "7", y: "7", key: "14n3xi" }],
      ["rect", { width: "3", height: "5", x: "14", y: "7", key: "s4azjd" }]
    ]);
    var TrendingDown = createLucideIcon("TrendingDown", [
      ["polyline", { points: "22 17 13.5 8.5 8.5 13.5 2 7", key: "1r2t7k" }],
      ["polyline", { points: "16 17 22 17 22 11", key: "11uiuu" }]
    ]);
    var TrendingUpDown = createLucideIcon("TrendingUpDown", [
      ["path", { d: "M14.828 14.828 21 21", key: "ar5fw7" }],
      ["path", { d: "M21 16v5h-5", key: "1ck2sf" }],
      ["path", { d: "m21 3-9 9-4-4-6 6", key: "1h02xo" }],
      ["path", { d: "M21 8V3h-5", key: "1qoq8a" }]
    ]);
    var TrendingUp = createLucideIcon("TrendingUp", [
      ["polyline", { points: "22 7 13.5 15.5 8.5 10.5 2 17", key: "126l90" }],
      ["polyline", { points: "16 7 22 7 22 13", key: "kwv8wd" }]
    ]);
    var TriangleAlert = createLucideIcon("TriangleAlert", [
      [
        "path",
        {
          d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
          key: "wmoenq"
        }
      ],
      ["path", { d: "M12 9v4", key: "juzpu7" }],
      ["path", { d: "M12 17h.01", key: "p32p05" }]
    ]);
    var TriangleRight = createLucideIcon("TriangleRight", [
      [
        "path",
        {
          d: "M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z",
          key: "183wce"
        }
      ]
    ]);
    var Triangle = createLucideIcon("Triangle", [
      [
        "path",
        { d: "M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z", key: "14u9p9" }
      ]
    ]);
    var Trophy = createLucideIcon("Trophy", [
      ["path", { d: "M6 9H4.5a2.5 2.5 0 0 1 0-5H6", key: "17hqa7" }],
      ["path", { d: "M18 9h1.5a2.5 2.5 0 0 0 0-5H18", key: "lmptdp" }],
      ["path", { d: "M4 22h16", key: "57wxv0" }],
      ["path", { d: "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22", key: "1nw9bq" }],
      ["path", { d: "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22", key: "1np0yb" }],
      ["path", { d: "M18 2H6v7a6 6 0 0 0 12 0V2Z", key: "u46fv3" }]
    ]);
    var Truck = createLucideIcon("Truck", [
      ["path", { d: "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2", key: "wrbu53" }],
      ["path", { d: "M15 18H9", key: "1lyqi6" }],
      [
        "path",
        {
          d: "M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14",
          key: "lysw3i"
        }
      ],
      ["circle", { cx: "17", cy: "18", r: "2", key: "332jqn" }],
      ["circle", { cx: "7", cy: "18", r: "2", key: "19iecd" }]
    ]);
    var Turtle = createLucideIcon("Turtle", [
      [
        "path",
        {
          d: "m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z",
          key: "1lbbv7"
        }
      ],
      ["path", { d: "M4.82 7.9 8 10", key: "m9wose" }],
      ["path", { d: "M15.18 7.9 12 10", key: "p8dp2u" }],
      ["path", { d: "M16.93 10H20a2 2 0 0 1 0 4H2", key: "12nsm7" }]
    ]);
    var TvMinimalPlay = createLucideIcon("TvMinimalPlay", [
      [
        "path",
        {
          d: "M10 7.75a.75.75 0 0 1 1.142-.638l3.664 2.249a.75.75 0 0 1 0 1.278l-3.664 2.25a.75.75 0 0 1-1.142-.64z",
          key: "1pctta"
        }
      ],
      ["path", { d: "M7 21h10", key: "1b0cd5" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }]
    ]);
    var TvMinimal = createLucideIcon("TvMinimal", [
      ["path", { d: "M7 21h10", key: "1b0cd5" }],
      ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }]
    ]);
    var Tv = createLucideIcon("Tv", [
      ["rect", { width: "20", height: "15", x: "2", y: "7", rx: "2", ry: "2", key: "10ag99" }],
      ["polyline", { points: "17 2 12 7 7 2", key: "11pgbg" }]
    ]);
    var Twitch = createLucideIcon("Twitch", [
      ["path", { d: "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7", key: "c0yzno" }]
    ]);
    var Twitter = createLucideIcon("Twitter", [
      [
        "path",
        {
          d: "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z",
          key: "pff0z6"
        }
      ]
    ]);
    var TypeOutline = createLucideIcon("TypeOutline", [
      [
        "path",
        {
          d: "M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z",
          key: "1reda3"
        }
      ]
    ]);
    var Type = createLucideIcon("Type", [
      ["polyline", { points: "4 7 4 4 20 4 20 7", key: "1nosan" }],
      ["line", { x1: "9", x2: "15", y1: "20", y2: "20", key: "swin9y" }],
      ["line", { x1: "12", x2: "12", y1: "4", y2: "20", key: "1tx1rr" }]
    ]);
    var UmbrellaOff = createLucideIcon("UmbrellaOff", [
      ["path", { d: "M12 2v1", key: "11qlp1" }],
      ["path", { d: "M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575", key: "eki10q" }],
      ["path", { d: "M17.5 12H22A10 10 0 0 0 9.004 3.455", key: "n2ayka" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Umbrella = createLucideIcon("Umbrella", [
      ["path", { d: "M22 12a10.06 10.06 1 0 0-20 0Z", key: "1teyop" }],
      ["path", { d: "M12 12v8a2 2 0 0 0 4 0", key: "ulpmoc" }],
      ["path", { d: "M12 2v1", key: "11qlp1" }]
    ]);
    var Underline = createLucideIcon("Underline", [
      ["path", { d: "M6 4v6a6 6 0 0 0 12 0V4", key: "9kb039" }],
      ["line", { x1: "4", x2: "20", y1: "20", y2: "20", key: "nun2al" }]
    ]);
    var Undo2 = createLucideIcon("Undo2", [
      ["path", { d: "M9 14 4 9l5-5", key: "102s5s" }],
      ["path", { d: "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11", key: "f3b9sd" }]
    ]);
    var UndoDot = createLucideIcon("UndoDot", [
      ["path", { d: "M21 17a9 9 0 0 0-15-6.7L3 13", key: "8mp6z9" }],
      ["path", { d: "M3 7v6h6", key: "1v2h90" }],
      ["circle", { cx: "12", cy: "17", r: "1", key: "1ixnty" }]
    ]);
    var Undo = createLucideIcon("Undo", [
      ["path", { d: "M3 7v6h6", key: "1v2h90" }],
      ["path", { d: "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13", key: "1r6uu6" }]
    ]);
    var UnfoldHorizontal = createLucideIcon("UnfoldHorizontal", [
      ["path", { d: "M16 12h6", key: "15xry1" }],
      ["path", { d: "M8 12H2", key: "1jqql6" }],
      ["path", { d: "M12 2v2", key: "tus03m" }],
      ["path", { d: "M12 8v2", key: "1woqiv" }],
      ["path", { d: "M12 14v2", key: "8jcxud" }],
      ["path", { d: "M12 20v2", key: "1lh1kg" }],
      ["path", { d: "m19 15 3-3-3-3", key: "wjy7rq" }],
      ["path", { d: "m5 9-3 3 3 3", key: "j64kie" }]
    ]);
    var UnfoldVertical = createLucideIcon("UnfoldVertical", [
      ["path", { d: "M12 22v-6", key: "6o8u61" }],
      ["path", { d: "M12 8V2", key: "1wkif3" }],
      ["path", { d: "M4 12H2", key: "rhcxmi" }],
      ["path", { d: "M10 12H8", key: "s88cx1" }],
      ["path", { d: "M16 12h-2", key: "10asgb" }],
      ["path", { d: "M22 12h-2", key: "14jgyd" }],
      ["path", { d: "m15 19-3 3-3-3", key: "11eu04" }],
      ["path", { d: "m15 5-3-3-3 3", key: "itvq4r" }]
    ]);
    var Ungroup = createLucideIcon("Ungroup", [
      ["rect", { width: "8", height: "6", x: "5", y: "4", rx: "1", key: "nzclkv" }],
      ["rect", { width: "8", height: "6", x: "11", y: "14", rx: "1", key: "4tytwb" }]
    ]);
    var University = createLucideIcon("University", [
      ["circle", { cx: "12", cy: "10", r: "1", key: "1gnqs8" }],
      ["path", { d: "M22 20V8h-4l-6-4-6 4H2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2", key: "1qj5sn" }],
      ["path", { d: "M6 17v.01", key: "roodi6" }],
      ["path", { d: "M6 13v.01", key: "67c122" }],
      ["path", { d: "M18 17v.01", key: "12ktxm" }],
      ["path", { d: "M18 13v.01", key: "tn1rt1" }],
      ["path", { d: "M14 22v-5a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5", key: "11g7fi" }]
    ]);
    var Unlink2 = createLucideIcon("Unlink2", [
      ["path", { d: "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2", key: "1re2ne" }]
    ]);
    var Unlink = createLucideIcon("Unlink", [
      [
        "path",
        {
          d: "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71",
          key: "yqzxt4"
        }
      ],
      [
        "path",
        {
          d: "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71",
          key: "4qinb0"
        }
      ],
      ["line", { x1: "8", x2: "8", y1: "2", y2: "5", key: "1041cp" }],
      ["line", { x1: "2", x2: "5", y1: "8", y2: "8", key: "14m1p5" }],
      ["line", { x1: "16", x2: "16", y1: "19", y2: "22", key: "rzdirn" }],
      ["line", { x1: "19", x2: "22", y1: "16", y2: "16", key: "ox905f" }]
    ]);
    var Unplug = createLucideIcon("Unplug", [
      ["path", { d: "m19 5 3-3", key: "yk6iyv" }],
      ["path", { d: "m2 22 3-3", key: "19mgm9" }],
      [
        "path",
        { d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z", key: "goz73y" }
      ],
      ["path", { d: "M7.5 13.5 10 11", key: "7xgeeb" }],
      ["path", { d: "M10.5 16.5 13 14", key: "10btkg" }],
      [
        "path",
        { d: "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z", key: "1snsnr" }
      ]
    ]);
    var Upload = createLucideIcon("Upload", [
      ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
      ["polyline", { points: "17 8 12 3 7 8", key: "t8dd8p" }],
      ["line", { x1: "12", x2: "12", y1: "3", y2: "15", key: "widbto" }]
    ]);
    var Usb = createLucideIcon("Usb", [
      ["circle", { cx: "10", cy: "7", r: "1", key: "dypaad" }],
      ["circle", { cx: "4", cy: "20", r: "1", key: "22iqad" }],
      ["path", { d: "M4.7 19.3 19 5", key: "1enqfc" }],
      ["path", { d: "m21 3-3 1 2 2Z", key: "d3ov82" }],
      ["path", { d: "M9.26 7.68 5 12l2 5", key: "1esawj" }],
      ["path", { d: "m10 14 5 2 3.5-3.5", key: "v8oal5" }],
      ["path", { d: "m18 12 1-1 1 1-1 1Z", key: "1bh22v" }]
    ]);
    var UserCheck = createLucideIcon("UserCheck", [
      ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
    ]);
    var UserCog = createLucideIcon("UserCog", [
      ["circle", { cx: "18", cy: "15", r: "3", key: "gjjjvw" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["path", { d: "M10 15H6a4 4 0 0 0-4 4v2", key: "1nfge6" }],
      ["path", { d: "m21.7 16.4-.9-.3", key: "12j9ji" }],
      ["path", { d: "m15.2 13.9-.9-.3", key: "1fdjdi" }],
      ["path", { d: "m16.6 18.7.3-.9", key: "heedtr" }],
      ["path", { d: "m19.1 12.2.3-.9", key: "1af3ki" }],
      ["path", { d: "m19.6 18.7-.4-1", key: "1x9vze" }],
      ["path", { d: "m16.8 12.3-.4-1", key: "vqeiwj" }],
      ["path", { d: "m14.3 16.6 1-.4", key: "1qlj63" }],
      ["path", { d: "m20.7 13.8 1-.4", key: "1v5t8k" }]
    ]);
    var UserMinus = createLucideIcon("UserMinus", [
      ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
    ]);
    var UserPen = createLucideIcon("UserPen", [
      ["path", { d: "M11.5 15H7a4 4 0 0 0-4 4v2", key: "15lzij" }],
      [
        "path",
        {
          d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "1817ys"
        }
      ],
      ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }]
    ]);
    var UserPlus = createLucideIcon("UserPlus", [
      ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["line", { x1: "19", x2: "19", y1: "8", y2: "14", key: "1bvyxn" }],
      ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
    ]);
    var UserRoundCheck = createLucideIcon("UserRoundCheck", [
      ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "m16 19 2 2 4-4", key: "1b14m6" }]
    ]);
    var UserRoundCog = createLucideIcon("UserRoundCog", [
      ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["path", { d: "m19.5 14.3-.4.9", key: "1eb35c" }],
      ["path", { d: "m16.9 20.8-.4.9", key: "dfjc4z" }],
      ["path", { d: "m21.7 19.5-.9-.4", key: "q4dx6b" }],
      ["path", { d: "m15.2 16.9-.9-.4", key: "1r0w5f" }],
      ["path", { d: "m21.7 16.5-.9.4", key: "1knoei" }],
      ["path", { d: "m15.2 19.1-.9.4", key: "j188fs" }],
      ["path", { d: "m19.5 21.7-.4-.9", key: "1tonu5" }],
      ["path", { d: "m16.9 15.2-.4-.9", key: "699xu" }]
    ]);
    var UserRoundMinus = createLucideIcon("UserRoundMinus", [
      ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "M22 19h-6", key: "vcuq98" }]
    ]);
    var UserRoundPen = createLucideIcon("UserRoundPen", [
      ["path", { d: "M2 21a8 8 0 0 1 10.821-7.487", key: "1c8h7z" }],
      [
        "path",
        {
          d: "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z",
          key: "1817ys"
        }
      ],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }]
    ]);
    var UserRoundPlus = createLucideIcon("UserRoundPlus", [
      ["path", { d: "M2 21a8 8 0 0 1 13.292-6", key: "bjp14o" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "M19 16v6", key: "tddt3s" }],
      ["path", { d: "M22 19h-6", key: "vcuq98" }]
    ]);
    var UserRoundSearch = createLucideIcon("UserRoundSearch", [
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "M2 21a8 8 0 0 1 10.434-7.62", key: "1yezr2" }],
      ["circle", { cx: "18", cy: "18", r: "3", key: "1xkwt0" }],
      ["path", { d: "m22 22-1.9-1.9", key: "1e5ubv" }]
    ]);
    var UserRoundX = createLucideIcon("UserRoundX", [
      ["path", { d: "M2 21a8 8 0 0 1 11.873-7", key: "74fkxq" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "m17 17 5 5", key: "p7ous7" }],
      ["path", { d: "m22 17-5 5", key: "gqnmv0" }]
    ]);
    var UserRound = createLucideIcon("UserRound", [
      ["circle", { cx: "12", cy: "8", r: "5", key: "1hypcn" }],
      ["path", { d: "M20 21a8 8 0 0 0-16 0", key: "rfgkzh" }]
    ]);
    var UserSearch = createLucideIcon("UserSearch", [
      ["circle", { cx: "10", cy: "7", r: "4", key: "e45bow" }],
      ["path", { d: "M10.3 15H7a4 4 0 0 0-4 4v2", key: "3bnktk" }],
      ["circle", { cx: "17", cy: "17", r: "3", key: "18b49y" }],
      ["path", { d: "m21 21-1.9-1.9", key: "1g2n9r" }]
    ]);
    var UserX = createLucideIcon("UserX", [
      ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["line", { x1: "17", x2: "22", y1: "8", y2: "13", key: "3nzzx3" }],
      ["line", { x1: "22", x2: "17", y1: "8", y2: "13", key: "1swrse" }]
    ]);
    var User = createLucideIcon("User", [
      ["path", { d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2", key: "975kel" }],
      ["circle", { cx: "12", cy: "7", r: "4", key: "17ys0d" }]
    ]);
    var UsersRound = createLucideIcon("UsersRound", [
      ["path", { d: "M18 21a8 8 0 0 0-16 0", key: "3ypg7q" }],
      ["circle", { cx: "10", cy: "8", r: "5", key: "o932ke" }],
      ["path", { d: "M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3", key: "10s06x" }]
    ]);
    var Users = createLucideIcon("Users", [
      ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
      ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
      ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
      ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
    ]);
    var UtensilsCrossed = createLucideIcon("UtensilsCrossed", [
      ["path", { d: "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8", key: "n7qcjb" }],
      [
        "path",
        { d: "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7", key: "d0u48b" }
      ],
      ["path", { d: "m2.1 21.8 6.4-6.3", key: "yn04lh" }],
      ["path", { d: "m19 5-7 7", key: "194lzd" }]
    ]);
    var Utensils = createLucideIcon("Utensils", [
      ["path", { d: "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2", key: "cjf0a3" }],
      ["path", { d: "M7 2v20", key: "1473qp" }],
      ["path", { d: "M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7", key: "j28e5" }]
    ]);
    var UtilityPole = createLucideIcon("UtilityPole", [
      ["path", { d: "M12 2v20", key: "t6zp3m" }],
      ["path", { d: "M2 5h20", key: "1fs1ex" }],
      ["path", { d: "M3 3v2", key: "9imdir" }],
      ["path", { d: "M7 3v2", key: "n0os7" }],
      ["path", { d: "M17 3v2", key: "1l2re6" }],
      ["path", { d: "M21 3v2", key: "1duuac" }],
      ["path", { d: "m19 5-7 7-7-7", key: "133zxf" }]
    ]);
    var Variable = createLucideIcon("Variable", [
      ["path", { d: "M8 21s-4-3-4-9 4-9 4-9", key: "uto9ud" }],
      ["path", { d: "M16 3s4 3 4 9-4 9-4 9", key: "4w2vsq" }],
      ["line", { x1: "15", x2: "9", y1: "9", y2: "15", key: "f7djnv" }],
      ["line", { x1: "9", x2: "15", y1: "9", y2: "15", key: "1shsy8" }]
    ]);
    var Vault = createLucideIcon("Vault", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["circle", { cx: "7.5", cy: "7.5", r: ".5", fill: "currentColor", key: "kqv944" }],
      ["path", { d: "m7.9 7.9 2.7 2.7", key: "hpeyl3" }],
      ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }],
      ["path", { d: "m13.4 10.6 2.7-2.7", key: "264c1n" }],
      ["circle", { cx: "7.5", cy: "16.5", r: ".5", fill: "currentColor", key: "nkw3mc" }],
      ["path", { d: "m7.9 16.1 2.7-2.7", key: "p81g5e" }],
      ["circle", { cx: "16.5", cy: "16.5", r: ".5", fill: "currentColor", key: "fubopw" }],
      ["path", { d: "m13.4 13.4 2.7 2.7", key: "abhel3" }],
      ["circle", { cx: "12", cy: "12", r: "2", key: "1c9p78" }]
    ]);
    var Vegan = createLucideIcon("Vegan", [
      ["path", { d: "M16 8q6 0 6-6-6 0-6 6", key: "qsyyc4" }],
      ["path", { d: "M17.41 3.59a10 10 0 1 0 3 3", key: "41m9h7" }],
      ["path", { d: "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14", key: "qiv7li" }]
    ]);
    var VenetianMask = createLucideIcon("VenetianMask", [
      ["path", { d: "M18 11c-1.5 0-2.5.5-3 2", key: "1fod00" }],
      [
        "path",
        {
          d: "M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z",
          key: "d70hit"
        }
      ],
      ["path", { d: "M6 11c1.5 0 2.5.5 3 2", key: "136fht" }]
    ]);
    var VibrateOff = createLucideIcon("VibrateOff", [
      ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
      ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
      ["path", { d: "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2", key: "1hbad5" }],
      ["path", { d: "M16 10.34V6c0-.55-.45-1-1-1h-4.34", key: "1x5tf0" }],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Vibrate = createLucideIcon("Vibrate", [
      ["path", { d: "m2 8 2 2-2 2 2 2-2 2", key: "sv1b1" }],
      ["path", { d: "m22 8-2 2 2 2-2 2 2 2", key: "101i4y" }],
      ["rect", { width: "8", height: "14", x: "8", y: "5", rx: "1", key: "1oyrl4" }]
    ]);
    var VideoOff = createLucideIcon("VideoOff", [
      [
        "path",
        { d: "M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196", key: "w8jjjt" }
      ],
      ["path", { d: "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2", key: "1xawa7" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Video = createLucideIcon("Video", [
      [
        "path",
        {
          d: "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5",
          key: "ftymec"
        }
      ],
      ["rect", { x: "2", y: "6", width: "14", height: "12", rx: "2", key: "158x01" }]
    ]);
    var Videotape = createLucideIcon("Videotape", [
      ["rect", { width: "20", height: "16", x: "2", y: "4", rx: "2", key: "18n3k1" }],
      ["path", { d: "M2 8h20", key: "d11cs7" }],
      ["circle", { cx: "8", cy: "14", r: "2", key: "1k2qr5" }],
      ["path", { d: "M8 12h8", key: "1wcyev" }],
      ["circle", { cx: "16", cy: "14", r: "2", key: "14k7lr" }]
    ]);
    var View = createLucideIcon("View", [
      ["path", { d: "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2", key: "mrq65r" }],
      ["path", { d: "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2", key: "be3xqs" }],
      ["circle", { cx: "12", cy: "12", r: "1", key: "41hilf" }],
      [
        "path",
        {
          d: "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0",
          key: "11ak4c"
        }
      ]
    ]);
    var Voicemail = createLucideIcon("Voicemail", [
      ["circle", { cx: "6", cy: "12", r: "4", key: "1ehtga" }],
      ["circle", { cx: "18", cy: "12", r: "4", key: "4vafl8" }],
      ["line", { x1: "6", x2: "18", y1: "16", y2: "16", key: "pmt8us" }]
    ]);
    var Volleyball = createLucideIcon("Volleyball", [
      ["path", { d: "M11.1 7.1a16.55 16.55 0 0 1 10.9 4", key: "2880wi" }],
      ["path", { d: "M12 12a12.6 12.6 0 0 1-8.7 5", key: "113sja" }],
      ["path", { d: "M16.8 13.6a16.55 16.55 0 0 1-9 7.5", key: "1qmsgl" }],
      ["path", { d: "M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10", key: "1bmeqp" }],
      ["path", { d: "M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5", key: "iekzv9" }],
      ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }]
    ]);
    var Volume1 = createLucideIcon("Volume1", [
      [
        "path",
        {
          d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
          key: "uqj9uw"
        }
      ],
      ["path", { d: "M16 9a5 5 0 0 1 0 6", key: "1q6k2b" }]
    ]);
    var Volume2 = createLucideIcon("Volume2", [
      [
        "path",
        {
          d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
          key: "uqj9uw"
        }
      ],
      ["path", { d: "M16 9a5 5 0 0 1 0 6", key: "1q6k2b" }],
      ["path", { d: "M19.364 18.364a9 9 0 0 0 0-12.728", key: "ijwkga" }]
    ]);
    var VolumeOff = createLucideIcon("VolumeOff", [
      ["path", { d: "M16 9a5 5 0 0 1 .95 2.293", key: "1fgyg8" }],
      ["path", { d: "M19.364 5.636a9 9 0 0 1 1.889 9.96", key: "l3zxae" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }],
      [
        "path",
        {
          d: "m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11",
          key: "1gbwow"
        }
      ],
      ["path", { d: "M9.828 4.172A.686.686 0 0 1 11 4.657v.686", key: "s2je0y" }]
    ]);
    var VolumeX = createLucideIcon("VolumeX", [
      [
        "path",
        {
          d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
          key: "uqj9uw"
        }
      ],
      ["line", { x1: "22", x2: "16", y1: "9", y2: "15", key: "1ewh16" }],
      ["line", { x1: "16", x2: "22", y1: "9", y2: "15", key: "5ykzw1" }]
    ]);
    var Volume = createLucideIcon("Volume", [
      [
        "path",
        {
          d: "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z",
          key: "uqj9uw"
        }
      ]
    ]);
    var Vote = createLucideIcon("Vote", [
      ["path", { d: "m9 12 2 2 4-4", key: "dzmm74" }],
      ["path", { d: "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z", key: "1ezoue" }],
      ["path", { d: "M22 19H2", key: "nuriw5" }]
    ]);
    var WalletCards = createLucideIcon("WalletCards", [
      ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
      ["path", { d: "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2", key: "4125el" }],
      [
        "path",
        {
          d: "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21",
          key: "1dpki6"
        }
      ]
    ]);
    var WalletMinimal = createLucideIcon("WalletMinimal", [
      ["path", { d: "M17 14h.01", key: "7oqj8z" }],
      [
        "path",
        {
          d: "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14",
          key: "u1rqew"
        }
      ]
    ]);
    var Wallet = createLucideIcon("Wallet", [
      [
        "path",
        {
          d: "M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1",
          key: "18etb6"
        }
      ],
      ["path", { d: "M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4", key: "xoc0q4" }]
    ]);
    var Wallpaper = createLucideIcon("Wallpaper", [
      ["circle", { cx: "8", cy: "9", r: "2", key: "gjzl9d" }],
      [
        "path",
        {
          d: "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2",
          key: "69xh40"
        }
      ],
      ["path", { d: "M8 21h8", key: "1ev6f3" }],
      ["path", { d: "M12 17v4", key: "1riwvh" }]
    ]);
    var WandSparkles = createLucideIcon("WandSparkles", [
      [
        "path",
        {
          d: "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72",
          key: "ul74o6"
        }
      ],
      ["path", { d: "m14 7 3 3", key: "1r5n42" }],
      ["path", { d: "M5 6v4", key: "ilb8ba" }],
      ["path", { d: "M19 14v4", key: "blhpug" }],
      ["path", { d: "M10 2v2", key: "7u0qdc" }],
      ["path", { d: "M7 8H3", key: "zfb6yr" }],
      ["path", { d: "M21 16h-4", key: "1cnmox" }],
      ["path", { d: "M11 3H9", key: "1obp7u" }]
    ]);
    var Wand = createLucideIcon("Wand", [
      ["path", { d: "M15 4V2", key: "z1p9b7" }],
      ["path", { d: "M15 16v-2", key: "px0unx" }],
      ["path", { d: "M8 9h2", key: "1g203m" }],
      ["path", { d: "M20 9h2", key: "19tzq7" }],
      ["path", { d: "M17.8 11.8 19 13", key: "yihg8r" }],
      ["path", { d: "M15 9h.01", key: "x1ddxp" }],
      ["path", { d: "M17.8 6.2 19 5", key: "fd4us0" }],
      ["path", { d: "m3 21 9-9", key: "1jfql5" }],
      ["path", { d: "M12.2 6.2 11 5", key: "i3da3b" }]
    ]);
    var Warehouse = createLucideIcon("Warehouse", [
      [
        "path",
        {
          d: "M22 8.35V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8.35A2 2 0 0 1 3.26 6.5l8-3.2a2 2 0 0 1 1.48 0l8 3.2A2 2 0 0 1 22 8.35Z",
          key: "gksnxg"
        }
      ],
      ["path", { d: "M6 18h12", key: "9pbo8z" }],
      ["path", { d: "M6 14h12", key: "4cwo0f" }],
      ["rect", { width: "12", height: "12", x: "6", y: "10", key: "apd30q" }]
    ]);
    var WashingMachine = createLucideIcon("WashingMachine", [
      ["path", { d: "M3 6h3", key: "155dbl" }],
      ["path", { d: "M17 6h.01", key: "e2y6kg" }],
      ["rect", { width: "18", height: "20", x: "3", y: "2", rx: "2", key: "od3kk9" }],
      ["circle", { cx: "12", cy: "13", r: "5", key: "nlbqau" }],
      ["path", { d: "M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5", key: "17lach" }]
    ]);
    var Watch = createLucideIcon("Watch", [
      ["circle", { cx: "12", cy: "12", r: "6", key: "1vlfrh" }],
      ["polyline", { points: "12 10 12 12 13 13", key: "19dquz" }],
      [
        "path",
        { d: "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05", key: "18k57s" }
      ],
      ["path", { d: "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05", key: "16ny36" }]
    ]);
    var Waves = createLucideIcon("Waves", [
      [
        "path",
        {
          d: "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
          key: "knzxuh"
        }
      ],
      [
        "path",
        {
          d: "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
          key: "2jd2cc"
        }
      ],
      [
        "path",
        {
          d: "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1",
          key: "rd2r6e"
        }
      ]
    ]);
    var Waypoints = createLucideIcon("Waypoints", [
      ["circle", { cx: "12", cy: "4.5", r: "2.5", key: "r5ysbb" }],
      ["path", { d: "m10.2 6.3-3.9 3.9", key: "1nzqf6" }],
      ["circle", { cx: "4.5", cy: "12", r: "2.5", key: "jydg6v" }],
      ["path", { d: "M7 12h10", key: "b7w52i" }],
      ["circle", { cx: "19.5", cy: "12", r: "2.5", key: "1piiel" }],
      ["path", { d: "m13.8 17.7 3.9-3.9", key: "1wyg1y" }],
      ["circle", { cx: "12", cy: "19.5", r: "2.5", key: "13o1pw" }]
    ]);
    var Webcam = createLucideIcon("Webcam", [
      ["circle", { cx: "12", cy: "10", r: "8", key: "1gshiw" }],
      ["circle", { cx: "12", cy: "10", r: "3", key: "ilqhr7" }],
      ["path", { d: "M7 22h10", key: "10w4w3" }],
      ["path", { d: "M12 22v-4", key: "1utk9m" }]
    ]);
    var WebhookOff = createLucideIcon("WebhookOff", [
      ["path", { d: "M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15", key: "1tvl6x" }],
      ["path", { d: "M9 3.4a4 4 0 0 1 6.52.66", key: "q04jfq" }],
      ["path", { d: "m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05", key: "azowf0" }],
      ["path", { d: "M20.3 20.3a4 4 0 0 1-2.3.7", key: "5joiws" }],
      ["path", { d: "M18.6 13a4 4 0 0 1 3.357 3.414", key: "cangb8" }],
      ["path", { d: "m12 6 .6 1", key: "tpjl1n" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Webhook = createLucideIcon("Webhook", [
      [
        "path",
        {
          d: "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2",
          key: "q3hayz"
        }
      ],
      ["path", { d: "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06", key: "1go1hn" }],
      ["path", { d: "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8", key: "qlwsc0" }]
    ]);
    var Weight = createLucideIcon("Weight", [
      ["circle", { cx: "12", cy: "5", r: "3", key: "rqqgnr" }],
      [
        "path",
        {
          d: "M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z",
          key: "56o5sh"
        }
      ]
    ]);
    var WheatOff = createLucideIcon("WheatOff", [
      ["path", { d: "m2 22 10-10", key: "28ilpk" }],
      ["path", { d: "m16 8-1.17 1.17", key: "1qqm82" }],
      [
        "path",
        {
          d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
          key: "1rdhi6"
        }
      ],
      [
        "path",
        { d: "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97", key: "4wz8re" }
      ],
      [
        "path",
        { d: "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62", key: "rves66" }
      ],
      ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
      [
        "path",
        {
          d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
          key: "tc8ph9"
        }
      ],
      [
        "path",
        {
          d: "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98",
          key: "ak46r"
        }
      ],
      [
        "path",
        {
          d: "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28",
          key: "1tw520"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Wheat = createLucideIcon("Wheat", [
      ["path", { d: "M2 22 16 8", key: "60hf96" }],
      [
        "path",
        {
          d: "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
          key: "1rdhi6"
        }
      ],
      [
        "path",
        {
          d: "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
          key: "1sdzmb"
        }
      ],
      [
        "path",
        {
          d: "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z",
          key: "eoatbi"
        }
      ],
      ["path", { d: "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z", key: "19rau1" }],
      [
        "path",
        {
          d: "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
          key: "tc8ph9"
        }
      ],
      [
        "path",
        {
          d: "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
          key: "2m8kc5"
        }
      ],
      [
        "path",
        {
          d: "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z",
          key: "vex3ng"
        }
      ]
    ]);
    var WholeWord = createLucideIcon("WholeWord", [
      ["circle", { cx: "7", cy: "12", r: "3", key: "12clwm" }],
      ["path", { d: "M10 9v6", key: "17i7lo" }],
      ["circle", { cx: "17", cy: "12", r: "3", key: "gl7c2s" }],
      ["path", { d: "M14 7v8", key: "dl84cr" }],
      ["path", { d: "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1", key: "lt2kga" }]
    ]);
    var WifiHigh = createLucideIcon("WifiHigh", [
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M5 12.859a10 10 0 0 1 14 0", key: "1x1e6c" }],
      ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
    ]);
    var WifiLow = createLucideIcon("WifiLow", [
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
    ]);
    var WifiOff = createLucideIcon("WifiOff", [
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }],
      ["path", { d: "M5 12.859a10 10 0 0 1 5.17-2.69", key: "1dl1wf" }],
      ["path", { d: "M19 12.859a10 10 0 0 0-2.007-1.523", key: "4k23kn" }],
      ["path", { d: "M2 8.82a15 15 0 0 1 4.177-2.643", key: "1grhjp" }],
      ["path", { d: "M22 8.82a15 15 0 0 0-11.288-3.764", key: "z3jwby" }],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var WifiZero = createLucideIcon("WifiZero", [["path", { d: "M12 20h.01", key: "zekei9" }]]);
    var Wifi = createLucideIcon("Wifi", [
      ["path", { d: "M12 20h.01", key: "zekei9" }],
      ["path", { d: "M2 8.82a15 15 0 0 1 20 0", key: "dnpr2z" }],
      ["path", { d: "M5 12.859a10 10 0 0 1 14 0", key: "1x1e6c" }],
      ["path", { d: "M8.5 16.429a5 5 0 0 1 7 0", key: "1bycff" }]
    ]);
    var WindArrowDown = createLucideIcon("WindArrowDown", [
      ["path", { d: "M10 2v8", key: "d4bbey" }],
      ["path", { d: "M12.8 21.6A2 2 0 1 0 14 18H2", key: "19kp1d" }],
      ["path", { d: "M17.5 10a2.5 2.5 0 1 1 2 4H2", key: "19kpjc" }],
      ["path", { d: "m6 6 4 4 4-4", key: "k13n16" }]
    ]);
    var Wind = createLucideIcon("Wind", [
      ["path", { d: "M12.8 19.6A2 2 0 1 0 14 16H2", key: "148xed" }],
      ["path", { d: "M17.5 8a2.5 2.5 0 1 1 2 4H2", key: "1u4tom" }],
      ["path", { d: "M9.8 4.4A2 2 0 1 1 11 8H2", key: "75valh" }]
    ]);
    var WineOff = createLucideIcon("WineOff", [
      ["path", { d: "M8 22h8", key: "rmew8v" }],
      ["path", { d: "M7 10h3m7 0h-1.343", key: "v48bem" }],
      ["path", { d: "M12 15v7", key: "t2xh3l" }],
      [
        "path",
        {
          d: "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198",
          key: "1ymjlu"
        }
      ],
      ["line", { x1: "2", x2: "22", y1: "2", y2: "22", key: "a6p6uj" }]
    ]);
    var Wine = createLucideIcon("Wine", [
      ["path", { d: "M8 22h8", key: "rmew8v" }],
      ["path", { d: "M7 10h10", key: "1101jm" }],
      ["path", { d: "M12 15v7", key: "t2xh3l" }],
      [
        "path",
        { d: "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z", key: "10ffi3" }
      ]
    ]);
    var Workflow = createLucideIcon("Workflow", [
      ["rect", { width: "8", height: "8", x: "3", y: "3", rx: "2", key: "by2w9f" }],
      ["path", { d: "M7 11v4a2 2 0 0 0 2 2h4", key: "xkn7yn" }],
      ["rect", { width: "8", height: "8", x: "13", y: "13", rx: "2", key: "1cgmvn" }]
    ]);
    var Worm = createLucideIcon("Worm", [
      ["path", { d: "m19 12-1.5 3", key: "9bcu4o" }],
      ["path", { d: "M19.63 18.81 22 20", key: "121v98" }],
      [
        "path",
        {
          d: "M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z",
          key: "1tij6q"
        }
      ]
    ]);
    var WrapText = createLucideIcon("WrapText", [
      ["line", { x1: "3", x2: "21", y1: "6", y2: "6", key: "4m8b97" }],
      ["path", { d: "M3 12h15a3 3 0 1 1 0 6h-4", key: "1cl7v7" }],
      ["polyline", { points: "16 16 14 18 16 20", key: "1jznyi" }],
      ["line", { x1: "3", x2: "10", y1: "18", y2: "18", key: "1h33wv" }]
    ]);
    var Wrench = createLucideIcon("Wrench", [
      [
        "path",
        {
          d: "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z",
          key: "cbrjhi"
        }
      ]
    ]);
    var X = createLucideIcon("X", [
      ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
      ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
    ]);
    var Youtube = createLucideIcon("Youtube", [
      [
        "path",
        {
          d: "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17",
          key: "1q2vi4"
        }
      ],
      ["path", { d: "m10 15 5-3-5-3z", key: "1jp15x" }]
    ]);
    var ZapOff = createLucideIcon("ZapOff", [
      ["path", { d: "M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317", key: "193nxd" }],
      ["path", { d: "M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773", key: "27a7lr" }],
      [
        "path",
        {
          d: "M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643",
          key: "1e0qe9"
        }
      ],
      ["path", { d: "m2 2 20 20", key: "1ooewy" }]
    ]);
    var Zap = createLucideIcon("Zap", [
      [
        "path",
        {
          d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
          key: "1xq2db"
        }
      ]
    ]);
    var ZoomIn = createLucideIcon("ZoomIn", [
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
      ["line", { x1: "11", x2: "11", y1: "8", y2: "14", key: "1vmskp" }],
      ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
    ]);
    var ZoomOut = createLucideIcon("ZoomOut", [
      ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
      ["line", { x1: "21", x2: "16.65", y1: "21", y2: "16.65", key: "13gj7c" }],
      ["line", { x1: "8", x2: "14", y1: "11", y2: "11", key: "durymu" }]
    ]);
    var index = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      AArrowDown,
      AArrowUp,
      ALargeSmall,
      Accessibility,
      Activity,
      AirVent,
      Airplay,
      AlarmClock,
      AlarmClockCheck,
      AlarmClockMinus,
      AlarmClockOff,
      AlarmClockPlus,
      AlarmSmoke,
      Album,
      AlignCenter,
      AlignCenterHorizontal,
      AlignCenterVertical,
      AlignEndHorizontal,
      AlignEndVertical,
      AlignHorizontalDistributeCenter,
      AlignHorizontalDistributeEnd,
      AlignHorizontalDistributeStart,
      AlignHorizontalJustifyCenter,
      AlignHorizontalJustifyEnd,
      AlignHorizontalJustifyStart,
      AlignHorizontalSpaceAround,
      AlignHorizontalSpaceBetween,
      AlignJustify,
      AlignLeft,
      AlignRight,
      AlignStartHorizontal,
      AlignStartVertical,
      AlignVerticalDistributeCenter,
      AlignVerticalDistributeEnd,
      AlignVerticalDistributeStart,
      AlignVerticalJustifyCenter,
      AlignVerticalJustifyEnd,
      AlignVerticalJustifyStart,
      AlignVerticalSpaceAround,
      AlignVerticalSpaceBetween,
      Ambulance,
      Ampersand,
      Ampersands,
      Amphora,
      Anchor,
      Angry,
      Annoyed,
      Antenna,
      Anvil,
      Aperture,
      AppWindow,
      AppWindowMac,
      Apple,
      Archive,
      ArchiveRestore,
      ArchiveX,
      Armchair,
      ArrowBigDown,
      ArrowBigDownDash,
      ArrowBigLeft,
      ArrowBigLeftDash,
      ArrowBigRight,
      ArrowBigRightDash,
      ArrowBigUp,
      ArrowBigUpDash,
      ArrowDown,
      ArrowDown01,
      ArrowDown10,
      ArrowDownAZ,
      ArrowDownFromLine,
      ArrowDownLeft,
      ArrowDownNarrowWide,
      ArrowDownRight,
      ArrowDownToDot,
      ArrowDownToLine,
      ArrowDownUp,
      ArrowDownWideNarrow,
      ArrowDownZA,
      ArrowLeft: ArrowLeft2,
      ArrowLeftFromLine,
      ArrowLeftRight,
      ArrowLeftToLine,
      ArrowRight,
      ArrowRightFromLine,
      ArrowRightLeft,
      ArrowRightToLine,
      ArrowUp,
      ArrowUp01,
      ArrowUp10,
      ArrowUpAZ,
      ArrowUpDown,
      ArrowUpFromDot,
      ArrowUpFromLine,
      ArrowUpLeft,
      ArrowUpNarrowWide,
      ArrowUpRight,
      ArrowUpToLine,
      ArrowUpWideNarrow,
      ArrowUpZA,
      ArrowsUpFromLine,
      Asterisk,
      AtSign,
      Atom,
      AudioLines,
      AudioWaveform,
      Award,
      Axe,
      Axis3d,
      Baby,
      Backpack,
      Badge,
      BadgeAlert,
      BadgeCent,
      BadgeCheck,
      BadgeDollarSign,
      BadgeEuro,
      BadgeHelp,
      BadgeIndianRupee,
      BadgeInfo,
      BadgeJapaneseYen,
      BadgeMinus,
      BadgePercent,
      BadgePlus,
      BadgePoundSterling,
      BadgeRussianRuble,
      BadgeSwissFranc,
      BadgeX,
      BaggageClaim,
      Ban,
      Banana,
      Bandage,
      Banknote,
      Barcode,
      Baseline,
      Bath,
      Battery,
      BatteryCharging,
      BatteryFull,
      BatteryLow,
      BatteryMedium,
      BatteryWarning,
      Beaker,
      Bean,
      BeanOff,
      Bed,
      BedDouble,
      BedSingle,
      Beef,
      Beer,
      BeerOff,
      Bell,
      BellDot,
      BellElectric,
      BellMinus,
      BellOff,
      BellPlus,
      BellRing,
      BetweenHorizontalEnd,
      BetweenHorizontalStart,
      BetweenVerticalEnd,
      BetweenVerticalStart,
      BicepsFlexed,
      Bike,
      Binary,
      Binoculars,
      Biohazard,
      Bird,
      Bitcoin,
      Blend,
      Blinds,
      Blocks,
      Bluetooth,
      BluetoothConnected,
      BluetoothOff,
      BluetoothSearching,
      Bold,
      Bolt,
      Bomb,
      Bone,
      Book,
      BookA,
      BookAudio,
      BookCheck,
      BookCopy,
      BookDashed,
      BookDown,
      BookHeadphones,
      BookHeart,
      BookImage,
      BookKey,
      BookLock,
      BookMarked,
      BookMinus,
      BookOpen,
      BookOpenCheck,
      BookOpenText,
      BookPlus,
      BookText,
      BookType,
      BookUp,
      BookUp2,
      BookUser,
      BookX,
      Bookmark,
      BookmarkCheck,
      BookmarkMinus,
      BookmarkPlus,
      BookmarkX,
      BoomBox,
      Bot,
      BotMessageSquare,
      BotOff,
      Box,
      Boxes,
      Braces,
      Brackets,
      Brain,
      BrainCircuit,
      BrainCog,
      BrickWall,
      Briefcase,
      BriefcaseBusiness,
      BriefcaseConveyorBelt,
      BriefcaseMedical,
      BringToFront,
      Brush,
      Bug,
      BugOff,
      BugPlay,
      Building,
      Building2,
      Bus,
      BusFront,
      Cable,
      CableCar,
      Cake,
      CakeSlice,
      Calculator,
      Calendar: Calendar2,
      Calendar1,
      CalendarArrowDown,
      CalendarArrowUp,
      CalendarCheck,
      CalendarCheck2,
      CalendarClock,
      CalendarCog,
      CalendarDays,
      CalendarFold,
      CalendarHeart,
      CalendarMinus,
      CalendarMinus2,
      CalendarOff,
      CalendarPlus,
      CalendarPlus2,
      CalendarRange,
      CalendarSearch,
      CalendarSync,
      CalendarX,
      CalendarX2,
      Camera,
      CameraOff,
      Candy,
      CandyCane,
      CandyOff,
      Cannabis,
      Captions,
      CaptionsOff,
      Car,
      CarFront,
      CarTaxiFront,
      Caravan,
      Carrot,
      CaseLower,
      CaseSensitive,
      CaseUpper,
      CassetteTape,
      Cast,
      Castle,
      Cat,
      Cctv,
      ChartArea,
      ChartBar,
      ChartBarBig,
      ChartBarDecreasing,
      ChartBarIncreasing,
      ChartBarStacked,
      ChartCandlestick,
      ChartColumn,
      ChartColumnBig,
      ChartColumnDecreasing,
      ChartColumnIncreasing,
      ChartColumnStacked,
      ChartGantt,
      ChartLine,
      ChartNetwork,
      ChartNoAxesColumn,
      ChartNoAxesColumnDecreasing,
      ChartNoAxesColumnIncreasing,
      ChartNoAxesCombined,
      ChartNoAxesGantt,
      ChartPie,
      ChartScatter,
      ChartSpline,
      Check,
      CheckCheck,
      ChefHat,
      Cherry,
      ChevronDown,
      ChevronFirst,
      ChevronLast,
      ChevronLeft,
      ChevronRight,
      ChevronUp,
      ChevronsDown,
      ChevronsDownUp,
      ChevronsLeft,
      ChevronsLeftRight,
      ChevronsLeftRightEllipsis,
      ChevronsRight,
      ChevronsRightLeft,
      ChevronsUp,
      ChevronsUpDown,
      Chrome,
      Church,
      Cigarette,
      CigaretteOff,
      Circle,
      CircleAlert,
      CircleArrowDown,
      CircleArrowLeft,
      CircleArrowOutDownLeft,
      CircleArrowOutDownRight,
      CircleArrowOutUpLeft,
      CircleArrowOutUpRight,
      CircleArrowRight,
      CircleArrowUp,
      CircleCheck,
      CircleCheckBig,
      CircleChevronDown,
      CircleChevronLeft,
      CircleChevronRight,
      CircleChevronUp,
      CircleDashed,
      CircleDivide,
      CircleDollarSign,
      CircleDot,
      CircleDotDashed,
      CircleEllipsis,
      CircleEqual,
      CircleFadingArrowUp,
      CircleFadingPlus,
      CircleGauge,
      CircleHelp,
      CircleMinus,
      CircleOff,
      CircleParking,
      CircleParkingOff,
      CirclePause,
      CirclePercent,
      CirclePlay,
      CirclePlus,
      CirclePower,
      CircleSlash,
      CircleSlash2,
      CircleStop,
      CircleUser,
      CircleUserRound,
      CircleX,
      CircuitBoard,
      Citrus,
      Clapperboard,
      Clipboard,
      ClipboardCheck,
      ClipboardCopy,
      ClipboardList,
      ClipboardMinus,
      ClipboardPaste,
      ClipboardPen,
      ClipboardPenLine,
      ClipboardPlus,
      ClipboardType,
      ClipboardX,
      Clock: Clock13,
      Clock1,
      Clock10,
      Clock11,
      Clock12,
      Clock2,
      Clock3,
      Clock4,
      Clock5,
      Clock6,
      Clock7,
      Clock8,
      Clock9,
      ClockAlert,
      ClockArrowDown,
      ClockArrowUp,
      Cloud,
      CloudAlert,
      CloudCog,
      CloudDownload,
      CloudDrizzle,
      CloudFog,
      CloudHail,
      CloudLightning,
      CloudMoon,
      CloudMoonRain,
      CloudOff,
      CloudRain,
      CloudRainWind,
      CloudSnow,
      CloudSun,
      CloudSunRain,
      CloudUpload,
      Cloudy,
      Clover,
      Club,
      Code,
      CodeXml,
      Codepen,
      Codesandbox,
      Coffee,
      Cog,
      Coins,
      Columns2,
      Columns3,
      Columns4,
      Combine,
      Command,
      Compass,
      Component,
      Computer,
      ConciergeBell,
      Cone,
      Construction,
      Contact,
      ContactRound,
      Container,
      Contrast,
      Cookie,
      CookingPot,
      Copy,
      CopyCheck,
      CopyMinus,
      CopyPlus,
      CopySlash,
      CopyX,
      Copyleft,
      Copyright,
      CornerDownLeft,
      CornerDownRight,
      CornerLeftDown,
      CornerLeftUp,
      CornerRightDown,
      CornerRightUp,
      CornerUpLeft,
      CornerUpRight,
      Cpu,
      CreativeCommons,
      CreditCard,
      Croissant,
      Crop,
      Cross,
      Crosshair,
      Crown,
      Cuboid,
      CupSoda,
      Currency,
      Cylinder,
      Dam,
      Database,
      DatabaseBackup,
      DatabaseZap,
      Delete,
      Dessert,
      Diameter,
      Diamond,
      DiamondMinus,
      DiamondPercent,
      DiamondPlus,
      Dice1,
      Dice2,
      Dice3,
      Dice4,
      Dice5,
      Dice6,
      Dices,
      Diff,
      Disc,
      Disc2,
      Disc3,
      DiscAlbum,
      Divide,
      Dna,
      DnaOff,
      Dock,
      Dog,
      DollarSign,
      Donut,
      DoorClosed,
      DoorOpen,
      Dot,
      Download,
      DraftingCompass,
      Drama,
      Dribbble,
      Drill,
      Droplet,
      Droplets,
      Drum,
      Drumstick,
      Dumbbell,
      Ear,
      EarOff,
      Earth,
      EarthLock,
      Eclipse,
      Egg,
      EggFried,
      EggOff,
      Ellipsis,
      EllipsisVertical,
      Equal,
      EqualApproximately,
      EqualNot,
      Eraser,
      EthernetPort,
      Euro,
      Expand,
      ExternalLink,
      Eye,
      EyeClosed,
      EyeOff,
      Facebook,
      Factory,
      Fan,
      FastForward,
      Feather,
      Fence,
      FerrisWheel,
      Figma,
      File,
      FileArchive,
      FileAudio,
      FileAudio2,
      FileAxis3d,
      FileBadge,
      FileBadge2,
      FileBox,
      FileChartColumn,
      FileChartColumnIncreasing,
      FileChartLine,
      FileChartPie,
      FileCheck,
      FileCheck2,
      FileClock,
      FileCode,
      FileCode2,
      FileCog,
      FileDiff,
      FileDigit,
      FileDown,
      FileHeart,
      FileImage,
      FileInput,
      FileJson,
      FileJson2,
      FileKey,
      FileKey2,
      FileLock,
      FileLock2,
      FileMinus,
      FileMinus2,
      FileMusic,
      FileOutput,
      FilePen,
      FilePenLine,
      FilePlus,
      FilePlus2,
      FileQuestion,
      FileScan,
      FileSearch,
      FileSearch2,
      FileSliders,
      FileSpreadsheet,
      FileStack,
      FileSymlink,
      FileTerminal,
      FileText,
      FileType,
      FileType2,
      FileUp,
      FileUser,
      FileVideo,
      FileVideo2,
      FileVolume,
      FileVolume2,
      FileWarning,
      FileX,
      FileX2,
      Files,
      Film,
      Filter,
      FilterX,
      Fingerprint,
      FireExtinguisher,
      Fish,
      FishOff,
      FishSymbol,
      Flag,
      FlagOff,
      FlagTriangleLeft,
      FlagTriangleRight,
      Flame,
      FlameKindling,
      Flashlight,
      FlashlightOff,
      FlaskConical,
      FlaskConicalOff,
      FlaskRound,
      FlipHorizontal,
      FlipHorizontal2,
      FlipVertical,
      FlipVertical2,
      Flower,
      Flower2,
      Focus,
      FoldHorizontal,
      FoldVertical,
      Folder,
      FolderArchive,
      FolderCheck,
      FolderClock,
      FolderClosed,
      FolderCode,
      FolderCog,
      FolderDot,
      FolderDown,
      FolderGit,
      FolderGit2,
      FolderHeart,
      FolderInput,
      FolderKanban,
      FolderKey,
      FolderLock,
      FolderMinus,
      FolderOpen,
      FolderOpenDot,
      FolderOutput,
      FolderPen,
      FolderPlus,
      FolderRoot,
      FolderSearch,
      FolderSearch2,
      FolderSymlink,
      FolderSync,
      FolderTree,
      FolderUp,
      FolderX,
      Folders,
      Footprints,
      Forklift,
      Forward,
      Frame,
      Framer,
      Frown,
      Fuel,
      Fullscreen,
      GalleryHorizontal,
      GalleryHorizontalEnd,
      GalleryThumbnails,
      GalleryVertical,
      GalleryVerticalEnd,
      Gamepad,
      Gamepad2,
      Gauge,
      Gavel,
      Gem,
      Ghost,
      Gift,
      GitBranch,
      GitBranchPlus,
      GitCommitHorizontal,
      GitCommitVertical,
      GitCompare,
      GitCompareArrows,
      GitFork,
      GitGraph,
      GitMerge,
      GitPullRequest,
      GitPullRequestArrow,
      GitPullRequestClosed,
      GitPullRequestCreate,
      GitPullRequestCreateArrow,
      GitPullRequestDraft,
      Github,
      Gitlab,
      GlassWater,
      Glasses,
      Globe,
      GlobeLock,
      Goal,
      Grab,
      GraduationCap,
      Grape,
      Grid2x2,
      Grid2x2Check,
      Grid2x2Plus,
      Grid2x2X,
      Grid3x3,
      Grip,
      GripHorizontal,
      GripVertical,
      Group,
      Guitar,
      Ham,
      Hammer,
      Hand,
      HandCoins,
      HandHeart,
      HandHelping,
      HandMetal,
      HandPlatter,
      Handshake,
      HardDrive,
      HardDriveDownload,
      HardDriveUpload,
      HardHat,
      Hash,
      Haze,
      HdmiPort,
      Heading,
      Heading1,
      Heading2,
      Heading3,
      Heading4,
      Heading5,
      Heading6,
      HeadphoneOff,
      Headphones,
      Headset,
      Heart,
      HeartCrack,
      HeartHandshake,
      HeartOff,
      HeartPulse,
      Heater,
      Hexagon,
      Highlighter,
      History,
      Hop,
      HopOff,
      Hospital,
      Hotel,
      Hourglass,
      House,
      HousePlug,
      HousePlus,
      IceCreamBowl,
      IceCreamCone,
      IdCard,
      Image,
      ImageDown,
      ImageMinus,
      ImageOff,
      ImagePlay,
      ImagePlus,
      ImageUp,
      ImageUpscale,
      Images,
      Import,
      Inbox,
      IndentDecrease,
      IndentIncrease,
      IndianRupee,
      Infinity: Infinity2,
      Info,
      InspectionPanel,
      Instagram,
      Italic,
      IterationCcw,
      IterationCw,
      JapaneseYen,
      Joystick,
      Kanban,
      Key,
      KeyRound,
      KeySquare,
      Keyboard,
      KeyboardMusic,
      KeyboardOff,
      Lamp,
      LampCeiling,
      LampDesk,
      LampFloor,
      LampWallDown,
      LampWallUp,
      LandPlot,
      Landmark,
      Languages,
      Laptop,
      LaptopMinimal,
      LaptopMinimalCheck,
      Lasso,
      LassoSelect,
      Laugh,
      Layers,
      Layers2,
      Layers3,
      LayoutDashboard,
      LayoutGrid,
      LayoutList,
      LayoutPanelLeft,
      LayoutPanelTop,
      LayoutTemplate,
      Leaf,
      LeafyGreen,
      Lectern,
      LetterText,
      Library,
      LibraryBig,
      LifeBuoy,
      Ligature,
      Lightbulb,
      LightbulbOff,
      Link: Link3,
      Link2,
      Link2Off,
      Linkedin,
      List,
      ListCheck,
      ListChecks,
      ListCollapse,
      ListEnd,
      ListFilter,
      ListMinus,
      ListMusic,
      ListOrdered,
      ListPlus,
      ListRestart,
      ListStart,
      ListTodo,
      ListTree,
      ListVideo,
      ListX,
      Loader,
      LoaderCircle,
      LoaderPinwheel,
      Locate,
      LocateFixed,
      LocateOff,
      Lock,
      LockKeyhole,
      LockKeyholeOpen,
      LockOpen,
      LogIn,
      LogOut,
      Logs,
      Lollipop,
      Luggage,
      Magnet,
      Mail,
      MailCheck,
      MailMinus,
      MailOpen,
      MailPlus,
      MailQuestion,
      MailSearch,
      MailWarning,
      MailX,
      Mailbox,
      Mails,
      Map: Map2,
      MapPin,
      MapPinCheck,
      MapPinCheckInside,
      MapPinHouse,
      MapPinMinus,
      MapPinMinusInside,
      MapPinOff,
      MapPinPlus,
      MapPinPlusInside,
      MapPinX,
      MapPinXInside,
      MapPinned,
      Martini,
      Maximize,
      Maximize2,
      Medal,
      Megaphone,
      MegaphoneOff,
      Meh,
      MemoryStick,
      Menu,
      Merge,
      MessageCircle,
      MessageCircleCode,
      MessageCircleDashed,
      MessageCircleHeart,
      MessageCircleMore,
      MessageCircleOff,
      MessageCirclePlus,
      MessageCircleQuestion,
      MessageCircleReply,
      MessageCircleWarning,
      MessageCircleX,
      MessageSquare,
      MessageSquareCode,
      MessageSquareDashed,
      MessageSquareDiff,
      MessageSquareDot,
      MessageSquareHeart,
      MessageSquareLock,
      MessageSquareMore,
      MessageSquareOff,
      MessageSquarePlus,
      MessageSquareQuote,
      MessageSquareReply,
      MessageSquareShare,
      MessageSquareText,
      MessageSquareWarning,
      MessageSquareX,
      MessagesSquare,
      Mic,
      MicOff,
      MicVocal,
      Microchip,
      Microscope,
      Microwave,
      Milestone,
      Milk,
      MilkOff,
      Minimize,
      Minimize2,
      Minus,
      Monitor,
      MonitorCheck,
      MonitorCog,
      MonitorDot,
      MonitorDown,
      MonitorOff,
      MonitorPause,
      MonitorPlay,
      MonitorSmartphone,
      MonitorSpeaker,
      MonitorStop,
      MonitorUp,
      MonitorX,
      Moon,
      MoonStar,
      Mountain,
      MountainSnow,
      Mouse,
      MouseOff,
      MousePointer,
      MousePointer2,
      MousePointerBan,
      MousePointerClick,
      Move,
      Move3d,
      MoveDiagonal,
      MoveDiagonal2,
      MoveDown,
      MoveDownLeft,
      MoveDownRight,
      MoveHorizontal,
      MoveLeft,
      MoveRight,
      MoveUp,
      MoveUpLeft,
      MoveUpRight,
      MoveVertical,
      Music,
      Music2,
      Music3,
      Music4,
      Navigation,
      Navigation2,
      Navigation2Off,
      NavigationOff,
      Network,
      Newspaper,
      Nfc,
      Notebook,
      NotebookPen,
      NotebookTabs,
      NotebookText,
      NotepadText,
      NotepadTextDashed,
      Nut,
      NutOff,
      Octagon,
      OctagonAlert,
      OctagonMinus,
      OctagonPause,
      OctagonX,
      Omega,
      Option,
      Orbit,
      Origami,
      Package,
      Package2,
      PackageCheck,
      PackageMinus,
      PackageOpen,
      PackagePlus,
      PackageSearch,
      PackageX,
      PaintBucket,
      PaintRoller,
      Paintbrush,
      PaintbrushVertical,
      Palette,
      PanelBottom,
      PanelBottomClose,
      PanelBottomDashed,
      PanelBottomOpen,
      PanelLeft,
      PanelLeftClose,
      PanelLeftDashed,
      PanelLeftOpen,
      PanelRight,
      PanelRightClose,
      PanelRightDashed,
      PanelRightOpen,
      PanelTop,
      PanelTopClose,
      PanelTopDashed,
      PanelTopOpen,
      PanelsLeftBottom,
      PanelsRightBottom,
      PanelsTopLeft,
      Paperclip,
      Parentheses,
      ParkingMeter,
      PartyPopper,
      Pause,
      PawPrint,
      PcCase,
      Pen,
      PenLine,
      PenOff,
      PenTool,
      Pencil,
      PencilLine,
      PencilOff,
      PencilRuler,
      Pentagon,
      Percent,
      PersonStanding,
      PhilippinePeso,
      Phone,
      PhoneCall,
      PhoneForwarded,
      PhoneIncoming,
      PhoneMissed,
      PhoneOff,
      PhoneOutgoing,
      Pi,
      Piano,
      Pickaxe,
      PictureInPicture,
      PictureInPicture2,
      PiggyBank,
      Pilcrow,
      PilcrowLeft,
      PilcrowRight,
      Pill,
      PillBottle,
      Pin,
      PinOff,
      Pipette,
      Pizza,
      Plane,
      PlaneLanding,
      PlaneTakeoff,
      Play,
      Plug,
      Plug2,
      PlugZap,
      Plus,
      Pocket,
      PocketKnife,
      Podcast,
      Pointer,
      PointerOff,
      Popcorn,
      Popsicle,
      PoundSterling,
      Power,
      PowerOff,
      Presentation,
      Printer,
      PrinterCheck,
      Projector,
      Proportions,
      Puzzle,
      Pyramid,
      QrCode,
      Quote,
      Rabbit,
      Radar,
      Radiation,
      Radical,
      Radio,
      RadioReceiver,
      RadioTower,
      Radius,
      RailSymbol,
      Rainbow,
      Rat,
      Ratio,
      Receipt,
      ReceiptCent,
      ReceiptEuro,
      ReceiptIndianRupee,
      ReceiptJapaneseYen,
      ReceiptPoundSterling,
      ReceiptRussianRuble,
      ReceiptSwissFranc,
      ReceiptText,
      RectangleEllipsis,
      RectangleHorizontal,
      RectangleVertical,
      Recycle,
      Redo,
      Redo2,
      RedoDot,
      RefreshCcw,
      RefreshCcwDot,
      RefreshCw,
      RefreshCwOff,
      Refrigerator,
      Regex,
      RemoveFormatting,
      Repeat,
      Repeat1,
      Repeat2,
      Replace,
      ReplaceAll,
      Reply,
      ReplyAll,
      Rewind,
      Ribbon,
      Rocket,
      RockingChair,
      RollerCoaster,
      Rotate3d,
      RotateCcw,
      RotateCcwSquare,
      RotateCw,
      RotateCwSquare,
      Route,
      RouteOff,
      Router,
      Rows2,
      Rows3,
      Rows4,
      Rss,
      Ruler,
      RussianRuble,
      Sailboat,
      Salad,
      Sandwich,
      Satellite,
      SatelliteDish,
      Save,
      SaveAll,
      SaveOff,
      Scale,
      Scale3d,
      Scaling,
      Scan,
      ScanBarcode,
      ScanEye,
      ScanFace,
      ScanLine,
      ScanQrCode,
      ScanSearch,
      ScanText,
      School,
      Scissors,
      ScissorsLineDashed,
      ScreenShare,
      ScreenShareOff,
      Scroll,
      ScrollText,
      Search,
      SearchCheck,
      SearchCode,
      SearchSlash,
      SearchX,
      Section,
      Send,
      SendHorizontal,
      SendToBack,
      SeparatorHorizontal,
      SeparatorVertical,
      Server,
      ServerCog,
      ServerCrash,
      ServerOff,
      Settings,
      Settings2,
      Shapes,
      Share,
      Share2,
      Sheet,
      Shell,
      Shield,
      ShieldAlert,
      ShieldBan,
      ShieldCheck,
      ShieldEllipsis,
      ShieldHalf,
      ShieldMinus,
      ShieldOff,
      ShieldPlus,
      ShieldQuestion,
      ShieldX,
      Ship,
      ShipWheel,
      Shirt,
      ShoppingBag,
      ShoppingBasket,
      ShoppingCart,
      Shovel,
      ShowerHead,
      Shrink,
      Shrub,
      Shuffle,
      Sigma,
      Signal,
      SignalHigh,
      SignalLow,
      SignalMedium,
      SignalZero,
      Signature,
      Signpost,
      SignpostBig,
      Siren,
      SkipBack,
      SkipForward,
      Skull,
      Slack,
      Slash,
      Slice,
      SlidersHorizontal,
      SlidersVertical,
      Smartphone,
      SmartphoneCharging,
      SmartphoneNfc,
      Smile,
      SmilePlus,
      Snail,
      Snowflake,
      Sofa,
      Soup,
      Space,
      Spade,
      Sparkle,
      Sparkles,
      Speaker,
      Speech,
      SpellCheck,
      SpellCheck2,
      Spline,
      Split,
      SprayCan,
      Sprout,
      Square,
      SquareActivity,
      SquareArrowDown,
      SquareArrowDownLeft,
      SquareArrowDownRight,
      SquareArrowLeft,
      SquareArrowOutDownLeft,
      SquareArrowOutDownRight,
      SquareArrowOutUpLeft,
      SquareArrowOutUpRight,
      SquareArrowRight,
      SquareArrowUp,
      SquareArrowUpLeft,
      SquareArrowUpRight,
      SquareAsterisk,
      SquareBottomDashedScissors,
      SquareChartGantt,
      SquareCheck,
      SquareCheckBig,
      SquareChevronDown,
      SquareChevronLeft,
      SquareChevronRight,
      SquareChevronUp,
      SquareCode,
      SquareDashed,
      SquareDashedBottom,
      SquareDashedBottomCode,
      SquareDashedKanban,
      SquareDashedMousePointer,
      SquareDivide,
      SquareDot,
      SquareEqual,
      SquareFunction,
      SquareKanban,
      SquareLibrary,
      SquareM,
      SquareMenu,
      SquareMinus,
      SquareMousePointer,
      SquareParking,
      SquareParkingOff,
      SquarePen,
      SquarePercent,
      SquarePi,
      SquarePilcrow,
      SquarePlay,
      SquarePlus,
      SquarePower,
      SquareRadical,
      SquareScissors,
      SquareSigma,
      SquareSlash,
      SquareSplitHorizontal,
      SquareSplitVertical,
      SquareSquare,
      SquareStack,
      SquareTerminal,
      SquareUser,
      SquareUserRound,
      SquareX,
      Squircle,
      Squirrel,
      Stamp,
      Star,
      StarHalf,
      StarOff,
      StepBack,
      StepForward,
      Stethoscope,
      Sticker,
      StickyNote,
      Store,
      StretchHorizontal,
      StretchVertical,
      Strikethrough,
      Subscript,
      Sun,
      SunDim,
      SunMedium,
      SunMoon,
      SunSnow,
      Sunrise,
      Sunset,
      Superscript,
      SwatchBook,
      SwissFranc,
      SwitchCamera,
      Sword,
      Swords,
      Syringe,
      Table,
      Table2,
      TableCellsMerge,
      TableCellsSplit,
      TableColumnsSplit,
      TableOfContents,
      TableProperties,
      TableRowsSplit,
      Tablet,
      TabletSmartphone,
      Tablets,
      Tag,
      Tags,
      Tally1,
      Tally2,
      Tally3,
      Tally4,
      Tally5,
      Tangent,
      Target,
      Telescope,
      Tent,
      TentTree,
      Terminal,
      TestTube,
      TestTubeDiagonal,
      TestTubes,
      Text,
      TextCursor,
      TextCursorInput,
      TextQuote,
      TextSearch,
      TextSelect,
      Theater,
      Thermometer,
      ThermometerSnowflake,
      ThermometerSun,
      ThumbsDown,
      ThumbsUp,
      Ticket,
      TicketCheck,
      TicketMinus,
      TicketPercent,
      TicketPlus,
      TicketSlash,
      TicketX,
      Tickets,
      TicketsPlane,
      Timer,
      TimerOff,
      TimerReset,
      ToggleLeft,
      ToggleRight,
      Toilet,
      Tornado,
      Torus,
      Touchpad,
      TouchpadOff,
      TowerControl,
      ToyBrick,
      Tractor,
      TrafficCone,
      TrainFront,
      TrainFrontTunnel,
      TrainTrack,
      TramFront,
      Trash,
      Trash2,
      TreeDeciduous,
      TreePalm,
      TreePine,
      Trees,
      Trello,
      TrendingDown,
      TrendingUp,
      TrendingUpDown,
      Triangle,
      TriangleAlert,
      TriangleRight,
      Trophy,
      Truck,
      Turtle,
      Tv,
      TvMinimal,
      TvMinimalPlay,
      Twitch,
      Twitter,
      Type,
      TypeOutline,
      Umbrella,
      UmbrellaOff,
      Underline,
      Undo,
      Undo2,
      UndoDot,
      UnfoldHorizontal,
      UnfoldVertical,
      Ungroup,
      University,
      Unlink,
      Unlink2,
      Unplug,
      Upload,
      Usb,
      User,
      UserCheck,
      UserCog,
      UserMinus,
      UserPen,
      UserPlus,
      UserRound,
      UserRoundCheck,
      UserRoundCog,
      UserRoundMinus,
      UserRoundPen,
      UserRoundPlus,
      UserRoundSearch,
      UserRoundX,
      UserSearch,
      UserX,
      Users,
      UsersRound,
      Utensils,
      UtensilsCrossed,
      UtilityPole,
      Variable,
      Vault,
      Vegan,
      VenetianMask,
      Vibrate,
      VibrateOff,
      Video,
      VideoOff,
      Videotape,
      View,
      Voicemail,
      Volleyball,
      Volume,
      Volume1,
      Volume2,
      VolumeOff,
      VolumeX,
      Vote,
      Wallet,
      WalletCards,
      WalletMinimal,
      Wallpaper,
      Wand,
      WandSparkles,
      Warehouse,
      WashingMachine,
      Watch,
      Waves,
      Waypoints,
      Webcam,
      Webhook,
      WebhookOff,
      Weight,
      Wheat,
      WheatOff,
      WholeWord,
      Wifi,
      WifiHigh,
      WifiLow,
      WifiOff,
      WifiZero,
      Wind,
      WindArrowDown,
      Wine,
      WineOff,
      Workflow,
      Worm,
      WrapText,
      Wrench,
      X,
      Youtube,
      Zap,
      ZapOff,
      ZoomIn,
      ZoomOut
    });
    exports.AArrowDown = AArrowDown;
    exports.AArrowDownIcon = AArrowDown;
    exports.AArrowUp = AArrowUp;
    exports.AArrowUpIcon = AArrowUp;
    exports.ALargeSmall = ALargeSmall;
    exports.ALargeSmallIcon = ALargeSmall;
    exports.Accessibility = Accessibility;
    exports.AccessibilityIcon = Accessibility;
    exports.Activity = Activity;
    exports.ActivityIcon = Activity;
    exports.ActivitySquare = SquareActivity;
    exports.ActivitySquareIcon = SquareActivity;
    exports.AirVent = AirVent;
    exports.AirVentIcon = AirVent;
    exports.Airplay = Airplay;
    exports.AirplayIcon = Airplay;
    exports.AlarmCheck = AlarmClockCheck;
    exports.AlarmCheckIcon = AlarmClockCheck;
    exports.AlarmClock = AlarmClock;
    exports.AlarmClockCheck = AlarmClockCheck;
    exports.AlarmClockCheckIcon = AlarmClockCheck;
    exports.AlarmClockIcon = AlarmClock;
    exports.AlarmClockMinus = AlarmClockMinus;
    exports.AlarmClockMinusIcon = AlarmClockMinus;
    exports.AlarmClockOff = AlarmClockOff;
    exports.AlarmClockOffIcon = AlarmClockOff;
    exports.AlarmClockPlus = AlarmClockPlus;
    exports.AlarmClockPlusIcon = AlarmClockPlus;
    exports.AlarmMinus = AlarmClockMinus;
    exports.AlarmMinusIcon = AlarmClockMinus;
    exports.AlarmPlus = AlarmClockPlus;
    exports.AlarmPlusIcon = AlarmClockPlus;
    exports.AlarmSmoke = AlarmSmoke;
    exports.AlarmSmokeIcon = AlarmSmoke;
    exports.Album = Album;
    exports.AlbumIcon = Album;
    exports.AlertCircle = CircleAlert;
    exports.AlertCircleIcon = CircleAlert;
    exports.AlertOctagon = OctagonAlert;
    exports.AlertOctagonIcon = OctagonAlert;
    exports.AlertTriangle = TriangleAlert;
    exports.AlertTriangleIcon = TriangleAlert;
    exports.AlignCenter = AlignCenter;
    exports.AlignCenterHorizontal = AlignCenterHorizontal;
    exports.AlignCenterHorizontalIcon = AlignCenterHorizontal;
    exports.AlignCenterIcon = AlignCenter;
    exports.AlignCenterVertical = AlignCenterVertical;
    exports.AlignCenterVerticalIcon = AlignCenterVertical;
    exports.AlignEndHorizontal = AlignEndHorizontal;
    exports.AlignEndHorizontalIcon = AlignEndHorizontal;
    exports.AlignEndVertical = AlignEndVertical;
    exports.AlignEndVerticalIcon = AlignEndVertical;
    exports.AlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
    exports.AlignHorizontalDistributeCenterIcon = AlignHorizontalDistributeCenter;
    exports.AlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
    exports.AlignHorizontalDistributeEndIcon = AlignHorizontalDistributeEnd;
    exports.AlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
    exports.AlignHorizontalDistributeStartIcon = AlignHorizontalDistributeStart;
    exports.AlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
    exports.AlignHorizontalJustifyCenterIcon = AlignHorizontalJustifyCenter;
    exports.AlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
    exports.AlignHorizontalJustifyEndIcon = AlignHorizontalJustifyEnd;
    exports.AlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
    exports.AlignHorizontalJustifyStartIcon = AlignHorizontalJustifyStart;
    exports.AlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
    exports.AlignHorizontalSpaceAroundIcon = AlignHorizontalSpaceAround;
    exports.AlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
    exports.AlignHorizontalSpaceBetweenIcon = AlignHorizontalSpaceBetween;
    exports.AlignJustify = AlignJustify;
    exports.AlignJustifyIcon = AlignJustify;
    exports.AlignLeft = AlignLeft;
    exports.AlignLeftIcon = AlignLeft;
    exports.AlignRight = AlignRight;
    exports.AlignRightIcon = AlignRight;
    exports.AlignStartHorizontal = AlignStartHorizontal;
    exports.AlignStartHorizontalIcon = AlignStartHorizontal;
    exports.AlignStartVertical = AlignStartVertical;
    exports.AlignStartVerticalIcon = AlignStartVertical;
    exports.AlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
    exports.AlignVerticalDistributeCenterIcon = AlignVerticalDistributeCenter;
    exports.AlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
    exports.AlignVerticalDistributeEndIcon = AlignVerticalDistributeEnd;
    exports.AlignVerticalDistributeStart = AlignVerticalDistributeStart;
    exports.AlignVerticalDistributeStartIcon = AlignVerticalDistributeStart;
    exports.AlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
    exports.AlignVerticalJustifyCenterIcon = AlignVerticalJustifyCenter;
    exports.AlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
    exports.AlignVerticalJustifyEndIcon = AlignVerticalJustifyEnd;
    exports.AlignVerticalJustifyStart = AlignVerticalJustifyStart;
    exports.AlignVerticalJustifyStartIcon = AlignVerticalJustifyStart;
    exports.AlignVerticalSpaceAround = AlignVerticalSpaceAround;
    exports.AlignVerticalSpaceAroundIcon = AlignVerticalSpaceAround;
    exports.AlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
    exports.AlignVerticalSpaceBetweenIcon = AlignVerticalSpaceBetween;
    exports.Ambulance = Ambulance;
    exports.AmbulanceIcon = Ambulance;
    exports.Ampersand = Ampersand;
    exports.AmpersandIcon = Ampersand;
    exports.Ampersands = Ampersands;
    exports.AmpersandsIcon = Ampersands;
    exports.Amphora = Amphora;
    exports.AmphoraIcon = Amphora;
    exports.Anchor = Anchor;
    exports.AnchorIcon = Anchor;
    exports.Angry = Angry;
    exports.AngryIcon = Angry;
    exports.Annoyed = Annoyed;
    exports.AnnoyedIcon = Annoyed;
    exports.Antenna = Antenna;
    exports.AntennaIcon = Antenna;
    exports.Anvil = Anvil;
    exports.AnvilIcon = Anvil;
    exports.Aperture = Aperture;
    exports.ApertureIcon = Aperture;
    exports.AppWindow = AppWindow;
    exports.AppWindowIcon = AppWindow;
    exports.AppWindowMac = AppWindowMac;
    exports.AppWindowMacIcon = AppWindowMac;
    exports.Apple = Apple;
    exports.AppleIcon = Apple;
    exports.Archive = Archive;
    exports.ArchiveIcon = Archive;
    exports.ArchiveRestore = ArchiveRestore;
    exports.ArchiveRestoreIcon = ArchiveRestore;
    exports.ArchiveX = ArchiveX;
    exports.ArchiveXIcon = ArchiveX;
    exports.AreaChart = ChartArea;
    exports.AreaChartIcon = ChartArea;
    exports.Armchair = Armchair;
    exports.ArmchairIcon = Armchair;
    exports.ArrowBigDown = ArrowBigDown;
    exports.ArrowBigDownDash = ArrowBigDownDash;
    exports.ArrowBigDownDashIcon = ArrowBigDownDash;
    exports.ArrowBigDownIcon = ArrowBigDown;
    exports.ArrowBigLeft = ArrowBigLeft;
    exports.ArrowBigLeftDash = ArrowBigLeftDash;
    exports.ArrowBigLeftDashIcon = ArrowBigLeftDash;
    exports.ArrowBigLeftIcon = ArrowBigLeft;
    exports.ArrowBigRight = ArrowBigRight;
    exports.ArrowBigRightDash = ArrowBigRightDash;
    exports.ArrowBigRightDashIcon = ArrowBigRightDash;
    exports.ArrowBigRightIcon = ArrowBigRight;
    exports.ArrowBigUp = ArrowBigUp;
    exports.ArrowBigUpDash = ArrowBigUpDash;
    exports.ArrowBigUpDashIcon = ArrowBigUpDash;
    exports.ArrowBigUpIcon = ArrowBigUp;
    exports.ArrowDown = ArrowDown;
    exports.ArrowDown01 = ArrowDown01;
    exports.ArrowDown01Icon = ArrowDown01;
    exports.ArrowDown10 = ArrowDown10;
    exports.ArrowDown10Icon = ArrowDown10;
    exports.ArrowDownAZ = ArrowDownAZ;
    exports.ArrowDownAZIcon = ArrowDownAZ;
    exports.ArrowDownAz = ArrowDownAZ;
    exports.ArrowDownAzIcon = ArrowDownAZ;
    exports.ArrowDownCircle = CircleArrowDown;
    exports.ArrowDownCircleIcon = CircleArrowDown;
    exports.ArrowDownFromLine = ArrowDownFromLine;
    exports.ArrowDownFromLineIcon = ArrowDownFromLine;
    exports.ArrowDownIcon = ArrowDown;
    exports.ArrowDownLeft = ArrowDownLeft;
    exports.ArrowDownLeftFromCircle = CircleArrowOutDownLeft;
    exports.ArrowDownLeftFromCircleIcon = CircleArrowOutDownLeft;
    exports.ArrowDownLeftFromSquare = SquareArrowOutDownLeft;
    exports.ArrowDownLeftFromSquareIcon = SquareArrowOutDownLeft;
    exports.ArrowDownLeftIcon = ArrowDownLeft;
    exports.ArrowDownLeftSquare = SquareArrowDownLeft;
    exports.ArrowDownLeftSquareIcon = SquareArrowDownLeft;
    exports.ArrowDownNarrowWide = ArrowDownNarrowWide;
    exports.ArrowDownNarrowWideIcon = ArrowDownNarrowWide;
    exports.ArrowDownRight = ArrowDownRight;
    exports.ArrowDownRightFromCircle = CircleArrowOutDownRight;
    exports.ArrowDownRightFromCircleIcon = CircleArrowOutDownRight;
    exports.ArrowDownRightFromSquare = SquareArrowOutDownRight;
    exports.ArrowDownRightFromSquareIcon = SquareArrowOutDownRight;
    exports.ArrowDownRightIcon = ArrowDownRight;
    exports.ArrowDownRightSquare = SquareArrowDownRight;
    exports.ArrowDownRightSquareIcon = SquareArrowDownRight;
    exports.ArrowDownSquare = SquareArrowDown;
    exports.ArrowDownSquareIcon = SquareArrowDown;
    exports.ArrowDownToDot = ArrowDownToDot;
    exports.ArrowDownToDotIcon = ArrowDownToDot;
    exports.ArrowDownToLine = ArrowDownToLine;
    exports.ArrowDownToLineIcon = ArrowDownToLine;
    exports.ArrowDownUp = ArrowDownUp;
    exports.ArrowDownUpIcon = ArrowDownUp;
    exports.ArrowDownWideNarrow = ArrowDownWideNarrow;
    exports.ArrowDownWideNarrowIcon = ArrowDownWideNarrow;
    exports.ArrowDownZA = ArrowDownZA;
    exports.ArrowDownZAIcon = ArrowDownZA;
    exports.ArrowDownZa = ArrowDownZA;
    exports.ArrowDownZaIcon = ArrowDownZA;
    exports.ArrowLeft = ArrowLeft2;
    exports.ArrowLeftCircle = CircleArrowLeft;
    exports.ArrowLeftCircleIcon = CircleArrowLeft;
    exports.ArrowLeftFromLine = ArrowLeftFromLine;
    exports.ArrowLeftFromLineIcon = ArrowLeftFromLine;
    exports.ArrowLeftIcon = ArrowLeft2;
    exports.ArrowLeftRight = ArrowLeftRight;
    exports.ArrowLeftRightIcon = ArrowLeftRight;
    exports.ArrowLeftSquare = SquareArrowLeft;
    exports.ArrowLeftSquareIcon = SquareArrowLeft;
    exports.ArrowLeftToLine = ArrowLeftToLine;
    exports.ArrowLeftToLineIcon = ArrowLeftToLine;
    exports.ArrowRight = ArrowRight;
    exports.ArrowRightCircle = CircleArrowRight;
    exports.ArrowRightCircleIcon = CircleArrowRight;
    exports.ArrowRightFromLine = ArrowRightFromLine;
    exports.ArrowRightFromLineIcon = ArrowRightFromLine;
    exports.ArrowRightIcon = ArrowRight;
    exports.ArrowRightLeft = ArrowRightLeft;
    exports.ArrowRightLeftIcon = ArrowRightLeft;
    exports.ArrowRightSquare = SquareArrowRight;
    exports.ArrowRightSquareIcon = SquareArrowRight;
    exports.ArrowRightToLine = ArrowRightToLine;
    exports.ArrowRightToLineIcon = ArrowRightToLine;
    exports.ArrowUp = ArrowUp;
    exports.ArrowUp01 = ArrowUp01;
    exports.ArrowUp01Icon = ArrowUp01;
    exports.ArrowUp10 = ArrowUp10;
    exports.ArrowUp10Icon = ArrowUp10;
    exports.ArrowUpAZ = ArrowUpAZ;
    exports.ArrowUpAZIcon = ArrowUpAZ;
    exports.ArrowUpAz = ArrowUpAZ;
    exports.ArrowUpAzIcon = ArrowUpAZ;
    exports.ArrowUpCircle = CircleArrowUp;
    exports.ArrowUpCircleIcon = CircleArrowUp;
    exports.ArrowUpDown = ArrowUpDown;
    exports.ArrowUpDownIcon = ArrowUpDown;
    exports.ArrowUpFromDot = ArrowUpFromDot;
    exports.ArrowUpFromDotIcon = ArrowUpFromDot;
    exports.ArrowUpFromLine = ArrowUpFromLine;
    exports.ArrowUpFromLineIcon = ArrowUpFromLine;
    exports.ArrowUpIcon = ArrowUp;
    exports.ArrowUpLeft = ArrowUpLeft;
    exports.ArrowUpLeftFromCircle = CircleArrowOutUpLeft;
    exports.ArrowUpLeftFromCircleIcon = CircleArrowOutUpLeft;
    exports.ArrowUpLeftFromSquare = SquareArrowOutUpLeft;
    exports.ArrowUpLeftFromSquareIcon = SquareArrowOutUpLeft;
    exports.ArrowUpLeftIcon = ArrowUpLeft;
    exports.ArrowUpLeftSquare = SquareArrowUpLeft;
    exports.ArrowUpLeftSquareIcon = SquareArrowUpLeft;
    exports.ArrowUpNarrowWide = ArrowUpNarrowWide;
    exports.ArrowUpNarrowWideIcon = ArrowUpNarrowWide;
    exports.ArrowUpRight = ArrowUpRight;
    exports.ArrowUpRightFromCircle = CircleArrowOutUpRight;
    exports.ArrowUpRightFromCircleIcon = CircleArrowOutUpRight;
    exports.ArrowUpRightFromSquare = SquareArrowOutUpRight;
    exports.ArrowUpRightFromSquareIcon = SquareArrowOutUpRight;
    exports.ArrowUpRightIcon = ArrowUpRight;
    exports.ArrowUpRightSquare = SquareArrowUpRight;
    exports.ArrowUpRightSquareIcon = SquareArrowUpRight;
    exports.ArrowUpSquare = SquareArrowUp;
    exports.ArrowUpSquareIcon = SquareArrowUp;
    exports.ArrowUpToLine = ArrowUpToLine;
    exports.ArrowUpToLineIcon = ArrowUpToLine;
    exports.ArrowUpWideNarrow = ArrowUpWideNarrow;
    exports.ArrowUpWideNarrowIcon = ArrowUpWideNarrow;
    exports.ArrowUpZA = ArrowUpZA;
    exports.ArrowUpZAIcon = ArrowUpZA;
    exports.ArrowUpZa = ArrowUpZA;
    exports.ArrowUpZaIcon = ArrowUpZA;
    exports.ArrowsUpFromLine = ArrowsUpFromLine;
    exports.ArrowsUpFromLineIcon = ArrowsUpFromLine;
    exports.Asterisk = Asterisk;
    exports.AsteriskIcon = Asterisk;
    exports.AsteriskSquare = SquareAsterisk;
    exports.AsteriskSquareIcon = SquareAsterisk;
    exports.AtSign = AtSign;
    exports.AtSignIcon = AtSign;
    exports.Atom = Atom;
    exports.AtomIcon = Atom;
    exports.AudioLines = AudioLines;
    exports.AudioLinesIcon = AudioLines;
    exports.AudioWaveform = AudioWaveform;
    exports.AudioWaveformIcon = AudioWaveform;
    exports.Award = Award;
    exports.AwardIcon = Award;
    exports.Axe = Axe;
    exports.AxeIcon = Axe;
    exports.Axis3D = Axis3d;
    exports.Axis3DIcon = Axis3d;
    exports.Axis3d = Axis3d;
    exports.Axis3dIcon = Axis3d;
    exports.Baby = Baby;
    exports.BabyIcon = Baby;
    exports.Backpack = Backpack;
    exports.BackpackIcon = Backpack;
    exports.Badge = Badge;
    exports.BadgeAlert = BadgeAlert;
    exports.BadgeAlertIcon = BadgeAlert;
    exports.BadgeCent = BadgeCent;
    exports.BadgeCentIcon = BadgeCent;
    exports.BadgeCheck = BadgeCheck;
    exports.BadgeCheckIcon = BadgeCheck;
    exports.BadgeDollarSign = BadgeDollarSign;
    exports.BadgeDollarSignIcon = BadgeDollarSign;
    exports.BadgeEuro = BadgeEuro;
    exports.BadgeEuroIcon = BadgeEuro;
    exports.BadgeHelp = BadgeHelp;
    exports.BadgeHelpIcon = BadgeHelp;
    exports.BadgeIcon = Badge;
    exports.BadgeIndianRupee = BadgeIndianRupee;
    exports.BadgeIndianRupeeIcon = BadgeIndianRupee;
    exports.BadgeInfo = BadgeInfo;
    exports.BadgeInfoIcon = BadgeInfo;
    exports.BadgeJapaneseYen = BadgeJapaneseYen;
    exports.BadgeJapaneseYenIcon = BadgeJapaneseYen;
    exports.BadgeMinus = BadgeMinus;
    exports.BadgeMinusIcon = BadgeMinus;
    exports.BadgePercent = BadgePercent;
    exports.BadgePercentIcon = BadgePercent;
    exports.BadgePlus = BadgePlus;
    exports.BadgePlusIcon = BadgePlus;
    exports.BadgePoundSterling = BadgePoundSterling;
    exports.BadgePoundSterlingIcon = BadgePoundSterling;
    exports.BadgeRussianRuble = BadgeRussianRuble;
    exports.BadgeRussianRubleIcon = BadgeRussianRuble;
    exports.BadgeSwissFranc = BadgeSwissFranc;
    exports.BadgeSwissFrancIcon = BadgeSwissFranc;
    exports.BadgeX = BadgeX;
    exports.BadgeXIcon = BadgeX;
    exports.BaggageClaim = BaggageClaim;
    exports.BaggageClaimIcon = BaggageClaim;
    exports.Ban = Ban;
    exports.BanIcon = Ban;
    exports.Banana = Banana;
    exports.BananaIcon = Banana;
    exports.Bandage = Bandage;
    exports.BandageIcon = Bandage;
    exports.Banknote = Banknote;
    exports.BanknoteIcon = Banknote;
    exports.BarChart = ChartNoAxesColumnIncreasing;
    exports.BarChart2 = ChartNoAxesColumn;
    exports.BarChart2Icon = ChartNoAxesColumn;
    exports.BarChart3 = ChartColumn;
    exports.BarChart3Icon = ChartColumn;
    exports.BarChart4 = ChartColumnIncreasing;
    exports.BarChart4Icon = ChartColumnIncreasing;
    exports.BarChartBig = ChartColumnBig;
    exports.BarChartBigIcon = ChartColumnBig;
    exports.BarChartHorizontal = ChartBar;
    exports.BarChartHorizontalBig = ChartBarBig;
    exports.BarChartHorizontalBigIcon = ChartBarBig;
    exports.BarChartHorizontalIcon = ChartBar;
    exports.BarChartIcon = ChartNoAxesColumnIncreasing;
    exports.Barcode = Barcode;
    exports.BarcodeIcon = Barcode;
    exports.Baseline = Baseline;
    exports.BaselineIcon = Baseline;
    exports.Bath = Bath;
    exports.BathIcon = Bath;
    exports.Battery = Battery;
    exports.BatteryCharging = BatteryCharging;
    exports.BatteryChargingIcon = BatteryCharging;
    exports.BatteryFull = BatteryFull;
    exports.BatteryFullIcon = BatteryFull;
    exports.BatteryIcon = Battery;
    exports.BatteryLow = BatteryLow;
    exports.BatteryLowIcon = BatteryLow;
    exports.BatteryMedium = BatteryMedium;
    exports.BatteryMediumIcon = BatteryMedium;
    exports.BatteryWarning = BatteryWarning;
    exports.BatteryWarningIcon = BatteryWarning;
    exports.Beaker = Beaker;
    exports.BeakerIcon = Beaker;
    exports.Bean = Bean;
    exports.BeanIcon = Bean;
    exports.BeanOff = BeanOff;
    exports.BeanOffIcon = BeanOff;
    exports.Bed = Bed;
    exports.BedDouble = BedDouble;
    exports.BedDoubleIcon = BedDouble;
    exports.BedIcon = Bed;
    exports.BedSingle = BedSingle;
    exports.BedSingleIcon = BedSingle;
    exports.Beef = Beef;
    exports.BeefIcon = Beef;
    exports.Beer = Beer;
    exports.BeerIcon = Beer;
    exports.BeerOff = BeerOff;
    exports.BeerOffIcon = BeerOff;
    exports.Bell = Bell;
    exports.BellDot = BellDot;
    exports.BellDotIcon = BellDot;
    exports.BellElectric = BellElectric;
    exports.BellElectricIcon = BellElectric;
    exports.BellIcon = Bell;
    exports.BellMinus = BellMinus;
    exports.BellMinusIcon = BellMinus;
    exports.BellOff = BellOff;
    exports.BellOffIcon = BellOff;
    exports.BellPlus = BellPlus;
    exports.BellPlusIcon = BellPlus;
    exports.BellRing = BellRing;
    exports.BellRingIcon = BellRing;
    exports.BetweenHorizonalEnd = BetweenHorizontalEnd;
    exports.BetweenHorizonalEndIcon = BetweenHorizontalEnd;
    exports.BetweenHorizonalStart = BetweenHorizontalStart;
    exports.BetweenHorizonalStartIcon = BetweenHorizontalStart;
    exports.BetweenHorizontalEnd = BetweenHorizontalEnd;
    exports.BetweenHorizontalEndIcon = BetweenHorizontalEnd;
    exports.BetweenHorizontalStart = BetweenHorizontalStart;
    exports.BetweenHorizontalStartIcon = BetweenHorizontalStart;
    exports.BetweenVerticalEnd = BetweenVerticalEnd;
    exports.BetweenVerticalEndIcon = BetweenVerticalEnd;
    exports.BetweenVerticalStart = BetweenVerticalStart;
    exports.BetweenVerticalStartIcon = BetweenVerticalStart;
    exports.BicepsFlexed = BicepsFlexed;
    exports.BicepsFlexedIcon = BicepsFlexed;
    exports.Bike = Bike;
    exports.BikeIcon = Bike;
    exports.Binary = Binary;
    exports.BinaryIcon = Binary;
    exports.Binoculars = Binoculars;
    exports.BinocularsIcon = Binoculars;
    exports.Biohazard = Biohazard;
    exports.BiohazardIcon = Biohazard;
    exports.Bird = Bird;
    exports.BirdIcon = Bird;
    exports.Bitcoin = Bitcoin;
    exports.BitcoinIcon = Bitcoin;
    exports.Blend = Blend;
    exports.BlendIcon = Blend;
    exports.Blinds = Blinds;
    exports.BlindsIcon = Blinds;
    exports.Blocks = Blocks;
    exports.BlocksIcon = Blocks;
    exports.Bluetooth = Bluetooth;
    exports.BluetoothConnected = BluetoothConnected;
    exports.BluetoothConnectedIcon = BluetoothConnected;
    exports.BluetoothIcon = Bluetooth;
    exports.BluetoothOff = BluetoothOff;
    exports.BluetoothOffIcon = BluetoothOff;
    exports.BluetoothSearching = BluetoothSearching;
    exports.BluetoothSearchingIcon = BluetoothSearching;
    exports.Bold = Bold;
    exports.BoldIcon = Bold;
    exports.Bolt = Bolt;
    exports.BoltIcon = Bolt;
    exports.Bomb = Bomb;
    exports.BombIcon = Bomb;
    exports.Bone = Bone;
    exports.BoneIcon = Bone;
    exports.Book = Book;
    exports.BookA = BookA;
    exports.BookAIcon = BookA;
    exports.BookAudio = BookAudio;
    exports.BookAudioIcon = BookAudio;
    exports.BookCheck = BookCheck;
    exports.BookCheckIcon = BookCheck;
    exports.BookCopy = BookCopy;
    exports.BookCopyIcon = BookCopy;
    exports.BookDashed = BookDashed;
    exports.BookDashedIcon = BookDashed;
    exports.BookDown = BookDown;
    exports.BookDownIcon = BookDown;
    exports.BookHeadphones = BookHeadphones;
    exports.BookHeadphonesIcon = BookHeadphones;
    exports.BookHeart = BookHeart;
    exports.BookHeartIcon = BookHeart;
    exports.BookIcon = Book;
    exports.BookImage = BookImage;
    exports.BookImageIcon = BookImage;
    exports.BookKey = BookKey;
    exports.BookKeyIcon = BookKey;
    exports.BookLock = BookLock;
    exports.BookLockIcon = BookLock;
    exports.BookMarked = BookMarked;
    exports.BookMarkedIcon = BookMarked;
    exports.BookMinus = BookMinus;
    exports.BookMinusIcon = BookMinus;
    exports.BookOpen = BookOpen;
    exports.BookOpenCheck = BookOpenCheck;
    exports.BookOpenCheckIcon = BookOpenCheck;
    exports.BookOpenIcon = BookOpen;
    exports.BookOpenText = BookOpenText;
    exports.BookOpenTextIcon = BookOpenText;
    exports.BookPlus = BookPlus;
    exports.BookPlusIcon = BookPlus;
    exports.BookTemplate = BookDashed;
    exports.BookTemplateIcon = BookDashed;
    exports.BookText = BookText;
    exports.BookTextIcon = BookText;
    exports.BookType = BookType;
    exports.BookTypeIcon = BookType;
    exports.BookUp = BookUp;
    exports.BookUp2 = BookUp2;
    exports.BookUp2Icon = BookUp2;
    exports.BookUpIcon = BookUp;
    exports.BookUser = BookUser;
    exports.BookUserIcon = BookUser;
    exports.BookX = BookX;
    exports.BookXIcon = BookX;
    exports.Bookmark = Bookmark;
    exports.BookmarkCheck = BookmarkCheck;
    exports.BookmarkCheckIcon = BookmarkCheck;
    exports.BookmarkIcon = Bookmark;
    exports.BookmarkMinus = BookmarkMinus;
    exports.BookmarkMinusIcon = BookmarkMinus;
    exports.BookmarkPlus = BookmarkPlus;
    exports.BookmarkPlusIcon = BookmarkPlus;
    exports.BookmarkX = BookmarkX;
    exports.BookmarkXIcon = BookmarkX;
    exports.BoomBox = BoomBox;
    exports.BoomBoxIcon = BoomBox;
    exports.Bot = Bot;
    exports.BotIcon = Bot;
    exports.BotMessageSquare = BotMessageSquare;
    exports.BotMessageSquareIcon = BotMessageSquare;
    exports.BotOff = BotOff;
    exports.BotOffIcon = BotOff;
    exports.Box = Box;
    exports.BoxIcon = Box;
    exports.BoxSelect = SquareDashed;
    exports.BoxSelectIcon = SquareDashed;
    exports.Boxes = Boxes;
    exports.BoxesIcon = Boxes;
    exports.Braces = Braces;
    exports.BracesIcon = Braces;
    exports.Brackets = Brackets;
    exports.BracketsIcon = Brackets;
    exports.Brain = Brain;
    exports.BrainCircuit = BrainCircuit;
    exports.BrainCircuitIcon = BrainCircuit;
    exports.BrainCog = BrainCog;
    exports.BrainCogIcon = BrainCog;
    exports.BrainIcon = Brain;
    exports.BrickWall = BrickWall;
    exports.BrickWallIcon = BrickWall;
    exports.Briefcase = Briefcase;
    exports.BriefcaseBusiness = BriefcaseBusiness;
    exports.BriefcaseBusinessIcon = BriefcaseBusiness;
    exports.BriefcaseConveyorBelt = BriefcaseConveyorBelt;
    exports.BriefcaseConveyorBeltIcon = BriefcaseConveyorBelt;
    exports.BriefcaseIcon = Briefcase;
    exports.BriefcaseMedical = BriefcaseMedical;
    exports.BriefcaseMedicalIcon = BriefcaseMedical;
    exports.BringToFront = BringToFront;
    exports.BringToFrontIcon = BringToFront;
    exports.Brush = Brush;
    exports.BrushIcon = Brush;
    exports.Bug = Bug;
    exports.BugIcon = Bug;
    exports.BugOff = BugOff;
    exports.BugOffIcon = BugOff;
    exports.BugPlay = BugPlay;
    exports.BugPlayIcon = BugPlay;
    exports.Building = Building;
    exports.Building2 = Building2;
    exports.Building2Icon = Building2;
    exports.BuildingIcon = Building;
    exports.Bus = Bus;
    exports.BusFront = BusFront;
    exports.BusFrontIcon = BusFront;
    exports.BusIcon = Bus;
    exports.Cable = Cable;
    exports.CableCar = CableCar;
    exports.CableCarIcon = CableCar;
    exports.CableIcon = Cable;
    exports.Cake = Cake;
    exports.CakeIcon = Cake;
    exports.CakeSlice = CakeSlice;
    exports.CakeSliceIcon = CakeSlice;
    exports.Calculator = Calculator;
    exports.CalculatorIcon = Calculator;
    exports.Calendar = Calendar2;
    exports.Calendar1 = Calendar1;
    exports.Calendar1Icon = Calendar1;
    exports.CalendarArrowDown = CalendarArrowDown;
    exports.CalendarArrowDownIcon = CalendarArrowDown;
    exports.CalendarArrowUp = CalendarArrowUp;
    exports.CalendarArrowUpIcon = CalendarArrowUp;
    exports.CalendarCheck = CalendarCheck;
    exports.CalendarCheck2 = CalendarCheck2;
    exports.CalendarCheck2Icon = CalendarCheck2;
    exports.CalendarCheckIcon = CalendarCheck;
    exports.CalendarClock = CalendarClock;
    exports.CalendarClockIcon = CalendarClock;
    exports.CalendarCog = CalendarCog;
    exports.CalendarCogIcon = CalendarCog;
    exports.CalendarDays = CalendarDays;
    exports.CalendarDaysIcon = CalendarDays;
    exports.CalendarFold = CalendarFold;
    exports.CalendarFoldIcon = CalendarFold;
    exports.CalendarHeart = CalendarHeart;
    exports.CalendarHeartIcon = CalendarHeart;
    exports.CalendarIcon = Calendar2;
    exports.CalendarMinus = CalendarMinus;
    exports.CalendarMinus2 = CalendarMinus2;
    exports.CalendarMinus2Icon = CalendarMinus2;
    exports.CalendarMinusIcon = CalendarMinus;
    exports.CalendarOff = CalendarOff;
    exports.CalendarOffIcon = CalendarOff;
    exports.CalendarPlus = CalendarPlus;
    exports.CalendarPlus2 = CalendarPlus2;
    exports.CalendarPlus2Icon = CalendarPlus2;
    exports.CalendarPlusIcon = CalendarPlus;
    exports.CalendarRange = CalendarRange;
    exports.CalendarRangeIcon = CalendarRange;
    exports.CalendarSearch = CalendarSearch;
    exports.CalendarSearchIcon = CalendarSearch;
    exports.CalendarSync = CalendarSync;
    exports.CalendarSyncIcon = CalendarSync;
    exports.CalendarX = CalendarX;
    exports.CalendarX2 = CalendarX2;
    exports.CalendarX2Icon = CalendarX2;
    exports.CalendarXIcon = CalendarX;
    exports.Camera = Camera;
    exports.CameraIcon = Camera;
    exports.CameraOff = CameraOff;
    exports.CameraOffIcon = CameraOff;
    exports.CandlestickChart = ChartCandlestick;
    exports.CandlestickChartIcon = ChartCandlestick;
    exports.Candy = Candy;
    exports.CandyCane = CandyCane;
    exports.CandyCaneIcon = CandyCane;
    exports.CandyIcon = Candy;
    exports.CandyOff = CandyOff;
    exports.CandyOffIcon = CandyOff;
    exports.Cannabis = Cannabis;
    exports.CannabisIcon = Cannabis;
    exports.Captions = Captions;
    exports.CaptionsIcon = Captions;
    exports.CaptionsOff = CaptionsOff;
    exports.CaptionsOffIcon = CaptionsOff;
    exports.Car = Car;
    exports.CarFront = CarFront;
    exports.CarFrontIcon = CarFront;
    exports.CarIcon = Car;
    exports.CarTaxiFront = CarTaxiFront;
    exports.CarTaxiFrontIcon = CarTaxiFront;
    exports.Caravan = Caravan;
    exports.CaravanIcon = Caravan;
    exports.Carrot = Carrot;
    exports.CarrotIcon = Carrot;
    exports.CaseLower = CaseLower;
    exports.CaseLowerIcon = CaseLower;
    exports.CaseSensitive = CaseSensitive;
    exports.CaseSensitiveIcon = CaseSensitive;
    exports.CaseUpper = CaseUpper;
    exports.CaseUpperIcon = CaseUpper;
    exports.CassetteTape = CassetteTape;
    exports.CassetteTapeIcon = CassetteTape;
    exports.Cast = Cast;
    exports.CastIcon = Cast;
    exports.Castle = Castle;
    exports.CastleIcon = Castle;
    exports.Cat = Cat;
    exports.CatIcon = Cat;
    exports.Cctv = Cctv;
    exports.CctvIcon = Cctv;
    exports.ChartArea = ChartArea;
    exports.ChartAreaIcon = ChartArea;
    exports.ChartBar = ChartBar;
    exports.ChartBarBig = ChartBarBig;
    exports.ChartBarBigIcon = ChartBarBig;
    exports.ChartBarDecreasing = ChartBarDecreasing;
    exports.ChartBarDecreasingIcon = ChartBarDecreasing;
    exports.ChartBarIcon = ChartBar;
    exports.ChartBarIncreasing = ChartBarIncreasing;
    exports.ChartBarIncreasingIcon = ChartBarIncreasing;
    exports.ChartBarStacked = ChartBarStacked;
    exports.ChartBarStackedIcon = ChartBarStacked;
    exports.ChartCandlestick = ChartCandlestick;
    exports.ChartCandlestickIcon = ChartCandlestick;
    exports.ChartColumn = ChartColumn;
    exports.ChartColumnBig = ChartColumnBig;
    exports.ChartColumnBigIcon = ChartColumnBig;
    exports.ChartColumnDecreasing = ChartColumnDecreasing;
    exports.ChartColumnDecreasingIcon = ChartColumnDecreasing;
    exports.ChartColumnIcon = ChartColumn;
    exports.ChartColumnIncreasing = ChartColumnIncreasing;
    exports.ChartColumnIncreasingIcon = ChartColumnIncreasing;
    exports.ChartColumnStacked = ChartColumnStacked;
    exports.ChartColumnStackedIcon = ChartColumnStacked;
    exports.ChartGantt = ChartGantt;
    exports.ChartGanttIcon = ChartGantt;
    exports.ChartLine = ChartLine;
    exports.ChartLineIcon = ChartLine;
    exports.ChartNetwork = ChartNetwork;
    exports.ChartNetworkIcon = ChartNetwork;
    exports.ChartNoAxesColumn = ChartNoAxesColumn;
    exports.ChartNoAxesColumnDecreasing = ChartNoAxesColumnDecreasing;
    exports.ChartNoAxesColumnDecreasingIcon = ChartNoAxesColumnDecreasing;
    exports.ChartNoAxesColumnIcon = ChartNoAxesColumn;
    exports.ChartNoAxesColumnIncreasing = ChartNoAxesColumnIncreasing;
    exports.ChartNoAxesColumnIncreasingIcon = ChartNoAxesColumnIncreasing;
    exports.ChartNoAxesCombined = ChartNoAxesCombined;
    exports.ChartNoAxesCombinedIcon = ChartNoAxesCombined;
    exports.ChartNoAxesGantt = ChartNoAxesGantt;
    exports.ChartNoAxesGanttIcon = ChartNoAxesGantt;
    exports.ChartPie = ChartPie;
    exports.ChartPieIcon = ChartPie;
    exports.ChartScatter = ChartScatter;
    exports.ChartScatterIcon = ChartScatter;
    exports.ChartSpline = ChartSpline;
    exports.ChartSplineIcon = ChartSpline;
    exports.Check = Check;
    exports.CheckCheck = CheckCheck;
    exports.CheckCheckIcon = CheckCheck;
    exports.CheckCircle = CircleCheckBig;
    exports.CheckCircle2 = CircleCheck;
    exports.CheckCircle2Icon = CircleCheck;
    exports.CheckCircleIcon = CircleCheckBig;
    exports.CheckIcon = Check;
    exports.CheckSquare = SquareCheckBig;
    exports.CheckSquare2 = SquareCheck;
    exports.CheckSquare2Icon = SquareCheck;
    exports.CheckSquareIcon = SquareCheckBig;
    exports.ChefHat = ChefHat;
    exports.ChefHatIcon = ChefHat;
    exports.Cherry = Cherry;
    exports.CherryIcon = Cherry;
    exports.ChevronDown = ChevronDown;
    exports.ChevronDownCircle = CircleChevronDown;
    exports.ChevronDownCircleIcon = CircleChevronDown;
    exports.ChevronDownIcon = ChevronDown;
    exports.ChevronDownSquare = SquareChevronDown;
    exports.ChevronDownSquareIcon = SquareChevronDown;
    exports.ChevronFirst = ChevronFirst;
    exports.ChevronFirstIcon = ChevronFirst;
    exports.ChevronLast = ChevronLast;
    exports.ChevronLastIcon = ChevronLast;
    exports.ChevronLeft = ChevronLeft;
    exports.ChevronLeftCircle = CircleChevronLeft;
    exports.ChevronLeftCircleIcon = CircleChevronLeft;
    exports.ChevronLeftIcon = ChevronLeft;
    exports.ChevronLeftSquare = SquareChevronLeft;
    exports.ChevronLeftSquareIcon = SquareChevronLeft;
    exports.ChevronRight = ChevronRight;
    exports.ChevronRightCircle = CircleChevronRight;
    exports.ChevronRightCircleIcon = CircleChevronRight;
    exports.ChevronRightIcon = ChevronRight;
    exports.ChevronRightSquare = SquareChevronRight;
    exports.ChevronRightSquareIcon = SquareChevronRight;
    exports.ChevronUp = ChevronUp;
    exports.ChevronUpCircle = CircleChevronUp;
    exports.ChevronUpCircleIcon = CircleChevronUp;
    exports.ChevronUpIcon = ChevronUp;
    exports.ChevronUpSquare = SquareChevronUp;
    exports.ChevronUpSquareIcon = SquareChevronUp;
    exports.ChevronsDown = ChevronsDown;
    exports.ChevronsDownIcon = ChevronsDown;
    exports.ChevronsDownUp = ChevronsDownUp;
    exports.ChevronsDownUpIcon = ChevronsDownUp;
    exports.ChevronsLeft = ChevronsLeft;
    exports.ChevronsLeftIcon = ChevronsLeft;
    exports.ChevronsLeftRight = ChevronsLeftRight;
    exports.ChevronsLeftRightEllipsis = ChevronsLeftRightEllipsis;
    exports.ChevronsLeftRightEllipsisIcon = ChevronsLeftRightEllipsis;
    exports.ChevronsLeftRightIcon = ChevronsLeftRight;
    exports.ChevronsRight = ChevronsRight;
    exports.ChevronsRightIcon = ChevronsRight;
    exports.ChevronsRightLeft = ChevronsRightLeft;
    exports.ChevronsRightLeftIcon = ChevronsRightLeft;
    exports.ChevronsUp = ChevronsUp;
    exports.ChevronsUpDown = ChevronsUpDown;
    exports.ChevronsUpDownIcon = ChevronsUpDown;
    exports.ChevronsUpIcon = ChevronsUp;
    exports.Chrome = Chrome;
    exports.ChromeIcon = Chrome;
    exports.Church = Church;
    exports.ChurchIcon = Church;
    exports.Cigarette = Cigarette;
    exports.CigaretteIcon = Cigarette;
    exports.CigaretteOff = CigaretteOff;
    exports.CigaretteOffIcon = CigaretteOff;
    exports.Circle = Circle;
    exports.CircleAlert = CircleAlert;
    exports.CircleAlertIcon = CircleAlert;
    exports.CircleArrowDown = CircleArrowDown;
    exports.CircleArrowDownIcon = CircleArrowDown;
    exports.CircleArrowLeft = CircleArrowLeft;
    exports.CircleArrowLeftIcon = CircleArrowLeft;
    exports.CircleArrowOutDownLeft = CircleArrowOutDownLeft;
    exports.CircleArrowOutDownLeftIcon = CircleArrowOutDownLeft;
    exports.CircleArrowOutDownRight = CircleArrowOutDownRight;
    exports.CircleArrowOutDownRightIcon = CircleArrowOutDownRight;
    exports.CircleArrowOutUpLeft = CircleArrowOutUpLeft;
    exports.CircleArrowOutUpLeftIcon = CircleArrowOutUpLeft;
    exports.CircleArrowOutUpRight = CircleArrowOutUpRight;
    exports.CircleArrowOutUpRightIcon = CircleArrowOutUpRight;
    exports.CircleArrowRight = CircleArrowRight;
    exports.CircleArrowRightIcon = CircleArrowRight;
    exports.CircleArrowUp = CircleArrowUp;
    exports.CircleArrowUpIcon = CircleArrowUp;
    exports.CircleCheck = CircleCheck;
    exports.CircleCheckBig = CircleCheckBig;
    exports.CircleCheckBigIcon = CircleCheckBig;
    exports.CircleCheckIcon = CircleCheck;
    exports.CircleChevronDown = CircleChevronDown;
    exports.CircleChevronDownIcon = CircleChevronDown;
    exports.CircleChevronLeft = CircleChevronLeft;
    exports.CircleChevronLeftIcon = CircleChevronLeft;
    exports.CircleChevronRight = CircleChevronRight;
    exports.CircleChevronRightIcon = CircleChevronRight;
    exports.CircleChevronUp = CircleChevronUp;
    exports.CircleChevronUpIcon = CircleChevronUp;
    exports.CircleDashed = CircleDashed;
    exports.CircleDashedIcon = CircleDashed;
    exports.CircleDivide = CircleDivide;
    exports.CircleDivideIcon = CircleDivide;
    exports.CircleDollarSign = CircleDollarSign;
    exports.CircleDollarSignIcon = CircleDollarSign;
    exports.CircleDot = CircleDot;
    exports.CircleDotDashed = CircleDotDashed;
    exports.CircleDotDashedIcon = CircleDotDashed;
    exports.CircleDotIcon = CircleDot;
    exports.CircleEllipsis = CircleEllipsis;
    exports.CircleEllipsisIcon = CircleEllipsis;
    exports.CircleEqual = CircleEqual;
    exports.CircleEqualIcon = CircleEqual;
    exports.CircleFadingArrowUp = CircleFadingArrowUp;
    exports.CircleFadingArrowUpIcon = CircleFadingArrowUp;
    exports.CircleFadingPlus = CircleFadingPlus;
    exports.CircleFadingPlusIcon = CircleFadingPlus;
    exports.CircleGauge = CircleGauge;
    exports.CircleGaugeIcon = CircleGauge;
    exports.CircleHelp = CircleHelp;
    exports.CircleHelpIcon = CircleHelp;
    exports.CircleIcon = Circle;
    exports.CircleMinus = CircleMinus;
    exports.CircleMinusIcon = CircleMinus;
    exports.CircleOff = CircleOff;
    exports.CircleOffIcon = CircleOff;
    exports.CircleParking = CircleParking;
    exports.CircleParkingIcon = CircleParking;
    exports.CircleParkingOff = CircleParkingOff;
    exports.CircleParkingOffIcon = CircleParkingOff;
    exports.CirclePause = CirclePause;
    exports.CirclePauseIcon = CirclePause;
    exports.CirclePercent = CirclePercent;
    exports.CirclePercentIcon = CirclePercent;
    exports.CirclePlay = CirclePlay;
    exports.CirclePlayIcon = CirclePlay;
    exports.CirclePlus = CirclePlus;
    exports.CirclePlusIcon = CirclePlus;
    exports.CirclePower = CirclePower;
    exports.CirclePowerIcon = CirclePower;
    exports.CircleSlash = CircleSlash;
    exports.CircleSlash2 = CircleSlash2;
    exports.CircleSlash2Icon = CircleSlash2;
    exports.CircleSlashIcon = CircleSlash;
    exports.CircleSlashed = CircleSlash2;
    exports.CircleSlashedIcon = CircleSlash2;
    exports.CircleStop = CircleStop;
    exports.CircleStopIcon = CircleStop;
    exports.CircleUser = CircleUser;
    exports.CircleUserIcon = CircleUser;
    exports.CircleUserRound = CircleUserRound;
    exports.CircleUserRoundIcon = CircleUserRound;
    exports.CircleX = CircleX;
    exports.CircleXIcon = CircleX;
    exports.CircuitBoard = CircuitBoard;
    exports.CircuitBoardIcon = CircuitBoard;
    exports.Citrus = Citrus;
    exports.CitrusIcon = Citrus;
    exports.Clapperboard = Clapperboard;
    exports.ClapperboardIcon = Clapperboard;
    exports.Clipboard = Clipboard;
    exports.ClipboardCheck = ClipboardCheck;
    exports.ClipboardCheckIcon = ClipboardCheck;
    exports.ClipboardCopy = ClipboardCopy;
    exports.ClipboardCopyIcon = ClipboardCopy;
    exports.ClipboardEdit = ClipboardPen;
    exports.ClipboardEditIcon = ClipboardPen;
    exports.ClipboardIcon = Clipboard;
    exports.ClipboardList = ClipboardList;
    exports.ClipboardListIcon = ClipboardList;
    exports.ClipboardMinus = ClipboardMinus;
    exports.ClipboardMinusIcon = ClipboardMinus;
    exports.ClipboardPaste = ClipboardPaste;
    exports.ClipboardPasteIcon = ClipboardPaste;
    exports.ClipboardPen = ClipboardPen;
    exports.ClipboardPenIcon = ClipboardPen;
    exports.ClipboardPenLine = ClipboardPenLine;
    exports.ClipboardPenLineIcon = ClipboardPenLine;
    exports.ClipboardPlus = ClipboardPlus;
    exports.ClipboardPlusIcon = ClipboardPlus;
    exports.ClipboardSignature = ClipboardPenLine;
    exports.ClipboardSignatureIcon = ClipboardPenLine;
    exports.ClipboardType = ClipboardType;
    exports.ClipboardTypeIcon = ClipboardType;
    exports.ClipboardX = ClipboardX;
    exports.ClipboardXIcon = ClipboardX;
    exports.Clock = Clock13;
    exports.Clock1 = Clock1;
    exports.Clock10 = Clock10;
    exports.Clock10Icon = Clock10;
    exports.Clock11 = Clock11;
    exports.Clock11Icon = Clock11;
    exports.Clock12 = Clock12;
    exports.Clock12Icon = Clock12;
    exports.Clock1Icon = Clock1;
    exports.Clock2 = Clock2;
    exports.Clock2Icon = Clock2;
    exports.Clock3 = Clock3;
    exports.Clock3Icon = Clock3;
    exports.Clock4 = Clock4;
    exports.Clock4Icon = Clock4;
    exports.Clock5 = Clock5;
    exports.Clock5Icon = Clock5;
    exports.Clock6 = Clock6;
    exports.Clock6Icon = Clock6;
    exports.Clock7 = Clock7;
    exports.Clock7Icon = Clock7;
    exports.Clock8 = Clock8;
    exports.Clock8Icon = Clock8;
    exports.Clock9 = Clock9;
    exports.Clock9Icon = Clock9;
    exports.ClockAlert = ClockAlert;
    exports.ClockAlertIcon = ClockAlert;
    exports.ClockArrowDown = ClockArrowDown;
    exports.ClockArrowDownIcon = ClockArrowDown;
    exports.ClockArrowUp = ClockArrowUp;
    exports.ClockArrowUpIcon = ClockArrowUp;
    exports.ClockIcon = Clock13;
    exports.Cloud = Cloud;
    exports.CloudAlert = CloudAlert;
    exports.CloudAlertIcon = CloudAlert;
    exports.CloudCog = CloudCog;
    exports.CloudCogIcon = CloudCog;
    exports.CloudDownload = CloudDownload;
    exports.CloudDownloadIcon = CloudDownload;
    exports.CloudDrizzle = CloudDrizzle;
    exports.CloudDrizzleIcon = CloudDrizzle;
    exports.CloudFog = CloudFog;
    exports.CloudFogIcon = CloudFog;
    exports.CloudHail = CloudHail;
    exports.CloudHailIcon = CloudHail;
    exports.CloudIcon = Cloud;
    exports.CloudLightning = CloudLightning;
    exports.CloudLightningIcon = CloudLightning;
    exports.CloudMoon = CloudMoon;
    exports.CloudMoonIcon = CloudMoon;
    exports.CloudMoonRain = CloudMoonRain;
    exports.CloudMoonRainIcon = CloudMoonRain;
    exports.CloudOff = CloudOff;
    exports.CloudOffIcon = CloudOff;
    exports.CloudRain = CloudRain;
    exports.CloudRainIcon = CloudRain;
    exports.CloudRainWind = CloudRainWind;
    exports.CloudRainWindIcon = CloudRainWind;
    exports.CloudSnow = CloudSnow;
    exports.CloudSnowIcon = CloudSnow;
    exports.CloudSun = CloudSun;
    exports.CloudSunIcon = CloudSun;
    exports.CloudSunRain = CloudSunRain;
    exports.CloudSunRainIcon = CloudSunRain;
    exports.CloudUpload = CloudUpload;
    exports.CloudUploadIcon = CloudUpload;
    exports.Cloudy = Cloudy;
    exports.CloudyIcon = Cloudy;
    exports.Clover = Clover;
    exports.CloverIcon = Clover;
    exports.Club = Club;
    exports.ClubIcon = Club;
    exports.Code = Code;
    exports.Code2 = CodeXml;
    exports.Code2Icon = CodeXml;
    exports.CodeIcon = Code;
    exports.CodeSquare = SquareCode;
    exports.CodeSquareIcon = SquareCode;
    exports.CodeXml = CodeXml;
    exports.CodeXmlIcon = CodeXml;
    exports.Codepen = Codepen;
    exports.CodepenIcon = Codepen;
    exports.Codesandbox = Codesandbox;
    exports.CodesandboxIcon = Codesandbox;
    exports.Coffee = Coffee;
    exports.CoffeeIcon = Coffee;
    exports.Cog = Cog;
    exports.CogIcon = Cog;
    exports.Coins = Coins;
    exports.CoinsIcon = Coins;
    exports.Columns = Columns2;
    exports.Columns2 = Columns2;
    exports.Columns2Icon = Columns2;
    exports.Columns3 = Columns3;
    exports.Columns3Icon = Columns3;
    exports.Columns4 = Columns4;
    exports.Columns4Icon = Columns4;
    exports.ColumnsIcon = Columns2;
    exports.Combine = Combine;
    exports.CombineIcon = Combine;
    exports.Command = Command;
    exports.CommandIcon = Command;
    exports.Compass = Compass;
    exports.CompassIcon = Compass;
    exports.Component = Component;
    exports.ComponentIcon = Component;
    exports.Computer = Computer;
    exports.ComputerIcon = Computer;
    exports.ConciergeBell = ConciergeBell;
    exports.ConciergeBellIcon = ConciergeBell;
    exports.Cone = Cone;
    exports.ConeIcon = Cone;
    exports.Construction = Construction;
    exports.ConstructionIcon = Construction;
    exports.Contact = Contact;
    exports.Contact2 = ContactRound;
    exports.Contact2Icon = ContactRound;
    exports.ContactIcon = Contact;
    exports.ContactRound = ContactRound;
    exports.ContactRoundIcon = ContactRound;
    exports.Container = Container;
    exports.ContainerIcon = Container;
    exports.Contrast = Contrast;
    exports.ContrastIcon = Contrast;
    exports.Cookie = Cookie;
    exports.CookieIcon = Cookie;
    exports.CookingPot = CookingPot;
    exports.CookingPotIcon = CookingPot;
    exports.Copy = Copy;
    exports.CopyCheck = CopyCheck;
    exports.CopyCheckIcon = CopyCheck;
    exports.CopyIcon = Copy;
    exports.CopyMinus = CopyMinus;
    exports.CopyMinusIcon = CopyMinus;
    exports.CopyPlus = CopyPlus;
    exports.CopyPlusIcon = CopyPlus;
    exports.CopySlash = CopySlash;
    exports.CopySlashIcon = CopySlash;
    exports.CopyX = CopyX;
    exports.CopyXIcon = CopyX;
    exports.Copyleft = Copyleft;
    exports.CopyleftIcon = Copyleft;
    exports.Copyright = Copyright;
    exports.CopyrightIcon = Copyright;
    exports.CornerDownLeft = CornerDownLeft;
    exports.CornerDownLeftIcon = CornerDownLeft;
    exports.CornerDownRight = CornerDownRight;
    exports.CornerDownRightIcon = CornerDownRight;
    exports.CornerLeftDown = CornerLeftDown;
    exports.CornerLeftDownIcon = CornerLeftDown;
    exports.CornerLeftUp = CornerLeftUp;
    exports.CornerLeftUpIcon = CornerLeftUp;
    exports.CornerRightDown = CornerRightDown;
    exports.CornerRightDownIcon = CornerRightDown;
    exports.CornerRightUp = CornerRightUp;
    exports.CornerRightUpIcon = CornerRightUp;
    exports.CornerUpLeft = CornerUpLeft;
    exports.CornerUpLeftIcon = CornerUpLeft;
    exports.CornerUpRight = CornerUpRight;
    exports.CornerUpRightIcon = CornerUpRight;
    exports.Cpu = Cpu;
    exports.CpuIcon = Cpu;
    exports.CreativeCommons = CreativeCommons;
    exports.CreativeCommonsIcon = CreativeCommons;
    exports.CreditCard = CreditCard;
    exports.CreditCardIcon = CreditCard;
    exports.Croissant = Croissant;
    exports.CroissantIcon = Croissant;
    exports.Crop = Crop;
    exports.CropIcon = Crop;
    exports.Cross = Cross;
    exports.CrossIcon = Cross;
    exports.Crosshair = Crosshair;
    exports.CrosshairIcon = Crosshair;
    exports.Crown = Crown;
    exports.CrownIcon = Crown;
    exports.Cuboid = Cuboid;
    exports.CuboidIcon = Cuboid;
    exports.CupSoda = CupSoda;
    exports.CupSodaIcon = CupSoda;
    exports.CurlyBraces = Braces;
    exports.CurlyBracesIcon = Braces;
    exports.Currency = Currency;
    exports.CurrencyIcon = Currency;
    exports.Cylinder = Cylinder;
    exports.CylinderIcon = Cylinder;
    exports.Dam = Dam;
    exports.DamIcon = Dam;
    exports.Database = Database;
    exports.DatabaseBackup = DatabaseBackup;
    exports.DatabaseBackupIcon = DatabaseBackup;
    exports.DatabaseIcon = Database;
    exports.DatabaseZap = DatabaseZap;
    exports.DatabaseZapIcon = DatabaseZap;
    exports.Delete = Delete;
    exports.DeleteIcon = Delete;
    exports.Dessert = Dessert;
    exports.DessertIcon = Dessert;
    exports.Diameter = Diameter;
    exports.DiameterIcon = Diameter;
    exports.Diamond = Diamond;
    exports.DiamondIcon = Diamond;
    exports.DiamondMinus = DiamondMinus;
    exports.DiamondMinusIcon = DiamondMinus;
    exports.DiamondPercent = DiamondPercent;
    exports.DiamondPercentIcon = DiamondPercent;
    exports.DiamondPlus = DiamondPlus;
    exports.DiamondPlusIcon = DiamondPlus;
    exports.Dice1 = Dice1;
    exports.Dice1Icon = Dice1;
    exports.Dice2 = Dice2;
    exports.Dice2Icon = Dice2;
    exports.Dice3 = Dice3;
    exports.Dice3Icon = Dice3;
    exports.Dice4 = Dice4;
    exports.Dice4Icon = Dice4;
    exports.Dice5 = Dice5;
    exports.Dice5Icon = Dice5;
    exports.Dice6 = Dice6;
    exports.Dice6Icon = Dice6;
    exports.Dices = Dices;
    exports.DicesIcon = Dices;
    exports.Diff = Diff;
    exports.DiffIcon = Diff;
    exports.Disc = Disc;
    exports.Disc2 = Disc2;
    exports.Disc2Icon = Disc2;
    exports.Disc3 = Disc3;
    exports.Disc3Icon = Disc3;
    exports.DiscAlbum = DiscAlbum;
    exports.DiscAlbumIcon = DiscAlbum;
    exports.DiscIcon = Disc;
    exports.Divide = Divide;
    exports.DivideCircle = CircleDivide;
    exports.DivideCircleIcon = CircleDivide;
    exports.DivideIcon = Divide;
    exports.DivideSquare = SquareDivide;
    exports.DivideSquareIcon = SquareDivide;
    exports.Dna = Dna;
    exports.DnaIcon = Dna;
    exports.DnaOff = DnaOff;
    exports.DnaOffIcon = DnaOff;
    exports.Dock = Dock;
    exports.DockIcon = Dock;
    exports.Dog = Dog;
    exports.DogIcon = Dog;
    exports.DollarSign = DollarSign;
    exports.DollarSignIcon = DollarSign;
    exports.Donut = Donut;
    exports.DonutIcon = Donut;
    exports.DoorClosed = DoorClosed;
    exports.DoorClosedIcon = DoorClosed;
    exports.DoorOpen = DoorOpen;
    exports.DoorOpenIcon = DoorOpen;
    exports.Dot = Dot;
    exports.DotIcon = Dot;
    exports.DotSquare = SquareDot;
    exports.DotSquareIcon = SquareDot;
    exports.Download = Download;
    exports.DownloadCloud = CloudDownload;
    exports.DownloadCloudIcon = CloudDownload;
    exports.DownloadIcon = Download;
    exports.DraftingCompass = DraftingCompass;
    exports.DraftingCompassIcon = DraftingCompass;
    exports.Drama = Drama;
    exports.DramaIcon = Drama;
    exports.Dribbble = Dribbble;
    exports.DribbbleIcon = Dribbble;
    exports.Drill = Drill;
    exports.DrillIcon = Drill;
    exports.Droplet = Droplet;
    exports.DropletIcon = Droplet;
    exports.Droplets = Droplets;
    exports.DropletsIcon = Droplets;
    exports.Drum = Drum;
    exports.DrumIcon = Drum;
    exports.Drumstick = Drumstick;
    exports.DrumstickIcon = Drumstick;
    exports.Dumbbell = Dumbbell;
    exports.DumbbellIcon = Dumbbell;
    exports.Ear = Ear;
    exports.EarIcon = Ear;
    exports.EarOff = EarOff;
    exports.EarOffIcon = EarOff;
    exports.Earth = Earth;
    exports.EarthIcon = Earth;
    exports.EarthLock = EarthLock;
    exports.EarthLockIcon = EarthLock;
    exports.Eclipse = Eclipse;
    exports.EclipseIcon = Eclipse;
    exports.Edit = SquarePen;
    exports.Edit2 = Pen;
    exports.Edit2Icon = Pen;
    exports.Edit3 = PenLine;
    exports.Edit3Icon = PenLine;
    exports.EditIcon = SquarePen;
    exports.Egg = Egg;
    exports.EggFried = EggFried;
    exports.EggFriedIcon = EggFried;
    exports.EggIcon = Egg;
    exports.EggOff = EggOff;
    exports.EggOffIcon = EggOff;
    exports.Ellipsis = Ellipsis;
    exports.EllipsisIcon = Ellipsis;
    exports.EllipsisVertical = EllipsisVertical;
    exports.EllipsisVerticalIcon = EllipsisVertical;
    exports.Equal = Equal;
    exports.EqualApproximately = EqualApproximately;
    exports.EqualApproximatelyIcon = EqualApproximately;
    exports.EqualIcon = Equal;
    exports.EqualNot = EqualNot;
    exports.EqualNotIcon = EqualNot;
    exports.EqualSquare = SquareEqual;
    exports.EqualSquareIcon = SquareEqual;
    exports.Eraser = Eraser;
    exports.EraserIcon = Eraser;
    exports.EthernetPort = EthernetPort;
    exports.EthernetPortIcon = EthernetPort;
    exports.Euro = Euro;
    exports.EuroIcon = Euro;
    exports.Expand = Expand;
    exports.ExpandIcon = Expand;
    exports.ExternalLink = ExternalLink;
    exports.ExternalLinkIcon = ExternalLink;
    exports.Eye = Eye;
    exports.EyeClosed = EyeClosed;
    exports.EyeClosedIcon = EyeClosed;
    exports.EyeIcon = Eye;
    exports.EyeOff = EyeOff;
    exports.EyeOffIcon = EyeOff;
    exports.Facebook = Facebook;
    exports.FacebookIcon = Facebook;
    exports.Factory = Factory;
    exports.FactoryIcon = Factory;
    exports.Fan = Fan;
    exports.FanIcon = Fan;
    exports.FastForward = FastForward;
    exports.FastForwardIcon = FastForward;
    exports.Feather = Feather;
    exports.FeatherIcon = Feather;
    exports.Fence = Fence;
    exports.FenceIcon = Fence;
    exports.FerrisWheel = FerrisWheel;
    exports.FerrisWheelIcon = FerrisWheel;
    exports.Figma = Figma;
    exports.FigmaIcon = Figma;
    exports.File = File;
    exports.FileArchive = FileArchive;
    exports.FileArchiveIcon = FileArchive;
    exports.FileAudio = FileAudio;
    exports.FileAudio2 = FileAudio2;
    exports.FileAudio2Icon = FileAudio2;
    exports.FileAudioIcon = FileAudio;
    exports.FileAxis3D = FileAxis3d;
    exports.FileAxis3DIcon = FileAxis3d;
    exports.FileAxis3d = FileAxis3d;
    exports.FileAxis3dIcon = FileAxis3d;
    exports.FileBadge = FileBadge;
    exports.FileBadge2 = FileBadge2;
    exports.FileBadge2Icon = FileBadge2;
    exports.FileBadgeIcon = FileBadge;
    exports.FileBarChart = FileChartColumnIncreasing;
    exports.FileBarChart2 = FileChartColumn;
    exports.FileBarChart2Icon = FileChartColumn;
    exports.FileBarChartIcon = FileChartColumnIncreasing;
    exports.FileBox = FileBox;
    exports.FileBoxIcon = FileBox;
    exports.FileChartColumn = FileChartColumn;
    exports.FileChartColumnIcon = FileChartColumn;
    exports.FileChartColumnIncreasing = FileChartColumnIncreasing;
    exports.FileChartColumnIncreasingIcon = FileChartColumnIncreasing;
    exports.FileChartLine = FileChartLine;
    exports.FileChartLineIcon = FileChartLine;
    exports.FileChartPie = FileChartPie;
    exports.FileChartPieIcon = FileChartPie;
    exports.FileCheck = FileCheck;
    exports.FileCheck2 = FileCheck2;
    exports.FileCheck2Icon = FileCheck2;
    exports.FileCheckIcon = FileCheck;
    exports.FileClock = FileClock;
    exports.FileClockIcon = FileClock;
    exports.FileCode = FileCode;
    exports.FileCode2 = FileCode2;
    exports.FileCode2Icon = FileCode2;
    exports.FileCodeIcon = FileCode;
    exports.FileCog = FileCog;
    exports.FileCog2 = FileCog;
    exports.FileCog2Icon = FileCog;
    exports.FileCogIcon = FileCog;
    exports.FileDiff = FileDiff;
    exports.FileDiffIcon = FileDiff;
    exports.FileDigit = FileDigit;
    exports.FileDigitIcon = FileDigit;
    exports.FileDown = FileDown;
    exports.FileDownIcon = FileDown;
    exports.FileEdit = FilePen;
    exports.FileEditIcon = FilePen;
    exports.FileHeart = FileHeart;
    exports.FileHeartIcon = FileHeart;
    exports.FileIcon = File;
    exports.FileImage = FileImage;
    exports.FileImageIcon = FileImage;
    exports.FileInput = FileInput;
    exports.FileInputIcon = FileInput;
    exports.FileJson = FileJson;
    exports.FileJson2 = FileJson2;
    exports.FileJson2Icon = FileJson2;
    exports.FileJsonIcon = FileJson;
    exports.FileKey = FileKey;
    exports.FileKey2 = FileKey2;
    exports.FileKey2Icon = FileKey2;
    exports.FileKeyIcon = FileKey;
    exports.FileLineChart = FileChartLine;
    exports.FileLineChartIcon = FileChartLine;
    exports.FileLock = FileLock;
    exports.FileLock2 = FileLock2;
    exports.FileLock2Icon = FileLock2;
    exports.FileLockIcon = FileLock;
    exports.FileMinus = FileMinus;
    exports.FileMinus2 = FileMinus2;
    exports.FileMinus2Icon = FileMinus2;
    exports.FileMinusIcon = FileMinus;
    exports.FileMusic = FileMusic;
    exports.FileMusicIcon = FileMusic;
    exports.FileOutput = FileOutput;
    exports.FileOutputIcon = FileOutput;
    exports.FilePen = FilePen;
    exports.FilePenIcon = FilePen;
    exports.FilePenLine = FilePenLine;
    exports.FilePenLineIcon = FilePenLine;
    exports.FilePieChart = FileChartPie;
    exports.FilePieChartIcon = FileChartPie;
    exports.FilePlus = FilePlus;
    exports.FilePlus2 = FilePlus2;
    exports.FilePlus2Icon = FilePlus2;
    exports.FilePlusIcon = FilePlus;
    exports.FileQuestion = FileQuestion;
    exports.FileQuestionIcon = FileQuestion;
    exports.FileScan = FileScan;
    exports.FileScanIcon = FileScan;
    exports.FileSearch = FileSearch;
    exports.FileSearch2 = FileSearch2;
    exports.FileSearch2Icon = FileSearch2;
    exports.FileSearchIcon = FileSearch;
    exports.FileSignature = FilePenLine;
    exports.FileSignatureIcon = FilePenLine;
    exports.FileSliders = FileSliders;
    exports.FileSlidersIcon = FileSliders;
    exports.FileSpreadsheet = FileSpreadsheet;
    exports.FileSpreadsheetIcon = FileSpreadsheet;
    exports.FileStack = FileStack;
    exports.FileStackIcon = FileStack;
    exports.FileSymlink = FileSymlink;
    exports.FileSymlinkIcon = FileSymlink;
    exports.FileTerminal = FileTerminal;
    exports.FileTerminalIcon = FileTerminal;
    exports.FileText = FileText;
    exports.FileTextIcon = FileText;
    exports.FileType = FileType;
    exports.FileType2 = FileType2;
    exports.FileType2Icon = FileType2;
    exports.FileTypeIcon = FileType;
    exports.FileUp = FileUp;
    exports.FileUpIcon = FileUp;
    exports.FileUser = FileUser;
    exports.FileUserIcon = FileUser;
    exports.FileVideo = FileVideo;
    exports.FileVideo2 = FileVideo2;
    exports.FileVideo2Icon = FileVideo2;
    exports.FileVideoIcon = FileVideo;
    exports.FileVolume = FileVolume;
    exports.FileVolume2 = FileVolume2;
    exports.FileVolume2Icon = FileVolume2;
    exports.FileVolumeIcon = FileVolume;
    exports.FileWarning = FileWarning;
    exports.FileWarningIcon = FileWarning;
    exports.FileX = FileX;
    exports.FileX2 = FileX2;
    exports.FileX2Icon = FileX2;
    exports.FileXIcon = FileX;
    exports.Files = Files;
    exports.FilesIcon = Files;
    exports.Film = Film;
    exports.FilmIcon = Film;
    exports.Filter = Filter;
    exports.FilterIcon = Filter;
    exports.FilterX = FilterX;
    exports.FilterXIcon = FilterX;
    exports.Fingerprint = Fingerprint;
    exports.FingerprintIcon = Fingerprint;
    exports.FireExtinguisher = FireExtinguisher;
    exports.FireExtinguisherIcon = FireExtinguisher;
    exports.Fish = Fish;
    exports.FishIcon = Fish;
    exports.FishOff = FishOff;
    exports.FishOffIcon = FishOff;
    exports.FishSymbol = FishSymbol;
    exports.FishSymbolIcon = FishSymbol;
    exports.Flag = Flag;
    exports.FlagIcon = Flag;
    exports.FlagOff = FlagOff;
    exports.FlagOffIcon = FlagOff;
    exports.FlagTriangleLeft = FlagTriangleLeft;
    exports.FlagTriangleLeftIcon = FlagTriangleLeft;
    exports.FlagTriangleRight = FlagTriangleRight;
    exports.FlagTriangleRightIcon = FlagTriangleRight;
    exports.Flame = Flame;
    exports.FlameIcon = Flame;
    exports.FlameKindling = FlameKindling;
    exports.FlameKindlingIcon = FlameKindling;
    exports.Flashlight = Flashlight;
    exports.FlashlightIcon = Flashlight;
    exports.FlashlightOff = FlashlightOff;
    exports.FlashlightOffIcon = FlashlightOff;
    exports.FlaskConical = FlaskConical;
    exports.FlaskConicalIcon = FlaskConical;
    exports.FlaskConicalOff = FlaskConicalOff;
    exports.FlaskConicalOffIcon = FlaskConicalOff;
    exports.FlaskRound = FlaskRound;
    exports.FlaskRoundIcon = FlaskRound;
    exports.FlipHorizontal = FlipHorizontal;
    exports.FlipHorizontal2 = FlipHorizontal2;
    exports.FlipHorizontal2Icon = FlipHorizontal2;
    exports.FlipHorizontalIcon = FlipHorizontal;
    exports.FlipVertical = FlipVertical;
    exports.FlipVertical2 = FlipVertical2;
    exports.FlipVertical2Icon = FlipVertical2;
    exports.FlipVerticalIcon = FlipVertical;
    exports.Flower = Flower;
    exports.Flower2 = Flower2;
    exports.Flower2Icon = Flower2;
    exports.FlowerIcon = Flower;
    exports.Focus = Focus;
    exports.FocusIcon = Focus;
    exports.FoldHorizontal = FoldHorizontal;
    exports.FoldHorizontalIcon = FoldHorizontal;
    exports.FoldVertical = FoldVertical;
    exports.FoldVerticalIcon = FoldVertical;
    exports.Folder = Folder;
    exports.FolderArchive = FolderArchive;
    exports.FolderArchiveIcon = FolderArchive;
    exports.FolderCheck = FolderCheck;
    exports.FolderCheckIcon = FolderCheck;
    exports.FolderClock = FolderClock;
    exports.FolderClockIcon = FolderClock;
    exports.FolderClosed = FolderClosed;
    exports.FolderClosedIcon = FolderClosed;
    exports.FolderCode = FolderCode;
    exports.FolderCodeIcon = FolderCode;
    exports.FolderCog = FolderCog;
    exports.FolderCog2 = FolderCog;
    exports.FolderCog2Icon = FolderCog;
    exports.FolderCogIcon = FolderCog;
    exports.FolderDot = FolderDot;
    exports.FolderDotIcon = FolderDot;
    exports.FolderDown = FolderDown;
    exports.FolderDownIcon = FolderDown;
    exports.FolderEdit = FolderPen;
    exports.FolderEditIcon = FolderPen;
    exports.FolderGit = FolderGit;
    exports.FolderGit2 = FolderGit2;
    exports.FolderGit2Icon = FolderGit2;
    exports.FolderGitIcon = FolderGit;
    exports.FolderHeart = FolderHeart;
    exports.FolderHeartIcon = FolderHeart;
    exports.FolderIcon = Folder;
    exports.FolderInput = FolderInput;
    exports.FolderInputIcon = FolderInput;
    exports.FolderKanban = FolderKanban;
    exports.FolderKanbanIcon = FolderKanban;
    exports.FolderKey = FolderKey;
    exports.FolderKeyIcon = FolderKey;
    exports.FolderLock = FolderLock;
    exports.FolderLockIcon = FolderLock;
    exports.FolderMinus = FolderMinus;
    exports.FolderMinusIcon = FolderMinus;
    exports.FolderOpen = FolderOpen;
    exports.FolderOpenDot = FolderOpenDot;
    exports.FolderOpenDotIcon = FolderOpenDot;
    exports.FolderOpenIcon = FolderOpen;
    exports.FolderOutput = FolderOutput;
    exports.FolderOutputIcon = FolderOutput;
    exports.FolderPen = FolderPen;
    exports.FolderPenIcon = FolderPen;
    exports.FolderPlus = FolderPlus;
    exports.FolderPlusIcon = FolderPlus;
    exports.FolderRoot = FolderRoot;
    exports.FolderRootIcon = FolderRoot;
    exports.FolderSearch = FolderSearch;
    exports.FolderSearch2 = FolderSearch2;
    exports.FolderSearch2Icon = FolderSearch2;
    exports.FolderSearchIcon = FolderSearch;
    exports.FolderSymlink = FolderSymlink;
    exports.FolderSymlinkIcon = FolderSymlink;
    exports.FolderSync = FolderSync;
    exports.FolderSyncIcon = FolderSync;
    exports.FolderTree = FolderTree;
    exports.FolderTreeIcon = FolderTree;
    exports.FolderUp = FolderUp;
    exports.FolderUpIcon = FolderUp;
    exports.FolderX = FolderX;
    exports.FolderXIcon = FolderX;
    exports.Folders = Folders;
    exports.FoldersIcon = Folders;
    exports.Footprints = Footprints;
    exports.FootprintsIcon = Footprints;
    exports.ForkKnife = Utensils;
    exports.ForkKnifeCrossed = UtensilsCrossed;
    exports.ForkKnifeCrossedIcon = UtensilsCrossed;
    exports.ForkKnifeIcon = Utensils;
    exports.Forklift = Forklift;
    exports.ForkliftIcon = Forklift;
    exports.FormInput = RectangleEllipsis;
    exports.FormInputIcon = RectangleEllipsis;
    exports.Forward = Forward;
    exports.ForwardIcon = Forward;
    exports.Frame = Frame;
    exports.FrameIcon = Frame;
    exports.Framer = Framer;
    exports.FramerIcon = Framer;
    exports.Frown = Frown;
    exports.FrownIcon = Frown;
    exports.Fuel = Fuel;
    exports.FuelIcon = Fuel;
    exports.Fullscreen = Fullscreen;
    exports.FullscreenIcon = Fullscreen;
    exports.FunctionSquare = SquareFunction;
    exports.FunctionSquareIcon = SquareFunction;
    exports.GalleryHorizontal = GalleryHorizontal;
    exports.GalleryHorizontalEnd = GalleryHorizontalEnd;
    exports.GalleryHorizontalEndIcon = GalleryHorizontalEnd;
    exports.GalleryHorizontalIcon = GalleryHorizontal;
    exports.GalleryThumbnails = GalleryThumbnails;
    exports.GalleryThumbnailsIcon = GalleryThumbnails;
    exports.GalleryVertical = GalleryVertical;
    exports.GalleryVerticalEnd = GalleryVerticalEnd;
    exports.GalleryVerticalEndIcon = GalleryVerticalEnd;
    exports.GalleryVerticalIcon = GalleryVertical;
    exports.Gamepad = Gamepad;
    exports.Gamepad2 = Gamepad2;
    exports.Gamepad2Icon = Gamepad2;
    exports.GamepadIcon = Gamepad;
    exports.GanttChart = ChartNoAxesGantt;
    exports.GanttChartIcon = ChartNoAxesGantt;
    exports.GanttChartSquare = SquareChartGantt;
    exports.GanttChartSquareIcon = SquareChartGantt;
    exports.Gauge = Gauge;
    exports.GaugeCircle = CircleGauge;
    exports.GaugeCircleIcon = CircleGauge;
    exports.GaugeIcon = Gauge;
    exports.Gavel = Gavel;
    exports.GavelIcon = Gavel;
    exports.Gem = Gem;
    exports.GemIcon = Gem;
    exports.Ghost = Ghost;
    exports.GhostIcon = Ghost;
    exports.Gift = Gift;
    exports.GiftIcon = Gift;
    exports.GitBranch = GitBranch;
    exports.GitBranchIcon = GitBranch;
    exports.GitBranchPlus = GitBranchPlus;
    exports.GitBranchPlusIcon = GitBranchPlus;
    exports.GitCommit = GitCommitHorizontal;
    exports.GitCommitHorizontal = GitCommitHorizontal;
    exports.GitCommitHorizontalIcon = GitCommitHorizontal;
    exports.GitCommitIcon = GitCommitHorizontal;
    exports.GitCommitVertical = GitCommitVertical;
    exports.GitCommitVerticalIcon = GitCommitVertical;
    exports.GitCompare = GitCompare;
    exports.GitCompareArrows = GitCompareArrows;
    exports.GitCompareArrowsIcon = GitCompareArrows;
    exports.GitCompareIcon = GitCompare;
    exports.GitFork = GitFork;
    exports.GitForkIcon = GitFork;
    exports.GitGraph = GitGraph;
    exports.GitGraphIcon = GitGraph;
    exports.GitMerge = GitMerge;
    exports.GitMergeIcon = GitMerge;
    exports.GitPullRequest = GitPullRequest;
    exports.GitPullRequestArrow = GitPullRequestArrow;
    exports.GitPullRequestArrowIcon = GitPullRequestArrow;
    exports.GitPullRequestClosed = GitPullRequestClosed;
    exports.GitPullRequestClosedIcon = GitPullRequestClosed;
    exports.GitPullRequestCreate = GitPullRequestCreate;
    exports.GitPullRequestCreateArrow = GitPullRequestCreateArrow;
    exports.GitPullRequestCreateArrowIcon = GitPullRequestCreateArrow;
    exports.GitPullRequestCreateIcon = GitPullRequestCreate;
    exports.GitPullRequestDraft = GitPullRequestDraft;
    exports.GitPullRequestDraftIcon = GitPullRequestDraft;
    exports.GitPullRequestIcon = GitPullRequest;
    exports.Github = Github;
    exports.GithubIcon = Github;
    exports.Gitlab = Gitlab;
    exports.GitlabIcon = Gitlab;
    exports.GlassWater = GlassWater;
    exports.GlassWaterIcon = GlassWater;
    exports.Glasses = Glasses;
    exports.GlassesIcon = Glasses;
    exports.Globe = Globe;
    exports.Globe2 = Earth;
    exports.Globe2Icon = Earth;
    exports.GlobeIcon = Globe;
    exports.GlobeLock = GlobeLock;
    exports.GlobeLockIcon = GlobeLock;
    exports.Goal = Goal;
    exports.GoalIcon = Goal;
    exports.Grab = Grab;
    exports.GrabIcon = Grab;
    exports.GraduationCap = GraduationCap;
    exports.GraduationCapIcon = GraduationCap;
    exports.Grape = Grape;
    exports.GrapeIcon = Grape;
    exports.Grid = Grid3x3;
    exports.Grid2X2 = Grid2x2;
    exports.Grid2X2Icon = Grid2x2;
    exports.Grid2X2Plus = Grid2x2Plus;
    exports.Grid2X2PlusIcon = Grid2x2Plus;
    exports.Grid2x2 = Grid2x2;
    exports.Grid2x2Check = Grid2x2Check;
    exports.Grid2x2CheckIcon = Grid2x2Check;
    exports.Grid2x2Icon = Grid2x2;
    exports.Grid2x2Plus = Grid2x2Plus;
    exports.Grid2x2PlusIcon = Grid2x2Plus;
    exports.Grid2x2X = Grid2x2X;
    exports.Grid2x2XIcon = Grid2x2X;
    exports.Grid3X3 = Grid3x3;
    exports.Grid3X3Icon = Grid3x3;
    exports.Grid3x3 = Grid3x3;
    exports.Grid3x3Icon = Grid3x3;
    exports.GridIcon = Grid3x3;
    exports.Grip = Grip;
    exports.GripHorizontal = GripHorizontal;
    exports.GripHorizontalIcon = GripHorizontal;
    exports.GripIcon = Grip;
    exports.GripVertical = GripVertical;
    exports.GripVerticalIcon = GripVertical;
    exports.Group = Group;
    exports.GroupIcon = Group;
    exports.Guitar = Guitar;
    exports.GuitarIcon = Guitar;
    exports.Ham = Ham;
    exports.HamIcon = Ham;
    exports.Hammer = Hammer;
    exports.HammerIcon = Hammer;
    exports.Hand = Hand;
    exports.HandCoins = HandCoins;
    exports.HandCoinsIcon = HandCoins;
    exports.HandHeart = HandHeart;
    exports.HandHeartIcon = HandHeart;
    exports.HandHelping = HandHelping;
    exports.HandHelpingIcon = HandHelping;
    exports.HandIcon = Hand;
    exports.HandMetal = HandMetal;
    exports.HandMetalIcon = HandMetal;
    exports.HandPlatter = HandPlatter;
    exports.HandPlatterIcon = HandPlatter;
    exports.Handshake = Handshake;
    exports.HandshakeIcon = Handshake;
    exports.HardDrive = HardDrive;
    exports.HardDriveDownload = HardDriveDownload;
    exports.HardDriveDownloadIcon = HardDriveDownload;
    exports.HardDriveIcon = HardDrive;
    exports.HardDriveUpload = HardDriveUpload;
    exports.HardDriveUploadIcon = HardDriveUpload;
    exports.HardHat = HardHat;
    exports.HardHatIcon = HardHat;
    exports.Hash = Hash;
    exports.HashIcon = Hash;
    exports.Haze = Haze;
    exports.HazeIcon = Haze;
    exports.HdmiPort = HdmiPort;
    exports.HdmiPortIcon = HdmiPort;
    exports.Heading = Heading;
    exports.Heading1 = Heading1;
    exports.Heading1Icon = Heading1;
    exports.Heading2 = Heading2;
    exports.Heading2Icon = Heading2;
    exports.Heading3 = Heading3;
    exports.Heading3Icon = Heading3;
    exports.Heading4 = Heading4;
    exports.Heading4Icon = Heading4;
    exports.Heading5 = Heading5;
    exports.Heading5Icon = Heading5;
    exports.Heading6 = Heading6;
    exports.Heading6Icon = Heading6;
    exports.HeadingIcon = Heading;
    exports.HeadphoneOff = HeadphoneOff;
    exports.HeadphoneOffIcon = HeadphoneOff;
    exports.Headphones = Headphones;
    exports.HeadphonesIcon = Headphones;
    exports.Headset = Headset;
    exports.HeadsetIcon = Headset;
    exports.Heart = Heart;
    exports.HeartCrack = HeartCrack;
    exports.HeartCrackIcon = HeartCrack;
    exports.HeartHandshake = HeartHandshake;
    exports.HeartHandshakeIcon = HeartHandshake;
    exports.HeartIcon = Heart;
    exports.HeartOff = HeartOff;
    exports.HeartOffIcon = HeartOff;
    exports.HeartPulse = HeartPulse;
    exports.HeartPulseIcon = HeartPulse;
    exports.Heater = Heater;
    exports.HeaterIcon = Heater;
    exports.HelpCircle = CircleHelp;
    exports.HelpCircleIcon = CircleHelp;
    exports.HelpingHand = HandHelping;
    exports.HelpingHandIcon = HandHelping;
    exports.Hexagon = Hexagon;
    exports.HexagonIcon = Hexagon;
    exports.Highlighter = Highlighter;
    exports.HighlighterIcon = Highlighter;
    exports.History = History;
    exports.HistoryIcon = History;
    exports.Home = House;
    exports.HomeIcon = House;
    exports.Hop = Hop;
    exports.HopIcon = Hop;
    exports.HopOff = HopOff;
    exports.HopOffIcon = HopOff;
    exports.Hospital = Hospital;
    exports.HospitalIcon = Hospital;
    exports.Hotel = Hotel;
    exports.HotelIcon = Hotel;
    exports.Hourglass = Hourglass;
    exports.HourglassIcon = Hourglass;
    exports.House = House;
    exports.HouseIcon = House;
    exports.HousePlug = HousePlug;
    exports.HousePlugIcon = HousePlug;
    exports.HousePlus = HousePlus;
    exports.HousePlusIcon = HousePlus;
    exports.IceCream = IceCreamCone;
    exports.IceCream2 = IceCreamBowl;
    exports.IceCream2Icon = IceCreamBowl;
    exports.IceCreamBowl = IceCreamBowl;
    exports.IceCreamBowlIcon = IceCreamBowl;
    exports.IceCreamCone = IceCreamCone;
    exports.IceCreamConeIcon = IceCreamCone;
    exports.IceCreamIcon = IceCreamCone;
    exports.Icon = Icon;
    exports.IdCard = IdCard;
    exports.IdCardIcon = IdCard;
    exports.Image = Image;
    exports.ImageDown = ImageDown;
    exports.ImageDownIcon = ImageDown;
    exports.ImageIcon = Image;
    exports.ImageMinus = ImageMinus;
    exports.ImageMinusIcon = ImageMinus;
    exports.ImageOff = ImageOff;
    exports.ImageOffIcon = ImageOff;
    exports.ImagePlay = ImagePlay;
    exports.ImagePlayIcon = ImagePlay;
    exports.ImagePlus = ImagePlus;
    exports.ImagePlusIcon = ImagePlus;
    exports.ImageUp = ImageUp;
    exports.ImageUpIcon = ImageUp;
    exports.ImageUpscale = ImageUpscale;
    exports.ImageUpscaleIcon = ImageUpscale;
    exports.Images = Images;
    exports.ImagesIcon = Images;
    exports.Import = Import;
    exports.ImportIcon = Import;
    exports.Inbox = Inbox;
    exports.InboxIcon = Inbox;
    exports.Indent = IndentIncrease;
    exports.IndentDecrease = IndentDecrease;
    exports.IndentDecreaseIcon = IndentDecrease;
    exports.IndentIcon = IndentIncrease;
    exports.IndentIncrease = IndentIncrease;
    exports.IndentIncreaseIcon = IndentIncrease;
    exports.IndianRupee = IndianRupee;
    exports.IndianRupeeIcon = IndianRupee;
    exports.Infinity = Infinity2;
    exports.InfinityIcon = Infinity2;
    exports.Info = Info;
    exports.InfoIcon = Info;
    exports.Inspect = SquareMousePointer;
    exports.InspectIcon = SquareMousePointer;
    exports.InspectionPanel = InspectionPanel;
    exports.InspectionPanelIcon = InspectionPanel;
    exports.Instagram = Instagram;
    exports.InstagramIcon = Instagram;
    exports.Italic = Italic;
    exports.ItalicIcon = Italic;
    exports.IterationCcw = IterationCcw;
    exports.IterationCcwIcon = IterationCcw;
    exports.IterationCw = IterationCw;
    exports.IterationCwIcon = IterationCw;
    exports.JapaneseYen = JapaneseYen;
    exports.JapaneseYenIcon = JapaneseYen;
    exports.Joystick = Joystick;
    exports.JoystickIcon = Joystick;
    exports.Kanban = Kanban;
    exports.KanbanIcon = Kanban;
    exports.KanbanSquare = SquareKanban;
    exports.KanbanSquareDashed = SquareDashedKanban;
    exports.KanbanSquareDashedIcon = SquareDashedKanban;
    exports.KanbanSquareIcon = SquareKanban;
    exports.Key = Key;
    exports.KeyIcon = Key;
    exports.KeyRound = KeyRound;
    exports.KeyRoundIcon = KeyRound;
    exports.KeySquare = KeySquare;
    exports.KeySquareIcon = KeySquare;
    exports.Keyboard = Keyboard;
    exports.KeyboardIcon = Keyboard;
    exports.KeyboardMusic = KeyboardMusic;
    exports.KeyboardMusicIcon = KeyboardMusic;
    exports.KeyboardOff = KeyboardOff;
    exports.KeyboardOffIcon = KeyboardOff;
    exports.Lamp = Lamp;
    exports.LampCeiling = LampCeiling;
    exports.LampCeilingIcon = LampCeiling;
    exports.LampDesk = LampDesk;
    exports.LampDeskIcon = LampDesk;
    exports.LampFloor = LampFloor;
    exports.LampFloorIcon = LampFloor;
    exports.LampIcon = Lamp;
    exports.LampWallDown = LampWallDown;
    exports.LampWallDownIcon = LampWallDown;
    exports.LampWallUp = LampWallUp;
    exports.LampWallUpIcon = LampWallUp;
    exports.LandPlot = LandPlot;
    exports.LandPlotIcon = LandPlot;
    exports.Landmark = Landmark;
    exports.LandmarkIcon = Landmark;
    exports.Languages = Languages;
    exports.LanguagesIcon = Languages;
    exports.Laptop = Laptop;
    exports.Laptop2 = LaptopMinimal;
    exports.Laptop2Icon = LaptopMinimal;
    exports.LaptopIcon = Laptop;
    exports.LaptopMinimal = LaptopMinimal;
    exports.LaptopMinimalCheck = LaptopMinimalCheck;
    exports.LaptopMinimalCheckIcon = LaptopMinimalCheck;
    exports.LaptopMinimalIcon = LaptopMinimal;
    exports.Lasso = Lasso;
    exports.LassoIcon = Lasso;
    exports.LassoSelect = LassoSelect;
    exports.LassoSelectIcon = LassoSelect;
    exports.Laugh = Laugh;
    exports.LaughIcon = Laugh;
    exports.Layers = Layers;
    exports.Layers2 = Layers2;
    exports.Layers2Icon = Layers2;
    exports.Layers3 = Layers3;
    exports.Layers3Icon = Layers3;
    exports.LayersIcon = Layers;
    exports.Layout = PanelsTopLeft;
    exports.LayoutDashboard = LayoutDashboard;
    exports.LayoutDashboardIcon = LayoutDashboard;
    exports.LayoutGrid = LayoutGrid;
    exports.LayoutGridIcon = LayoutGrid;
    exports.LayoutIcon = PanelsTopLeft;
    exports.LayoutList = LayoutList;
    exports.LayoutListIcon = LayoutList;
    exports.LayoutPanelLeft = LayoutPanelLeft;
    exports.LayoutPanelLeftIcon = LayoutPanelLeft;
    exports.LayoutPanelTop = LayoutPanelTop;
    exports.LayoutPanelTopIcon = LayoutPanelTop;
    exports.LayoutTemplate = LayoutTemplate;
    exports.LayoutTemplateIcon = LayoutTemplate;
    exports.Leaf = Leaf;
    exports.LeafIcon = Leaf;
    exports.LeafyGreen = LeafyGreen;
    exports.LeafyGreenIcon = LeafyGreen;
    exports.Lectern = Lectern;
    exports.LecternIcon = Lectern;
    exports.LetterText = LetterText;
    exports.LetterTextIcon = LetterText;
    exports.Library = Library;
    exports.LibraryBig = LibraryBig;
    exports.LibraryBigIcon = LibraryBig;
    exports.LibraryIcon = Library;
    exports.LibrarySquare = SquareLibrary;
    exports.LibrarySquareIcon = SquareLibrary;
    exports.LifeBuoy = LifeBuoy;
    exports.LifeBuoyIcon = LifeBuoy;
    exports.Ligature = Ligature;
    exports.LigatureIcon = Ligature;
    exports.Lightbulb = Lightbulb;
    exports.LightbulbIcon = Lightbulb;
    exports.LightbulbOff = LightbulbOff;
    exports.LightbulbOffIcon = LightbulbOff;
    exports.LineChart = ChartLine;
    exports.LineChartIcon = ChartLine;
    exports.Link = Link3;
    exports.Link2 = Link2;
    exports.Link2Icon = Link2;
    exports.Link2Off = Link2Off;
    exports.Link2OffIcon = Link2Off;
    exports.LinkIcon = Link3;
    exports.Linkedin = Linkedin;
    exports.LinkedinIcon = Linkedin;
    exports.List = List;
    exports.ListCheck = ListCheck;
    exports.ListCheckIcon = ListCheck;
    exports.ListChecks = ListChecks;
    exports.ListChecksIcon = ListChecks;
    exports.ListCollapse = ListCollapse;
    exports.ListCollapseIcon = ListCollapse;
    exports.ListEnd = ListEnd;
    exports.ListEndIcon = ListEnd;
    exports.ListFilter = ListFilter;
    exports.ListFilterIcon = ListFilter;
    exports.ListIcon = List;
    exports.ListMinus = ListMinus;
    exports.ListMinusIcon = ListMinus;
    exports.ListMusic = ListMusic;
    exports.ListMusicIcon = ListMusic;
    exports.ListOrdered = ListOrdered;
    exports.ListOrderedIcon = ListOrdered;
    exports.ListPlus = ListPlus;
    exports.ListPlusIcon = ListPlus;
    exports.ListRestart = ListRestart;
    exports.ListRestartIcon = ListRestart;
    exports.ListStart = ListStart;
    exports.ListStartIcon = ListStart;
    exports.ListTodo = ListTodo;
    exports.ListTodoIcon = ListTodo;
    exports.ListTree = ListTree;
    exports.ListTreeIcon = ListTree;
    exports.ListVideo = ListVideo;
    exports.ListVideoIcon = ListVideo;
    exports.ListX = ListX;
    exports.ListXIcon = ListX;
    exports.Loader = Loader;
    exports.Loader2 = LoaderCircle;
    exports.Loader2Icon = LoaderCircle;
    exports.LoaderCircle = LoaderCircle;
    exports.LoaderCircleIcon = LoaderCircle;
    exports.LoaderIcon = Loader;
    exports.LoaderPinwheel = LoaderPinwheel;
    exports.LoaderPinwheelIcon = LoaderPinwheel;
    exports.Locate = Locate;
    exports.LocateFixed = LocateFixed;
    exports.LocateFixedIcon = LocateFixed;
    exports.LocateIcon = Locate;
    exports.LocateOff = LocateOff;
    exports.LocateOffIcon = LocateOff;
    exports.Lock = Lock;
    exports.LockIcon = Lock;
    exports.LockKeyhole = LockKeyhole;
    exports.LockKeyholeIcon = LockKeyhole;
    exports.LockKeyholeOpen = LockKeyholeOpen;
    exports.LockKeyholeOpenIcon = LockKeyholeOpen;
    exports.LockOpen = LockOpen;
    exports.LockOpenIcon = LockOpen;
    exports.LogIn = LogIn;
    exports.LogInIcon = LogIn;
    exports.LogOut = LogOut;
    exports.LogOutIcon = LogOut;
    exports.Logs = Logs;
    exports.LogsIcon = Logs;
    exports.Lollipop = Lollipop;
    exports.LollipopIcon = Lollipop;
    exports.LucideAArrowDown = AArrowDown;
    exports.LucideAArrowUp = AArrowUp;
    exports.LucideALargeSmall = ALargeSmall;
    exports.LucideAccessibility = Accessibility;
    exports.LucideActivity = Activity;
    exports.LucideActivitySquare = SquareActivity;
    exports.LucideAirVent = AirVent;
    exports.LucideAirplay = Airplay;
    exports.LucideAlarmCheck = AlarmClockCheck;
    exports.LucideAlarmClock = AlarmClock;
    exports.LucideAlarmClockCheck = AlarmClockCheck;
    exports.LucideAlarmClockMinus = AlarmClockMinus;
    exports.LucideAlarmClockOff = AlarmClockOff;
    exports.LucideAlarmClockPlus = AlarmClockPlus;
    exports.LucideAlarmMinus = AlarmClockMinus;
    exports.LucideAlarmPlus = AlarmClockPlus;
    exports.LucideAlarmSmoke = AlarmSmoke;
    exports.LucideAlbum = Album;
    exports.LucideAlertCircle = CircleAlert;
    exports.LucideAlertOctagon = OctagonAlert;
    exports.LucideAlertTriangle = TriangleAlert;
    exports.LucideAlignCenter = AlignCenter;
    exports.LucideAlignCenterHorizontal = AlignCenterHorizontal;
    exports.LucideAlignCenterVertical = AlignCenterVertical;
    exports.LucideAlignEndHorizontal = AlignEndHorizontal;
    exports.LucideAlignEndVertical = AlignEndVertical;
    exports.LucideAlignHorizontalDistributeCenter = AlignHorizontalDistributeCenter;
    exports.LucideAlignHorizontalDistributeEnd = AlignHorizontalDistributeEnd;
    exports.LucideAlignHorizontalDistributeStart = AlignHorizontalDistributeStart;
    exports.LucideAlignHorizontalJustifyCenter = AlignHorizontalJustifyCenter;
    exports.LucideAlignHorizontalJustifyEnd = AlignHorizontalJustifyEnd;
    exports.LucideAlignHorizontalJustifyStart = AlignHorizontalJustifyStart;
    exports.LucideAlignHorizontalSpaceAround = AlignHorizontalSpaceAround;
    exports.LucideAlignHorizontalSpaceBetween = AlignHorizontalSpaceBetween;
    exports.LucideAlignJustify = AlignJustify;
    exports.LucideAlignLeft = AlignLeft;
    exports.LucideAlignRight = AlignRight;
    exports.LucideAlignStartHorizontal = AlignStartHorizontal;
    exports.LucideAlignStartVertical = AlignStartVertical;
    exports.LucideAlignVerticalDistributeCenter = AlignVerticalDistributeCenter;
    exports.LucideAlignVerticalDistributeEnd = AlignVerticalDistributeEnd;
    exports.LucideAlignVerticalDistributeStart = AlignVerticalDistributeStart;
    exports.LucideAlignVerticalJustifyCenter = AlignVerticalJustifyCenter;
    exports.LucideAlignVerticalJustifyEnd = AlignVerticalJustifyEnd;
    exports.LucideAlignVerticalJustifyStart = AlignVerticalJustifyStart;
    exports.LucideAlignVerticalSpaceAround = AlignVerticalSpaceAround;
    exports.LucideAlignVerticalSpaceBetween = AlignVerticalSpaceBetween;
    exports.LucideAmbulance = Ambulance;
    exports.LucideAmpersand = Ampersand;
    exports.LucideAmpersands = Ampersands;
    exports.LucideAmphora = Amphora;
    exports.LucideAnchor = Anchor;
    exports.LucideAngry = Angry;
    exports.LucideAnnoyed = Annoyed;
    exports.LucideAntenna = Antenna;
    exports.LucideAnvil = Anvil;
    exports.LucideAperture = Aperture;
    exports.LucideAppWindow = AppWindow;
    exports.LucideAppWindowMac = AppWindowMac;
    exports.LucideApple = Apple;
    exports.LucideArchive = Archive;
    exports.LucideArchiveRestore = ArchiveRestore;
    exports.LucideArchiveX = ArchiveX;
    exports.LucideAreaChart = ChartArea;
    exports.LucideArmchair = Armchair;
    exports.LucideArrowBigDown = ArrowBigDown;
    exports.LucideArrowBigDownDash = ArrowBigDownDash;
    exports.LucideArrowBigLeft = ArrowBigLeft;
    exports.LucideArrowBigLeftDash = ArrowBigLeftDash;
    exports.LucideArrowBigRight = ArrowBigRight;
    exports.LucideArrowBigRightDash = ArrowBigRightDash;
    exports.LucideArrowBigUp = ArrowBigUp;
    exports.LucideArrowBigUpDash = ArrowBigUpDash;
    exports.LucideArrowDown = ArrowDown;
    exports.LucideArrowDown01 = ArrowDown01;
    exports.LucideArrowDown10 = ArrowDown10;
    exports.LucideArrowDownAZ = ArrowDownAZ;
    exports.LucideArrowDownAz = ArrowDownAZ;
    exports.LucideArrowDownCircle = CircleArrowDown;
    exports.LucideArrowDownFromLine = ArrowDownFromLine;
    exports.LucideArrowDownLeft = ArrowDownLeft;
    exports.LucideArrowDownLeftFromCircle = CircleArrowOutDownLeft;
    exports.LucideArrowDownLeftFromSquare = SquareArrowOutDownLeft;
    exports.LucideArrowDownLeftSquare = SquareArrowDownLeft;
    exports.LucideArrowDownNarrowWide = ArrowDownNarrowWide;
    exports.LucideArrowDownRight = ArrowDownRight;
    exports.LucideArrowDownRightFromCircle = CircleArrowOutDownRight;
    exports.LucideArrowDownRightFromSquare = SquareArrowOutDownRight;
    exports.LucideArrowDownRightSquare = SquareArrowDownRight;
    exports.LucideArrowDownSquare = SquareArrowDown;
    exports.LucideArrowDownToDot = ArrowDownToDot;
    exports.LucideArrowDownToLine = ArrowDownToLine;
    exports.LucideArrowDownUp = ArrowDownUp;
    exports.LucideArrowDownWideNarrow = ArrowDownWideNarrow;
    exports.LucideArrowDownZA = ArrowDownZA;
    exports.LucideArrowDownZa = ArrowDownZA;
    exports.LucideArrowLeft = ArrowLeft2;
    exports.LucideArrowLeftCircle = CircleArrowLeft;
    exports.LucideArrowLeftFromLine = ArrowLeftFromLine;
    exports.LucideArrowLeftRight = ArrowLeftRight;
    exports.LucideArrowLeftSquare = SquareArrowLeft;
    exports.LucideArrowLeftToLine = ArrowLeftToLine;
    exports.LucideArrowRight = ArrowRight;
    exports.LucideArrowRightCircle = CircleArrowRight;
    exports.LucideArrowRightFromLine = ArrowRightFromLine;
    exports.LucideArrowRightLeft = ArrowRightLeft;
    exports.LucideArrowRightSquare = SquareArrowRight;
    exports.LucideArrowRightToLine = ArrowRightToLine;
    exports.LucideArrowUp = ArrowUp;
    exports.LucideArrowUp01 = ArrowUp01;
    exports.LucideArrowUp10 = ArrowUp10;
    exports.LucideArrowUpAZ = ArrowUpAZ;
    exports.LucideArrowUpAz = ArrowUpAZ;
    exports.LucideArrowUpCircle = CircleArrowUp;
    exports.LucideArrowUpDown = ArrowUpDown;
    exports.LucideArrowUpFromDot = ArrowUpFromDot;
    exports.LucideArrowUpFromLine = ArrowUpFromLine;
    exports.LucideArrowUpLeft = ArrowUpLeft;
    exports.LucideArrowUpLeftFromCircle = CircleArrowOutUpLeft;
    exports.LucideArrowUpLeftFromSquare = SquareArrowOutUpLeft;
    exports.LucideArrowUpLeftSquare = SquareArrowUpLeft;
    exports.LucideArrowUpNarrowWide = ArrowUpNarrowWide;
    exports.LucideArrowUpRight = ArrowUpRight;
    exports.LucideArrowUpRightFromCircle = CircleArrowOutUpRight;
    exports.LucideArrowUpRightFromSquare = SquareArrowOutUpRight;
    exports.LucideArrowUpRightSquare = SquareArrowUpRight;
    exports.LucideArrowUpSquare = SquareArrowUp;
    exports.LucideArrowUpToLine = ArrowUpToLine;
    exports.LucideArrowUpWideNarrow = ArrowUpWideNarrow;
    exports.LucideArrowUpZA = ArrowUpZA;
    exports.LucideArrowUpZa = ArrowUpZA;
    exports.LucideArrowsUpFromLine = ArrowsUpFromLine;
    exports.LucideAsterisk = Asterisk;
    exports.LucideAsteriskSquare = SquareAsterisk;
    exports.LucideAtSign = AtSign;
    exports.LucideAtom = Atom;
    exports.LucideAudioLines = AudioLines;
    exports.LucideAudioWaveform = AudioWaveform;
    exports.LucideAward = Award;
    exports.LucideAxe = Axe;
    exports.LucideAxis3D = Axis3d;
    exports.LucideAxis3d = Axis3d;
    exports.LucideBaby = Baby;
    exports.LucideBackpack = Backpack;
    exports.LucideBadge = Badge;
    exports.LucideBadgeAlert = BadgeAlert;
    exports.LucideBadgeCent = BadgeCent;
    exports.LucideBadgeCheck = BadgeCheck;
    exports.LucideBadgeDollarSign = BadgeDollarSign;
    exports.LucideBadgeEuro = BadgeEuro;
    exports.LucideBadgeHelp = BadgeHelp;
    exports.LucideBadgeIndianRupee = BadgeIndianRupee;
    exports.LucideBadgeInfo = BadgeInfo;
    exports.LucideBadgeJapaneseYen = BadgeJapaneseYen;
    exports.LucideBadgeMinus = BadgeMinus;
    exports.LucideBadgePercent = BadgePercent;
    exports.LucideBadgePlus = BadgePlus;
    exports.LucideBadgePoundSterling = BadgePoundSterling;
    exports.LucideBadgeRussianRuble = BadgeRussianRuble;
    exports.LucideBadgeSwissFranc = BadgeSwissFranc;
    exports.LucideBadgeX = BadgeX;
    exports.LucideBaggageClaim = BaggageClaim;
    exports.LucideBan = Ban;
    exports.LucideBanana = Banana;
    exports.LucideBandage = Bandage;
    exports.LucideBanknote = Banknote;
    exports.LucideBarChart = ChartNoAxesColumnIncreasing;
    exports.LucideBarChart2 = ChartNoAxesColumn;
    exports.LucideBarChart3 = ChartColumn;
    exports.LucideBarChart4 = ChartColumnIncreasing;
    exports.LucideBarChartBig = ChartColumnBig;
    exports.LucideBarChartHorizontal = ChartBar;
    exports.LucideBarChartHorizontalBig = ChartBarBig;
    exports.LucideBarcode = Barcode;
    exports.LucideBaseline = Baseline;
    exports.LucideBath = Bath;
    exports.LucideBattery = Battery;
    exports.LucideBatteryCharging = BatteryCharging;
    exports.LucideBatteryFull = BatteryFull;
    exports.LucideBatteryLow = BatteryLow;
    exports.LucideBatteryMedium = BatteryMedium;
    exports.LucideBatteryWarning = BatteryWarning;
    exports.LucideBeaker = Beaker;
    exports.LucideBean = Bean;
    exports.LucideBeanOff = BeanOff;
    exports.LucideBed = Bed;
    exports.LucideBedDouble = BedDouble;
    exports.LucideBedSingle = BedSingle;
    exports.LucideBeef = Beef;
    exports.LucideBeer = Beer;
    exports.LucideBeerOff = BeerOff;
    exports.LucideBell = Bell;
    exports.LucideBellDot = BellDot;
    exports.LucideBellElectric = BellElectric;
    exports.LucideBellMinus = BellMinus;
    exports.LucideBellOff = BellOff;
    exports.LucideBellPlus = BellPlus;
    exports.LucideBellRing = BellRing;
    exports.LucideBetweenHorizonalEnd = BetweenHorizontalEnd;
    exports.LucideBetweenHorizonalStart = BetweenHorizontalStart;
    exports.LucideBetweenHorizontalEnd = BetweenHorizontalEnd;
    exports.LucideBetweenHorizontalStart = BetweenHorizontalStart;
    exports.LucideBetweenVerticalEnd = BetweenVerticalEnd;
    exports.LucideBetweenVerticalStart = BetweenVerticalStart;
    exports.LucideBicepsFlexed = BicepsFlexed;
    exports.LucideBike = Bike;
    exports.LucideBinary = Binary;
    exports.LucideBinoculars = Binoculars;
    exports.LucideBiohazard = Biohazard;
    exports.LucideBird = Bird;
    exports.LucideBitcoin = Bitcoin;
    exports.LucideBlend = Blend;
    exports.LucideBlinds = Blinds;
    exports.LucideBlocks = Blocks;
    exports.LucideBluetooth = Bluetooth;
    exports.LucideBluetoothConnected = BluetoothConnected;
    exports.LucideBluetoothOff = BluetoothOff;
    exports.LucideBluetoothSearching = BluetoothSearching;
    exports.LucideBold = Bold;
    exports.LucideBolt = Bolt;
    exports.LucideBomb = Bomb;
    exports.LucideBone = Bone;
    exports.LucideBook = Book;
    exports.LucideBookA = BookA;
    exports.LucideBookAudio = BookAudio;
    exports.LucideBookCheck = BookCheck;
    exports.LucideBookCopy = BookCopy;
    exports.LucideBookDashed = BookDashed;
    exports.LucideBookDown = BookDown;
    exports.LucideBookHeadphones = BookHeadphones;
    exports.LucideBookHeart = BookHeart;
    exports.LucideBookImage = BookImage;
    exports.LucideBookKey = BookKey;
    exports.LucideBookLock = BookLock;
    exports.LucideBookMarked = BookMarked;
    exports.LucideBookMinus = BookMinus;
    exports.LucideBookOpen = BookOpen;
    exports.LucideBookOpenCheck = BookOpenCheck;
    exports.LucideBookOpenText = BookOpenText;
    exports.LucideBookPlus = BookPlus;
    exports.LucideBookTemplate = BookDashed;
    exports.LucideBookText = BookText;
    exports.LucideBookType = BookType;
    exports.LucideBookUp = BookUp;
    exports.LucideBookUp2 = BookUp2;
    exports.LucideBookUser = BookUser;
    exports.LucideBookX = BookX;
    exports.LucideBookmark = Bookmark;
    exports.LucideBookmarkCheck = BookmarkCheck;
    exports.LucideBookmarkMinus = BookmarkMinus;
    exports.LucideBookmarkPlus = BookmarkPlus;
    exports.LucideBookmarkX = BookmarkX;
    exports.LucideBoomBox = BoomBox;
    exports.LucideBot = Bot;
    exports.LucideBotMessageSquare = BotMessageSquare;
    exports.LucideBotOff = BotOff;
    exports.LucideBox = Box;
    exports.LucideBoxSelect = SquareDashed;
    exports.LucideBoxes = Boxes;
    exports.LucideBraces = Braces;
    exports.LucideBrackets = Brackets;
    exports.LucideBrain = Brain;
    exports.LucideBrainCircuit = BrainCircuit;
    exports.LucideBrainCog = BrainCog;
    exports.LucideBrickWall = BrickWall;
    exports.LucideBriefcase = Briefcase;
    exports.LucideBriefcaseBusiness = BriefcaseBusiness;
    exports.LucideBriefcaseConveyorBelt = BriefcaseConveyorBelt;
    exports.LucideBriefcaseMedical = BriefcaseMedical;
    exports.LucideBringToFront = BringToFront;
    exports.LucideBrush = Brush;
    exports.LucideBug = Bug;
    exports.LucideBugOff = BugOff;
    exports.LucideBugPlay = BugPlay;
    exports.LucideBuilding = Building;
    exports.LucideBuilding2 = Building2;
    exports.LucideBus = Bus;
    exports.LucideBusFront = BusFront;
    exports.LucideCable = Cable;
    exports.LucideCableCar = CableCar;
    exports.LucideCake = Cake;
    exports.LucideCakeSlice = CakeSlice;
    exports.LucideCalculator = Calculator;
    exports.LucideCalendar = Calendar2;
    exports.LucideCalendar1 = Calendar1;
    exports.LucideCalendarArrowDown = CalendarArrowDown;
    exports.LucideCalendarArrowUp = CalendarArrowUp;
    exports.LucideCalendarCheck = CalendarCheck;
    exports.LucideCalendarCheck2 = CalendarCheck2;
    exports.LucideCalendarClock = CalendarClock;
    exports.LucideCalendarCog = CalendarCog;
    exports.LucideCalendarDays = CalendarDays;
    exports.LucideCalendarFold = CalendarFold;
    exports.LucideCalendarHeart = CalendarHeart;
    exports.LucideCalendarMinus = CalendarMinus;
    exports.LucideCalendarMinus2 = CalendarMinus2;
    exports.LucideCalendarOff = CalendarOff;
    exports.LucideCalendarPlus = CalendarPlus;
    exports.LucideCalendarPlus2 = CalendarPlus2;
    exports.LucideCalendarRange = CalendarRange;
    exports.LucideCalendarSearch = CalendarSearch;
    exports.LucideCalendarSync = CalendarSync;
    exports.LucideCalendarX = CalendarX;
    exports.LucideCalendarX2 = CalendarX2;
    exports.LucideCamera = Camera;
    exports.LucideCameraOff = CameraOff;
    exports.LucideCandlestickChart = ChartCandlestick;
    exports.LucideCandy = Candy;
    exports.LucideCandyCane = CandyCane;
    exports.LucideCandyOff = CandyOff;
    exports.LucideCannabis = Cannabis;
    exports.LucideCaptions = Captions;
    exports.LucideCaptionsOff = CaptionsOff;
    exports.LucideCar = Car;
    exports.LucideCarFront = CarFront;
    exports.LucideCarTaxiFront = CarTaxiFront;
    exports.LucideCaravan = Caravan;
    exports.LucideCarrot = Carrot;
    exports.LucideCaseLower = CaseLower;
    exports.LucideCaseSensitive = CaseSensitive;
    exports.LucideCaseUpper = CaseUpper;
    exports.LucideCassetteTape = CassetteTape;
    exports.LucideCast = Cast;
    exports.LucideCastle = Castle;
    exports.LucideCat = Cat;
    exports.LucideCctv = Cctv;
    exports.LucideChartArea = ChartArea;
    exports.LucideChartBar = ChartBar;
    exports.LucideChartBarBig = ChartBarBig;
    exports.LucideChartBarDecreasing = ChartBarDecreasing;
    exports.LucideChartBarIncreasing = ChartBarIncreasing;
    exports.LucideChartBarStacked = ChartBarStacked;
    exports.LucideChartCandlestick = ChartCandlestick;
    exports.LucideChartColumn = ChartColumn;
    exports.LucideChartColumnBig = ChartColumnBig;
    exports.LucideChartColumnDecreasing = ChartColumnDecreasing;
    exports.LucideChartColumnIncreasing = ChartColumnIncreasing;
    exports.LucideChartColumnStacked = ChartColumnStacked;
    exports.LucideChartGantt = ChartGantt;
    exports.LucideChartLine = ChartLine;
    exports.LucideChartNetwork = ChartNetwork;
    exports.LucideChartNoAxesColumn = ChartNoAxesColumn;
    exports.LucideChartNoAxesColumnDecreasing = ChartNoAxesColumnDecreasing;
    exports.LucideChartNoAxesColumnIncreasing = ChartNoAxesColumnIncreasing;
    exports.LucideChartNoAxesCombined = ChartNoAxesCombined;
    exports.LucideChartNoAxesGantt = ChartNoAxesGantt;
    exports.LucideChartPie = ChartPie;
    exports.LucideChartScatter = ChartScatter;
    exports.LucideChartSpline = ChartSpline;
    exports.LucideCheck = Check;
    exports.LucideCheckCheck = CheckCheck;
    exports.LucideCheckCircle = CircleCheckBig;
    exports.LucideCheckCircle2 = CircleCheck;
    exports.LucideCheckSquare = SquareCheckBig;
    exports.LucideCheckSquare2 = SquareCheck;
    exports.LucideChefHat = ChefHat;
    exports.LucideCherry = Cherry;
    exports.LucideChevronDown = ChevronDown;
    exports.LucideChevronDownCircle = CircleChevronDown;
    exports.LucideChevronDownSquare = SquareChevronDown;
    exports.LucideChevronFirst = ChevronFirst;
    exports.LucideChevronLast = ChevronLast;
    exports.LucideChevronLeft = ChevronLeft;
    exports.LucideChevronLeftCircle = CircleChevronLeft;
    exports.LucideChevronLeftSquare = SquareChevronLeft;
    exports.LucideChevronRight = ChevronRight;
    exports.LucideChevronRightCircle = CircleChevronRight;
    exports.LucideChevronRightSquare = SquareChevronRight;
    exports.LucideChevronUp = ChevronUp;
    exports.LucideChevronUpCircle = CircleChevronUp;
    exports.LucideChevronUpSquare = SquareChevronUp;
    exports.LucideChevronsDown = ChevronsDown;
    exports.LucideChevronsDownUp = ChevronsDownUp;
    exports.LucideChevronsLeft = ChevronsLeft;
    exports.LucideChevronsLeftRight = ChevronsLeftRight;
    exports.LucideChevronsLeftRightEllipsis = ChevronsLeftRightEllipsis;
    exports.LucideChevronsRight = ChevronsRight;
    exports.LucideChevronsRightLeft = ChevronsRightLeft;
    exports.LucideChevronsUp = ChevronsUp;
    exports.LucideChevronsUpDown = ChevronsUpDown;
    exports.LucideChrome = Chrome;
    exports.LucideChurch = Church;
    exports.LucideCigarette = Cigarette;
    exports.LucideCigaretteOff = CigaretteOff;
    exports.LucideCircle = Circle;
    exports.LucideCircleAlert = CircleAlert;
    exports.LucideCircleArrowDown = CircleArrowDown;
    exports.LucideCircleArrowLeft = CircleArrowLeft;
    exports.LucideCircleArrowOutDownLeft = CircleArrowOutDownLeft;
    exports.LucideCircleArrowOutDownRight = CircleArrowOutDownRight;
    exports.LucideCircleArrowOutUpLeft = CircleArrowOutUpLeft;
    exports.LucideCircleArrowOutUpRight = CircleArrowOutUpRight;
    exports.LucideCircleArrowRight = CircleArrowRight;
    exports.LucideCircleArrowUp = CircleArrowUp;
    exports.LucideCircleCheck = CircleCheck;
    exports.LucideCircleCheckBig = CircleCheckBig;
    exports.LucideCircleChevronDown = CircleChevronDown;
    exports.LucideCircleChevronLeft = CircleChevronLeft;
    exports.LucideCircleChevronRight = CircleChevronRight;
    exports.LucideCircleChevronUp = CircleChevronUp;
    exports.LucideCircleDashed = CircleDashed;
    exports.LucideCircleDivide = CircleDivide;
    exports.LucideCircleDollarSign = CircleDollarSign;
    exports.LucideCircleDot = CircleDot;
    exports.LucideCircleDotDashed = CircleDotDashed;
    exports.LucideCircleEllipsis = CircleEllipsis;
    exports.LucideCircleEqual = CircleEqual;
    exports.LucideCircleFadingArrowUp = CircleFadingArrowUp;
    exports.LucideCircleFadingPlus = CircleFadingPlus;
    exports.LucideCircleGauge = CircleGauge;
    exports.LucideCircleHelp = CircleHelp;
    exports.LucideCircleMinus = CircleMinus;
    exports.LucideCircleOff = CircleOff;
    exports.LucideCircleParking = CircleParking;
    exports.LucideCircleParkingOff = CircleParkingOff;
    exports.LucideCirclePause = CirclePause;
    exports.LucideCirclePercent = CirclePercent;
    exports.LucideCirclePlay = CirclePlay;
    exports.LucideCirclePlus = CirclePlus;
    exports.LucideCirclePower = CirclePower;
    exports.LucideCircleSlash = CircleSlash;
    exports.LucideCircleSlash2 = CircleSlash2;
    exports.LucideCircleSlashed = CircleSlash2;
    exports.LucideCircleStop = CircleStop;
    exports.LucideCircleUser = CircleUser;
    exports.LucideCircleUserRound = CircleUserRound;
    exports.LucideCircleX = CircleX;
    exports.LucideCircuitBoard = CircuitBoard;
    exports.LucideCitrus = Citrus;
    exports.LucideClapperboard = Clapperboard;
    exports.LucideClipboard = Clipboard;
    exports.LucideClipboardCheck = ClipboardCheck;
    exports.LucideClipboardCopy = ClipboardCopy;
    exports.LucideClipboardEdit = ClipboardPen;
    exports.LucideClipboardList = ClipboardList;
    exports.LucideClipboardMinus = ClipboardMinus;
    exports.LucideClipboardPaste = ClipboardPaste;
    exports.LucideClipboardPen = ClipboardPen;
    exports.LucideClipboardPenLine = ClipboardPenLine;
    exports.LucideClipboardPlus = ClipboardPlus;
    exports.LucideClipboardSignature = ClipboardPenLine;
    exports.LucideClipboardType = ClipboardType;
    exports.LucideClipboardX = ClipboardX;
    exports.LucideClock = Clock13;
    exports.LucideClock1 = Clock1;
    exports.LucideClock10 = Clock10;
    exports.LucideClock11 = Clock11;
    exports.LucideClock12 = Clock12;
    exports.LucideClock2 = Clock2;
    exports.LucideClock3 = Clock3;
    exports.LucideClock4 = Clock4;
    exports.LucideClock5 = Clock5;
    exports.LucideClock6 = Clock6;
    exports.LucideClock7 = Clock7;
    exports.LucideClock8 = Clock8;
    exports.LucideClock9 = Clock9;
    exports.LucideClockAlert = ClockAlert;
    exports.LucideClockArrowDown = ClockArrowDown;
    exports.LucideClockArrowUp = ClockArrowUp;
    exports.LucideCloud = Cloud;
    exports.LucideCloudAlert = CloudAlert;
    exports.LucideCloudCog = CloudCog;
    exports.LucideCloudDownload = CloudDownload;
    exports.LucideCloudDrizzle = CloudDrizzle;
    exports.LucideCloudFog = CloudFog;
    exports.LucideCloudHail = CloudHail;
    exports.LucideCloudLightning = CloudLightning;
    exports.LucideCloudMoon = CloudMoon;
    exports.LucideCloudMoonRain = CloudMoonRain;
    exports.LucideCloudOff = CloudOff;
    exports.LucideCloudRain = CloudRain;
    exports.LucideCloudRainWind = CloudRainWind;
    exports.LucideCloudSnow = CloudSnow;
    exports.LucideCloudSun = CloudSun;
    exports.LucideCloudSunRain = CloudSunRain;
    exports.LucideCloudUpload = CloudUpload;
    exports.LucideCloudy = Cloudy;
    exports.LucideClover = Clover;
    exports.LucideClub = Club;
    exports.LucideCode = Code;
    exports.LucideCode2 = CodeXml;
    exports.LucideCodeSquare = SquareCode;
    exports.LucideCodeXml = CodeXml;
    exports.LucideCodepen = Codepen;
    exports.LucideCodesandbox = Codesandbox;
    exports.LucideCoffee = Coffee;
    exports.LucideCog = Cog;
    exports.LucideCoins = Coins;
    exports.LucideColumns = Columns2;
    exports.LucideColumns2 = Columns2;
    exports.LucideColumns3 = Columns3;
    exports.LucideColumns4 = Columns4;
    exports.LucideCombine = Combine;
    exports.LucideCommand = Command;
    exports.LucideCompass = Compass;
    exports.LucideComponent = Component;
    exports.LucideComputer = Computer;
    exports.LucideConciergeBell = ConciergeBell;
    exports.LucideCone = Cone;
    exports.LucideConstruction = Construction;
    exports.LucideContact = Contact;
    exports.LucideContact2 = ContactRound;
    exports.LucideContactRound = ContactRound;
    exports.LucideContainer = Container;
    exports.LucideContrast = Contrast;
    exports.LucideCookie = Cookie;
    exports.LucideCookingPot = CookingPot;
    exports.LucideCopy = Copy;
    exports.LucideCopyCheck = CopyCheck;
    exports.LucideCopyMinus = CopyMinus;
    exports.LucideCopyPlus = CopyPlus;
    exports.LucideCopySlash = CopySlash;
    exports.LucideCopyX = CopyX;
    exports.LucideCopyleft = Copyleft;
    exports.LucideCopyright = Copyright;
    exports.LucideCornerDownLeft = CornerDownLeft;
    exports.LucideCornerDownRight = CornerDownRight;
    exports.LucideCornerLeftDown = CornerLeftDown;
    exports.LucideCornerLeftUp = CornerLeftUp;
    exports.LucideCornerRightDown = CornerRightDown;
    exports.LucideCornerRightUp = CornerRightUp;
    exports.LucideCornerUpLeft = CornerUpLeft;
    exports.LucideCornerUpRight = CornerUpRight;
    exports.LucideCpu = Cpu;
    exports.LucideCreativeCommons = CreativeCommons;
    exports.LucideCreditCard = CreditCard;
    exports.LucideCroissant = Croissant;
    exports.LucideCrop = Crop;
    exports.LucideCross = Cross;
    exports.LucideCrosshair = Crosshair;
    exports.LucideCrown = Crown;
    exports.LucideCuboid = Cuboid;
    exports.LucideCupSoda = CupSoda;
    exports.LucideCurlyBraces = Braces;
    exports.LucideCurrency = Currency;
    exports.LucideCylinder = Cylinder;
    exports.LucideDam = Dam;
    exports.LucideDatabase = Database;
    exports.LucideDatabaseBackup = DatabaseBackup;
    exports.LucideDatabaseZap = DatabaseZap;
    exports.LucideDelete = Delete;
    exports.LucideDessert = Dessert;
    exports.LucideDiameter = Diameter;
    exports.LucideDiamond = Diamond;
    exports.LucideDiamondMinus = DiamondMinus;
    exports.LucideDiamondPercent = DiamondPercent;
    exports.LucideDiamondPlus = DiamondPlus;
    exports.LucideDice1 = Dice1;
    exports.LucideDice2 = Dice2;
    exports.LucideDice3 = Dice3;
    exports.LucideDice4 = Dice4;
    exports.LucideDice5 = Dice5;
    exports.LucideDice6 = Dice6;
    exports.LucideDices = Dices;
    exports.LucideDiff = Diff;
    exports.LucideDisc = Disc;
    exports.LucideDisc2 = Disc2;
    exports.LucideDisc3 = Disc3;
    exports.LucideDiscAlbum = DiscAlbum;
    exports.LucideDivide = Divide;
    exports.LucideDivideCircle = CircleDivide;
    exports.LucideDivideSquare = SquareDivide;
    exports.LucideDna = Dna;
    exports.LucideDnaOff = DnaOff;
    exports.LucideDock = Dock;
    exports.LucideDog = Dog;
    exports.LucideDollarSign = DollarSign;
    exports.LucideDonut = Donut;
    exports.LucideDoorClosed = DoorClosed;
    exports.LucideDoorOpen = DoorOpen;
    exports.LucideDot = Dot;
    exports.LucideDotSquare = SquareDot;
    exports.LucideDownload = Download;
    exports.LucideDownloadCloud = CloudDownload;
    exports.LucideDraftingCompass = DraftingCompass;
    exports.LucideDrama = Drama;
    exports.LucideDribbble = Dribbble;
    exports.LucideDrill = Drill;
    exports.LucideDroplet = Droplet;
    exports.LucideDroplets = Droplets;
    exports.LucideDrum = Drum;
    exports.LucideDrumstick = Drumstick;
    exports.LucideDumbbell = Dumbbell;
    exports.LucideEar = Ear;
    exports.LucideEarOff = EarOff;
    exports.LucideEarth = Earth;
    exports.LucideEarthLock = EarthLock;
    exports.LucideEclipse = Eclipse;
    exports.LucideEdit = SquarePen;
    exports.LucideEdit2 = Pen;
    exports.LucideEdit3 = PenLine;
    exports.LucideEgg = Egg;
    exports.LucideEggFried = EggFried;
    exports.LucideEggOff = EggOff;
    exports.LucideEllipsis = Ellipsis;
    exports.LucideEllipsisVertical = EllipsisVertical;
    exports.LucideEqual = Equal;
    exports.LucideEqualApproximately = EqualApproximately;
    exports.LucideEqualNot = EqualNot;
    exports.LucideEqualSquare = SquareEqual;
    exports.LucideEraser = Eraser;
    exports.LucideEthernetPort = EthernetPort;
    exports.LucideEuro = Euro;
    exports.LucideExpand = Expand;
    exports.LucideExternalLink = ExternalLink;
    exports.LucideEye = Eye;
    exports.LucideEyeClosed = EyeClosed;
    exports.LucideEyeOff = EyeOff;
    exports.LucideFacebook = Facebook;
    exports.LucideFactory = Factory;
    exports.LucideFan = Fan;
    exports.LucideFastForward = FastForward;
    exports.LucideFeather = Feather;
    exports.LucideFence = Fence;
    exports.LucideFerrisWheel = FerrisWheel;
    exports.LucideFigma = Figma;
    exports.LucideFile = File;
    exports.LucideFileArchive = FileArchive;
    exports.LucideFileAudio = FileAudio;
    exports.LucideFileAudio2 = FileAudio2;
    exports.LucideFileAxis3D = FileAxis3d;
    exports.LucideFileAxis3d = FileAxis3d;
    exports.LucideFileBadge = FileBadge;
    exports.LucideFileBadge2 = FileBadge2;
    exports.LucideFileBarChart = FileChartColumnIncreasing;
    exports.LucideFileBarChart2 = FileChartColumn;
    exports.LucideFileBox = FileBox;
    exports.LucideFileChartColumn = FileChartColumn;
    exports.LucideFileChartColumnIncreasing = FileChartColumnIncreasing;
    exports.LucideFileChartLine = FileChartLine;
    exports.LucideFileChartPie = FileChartPie;
    exports.LucideFileCheck = FileCheck;
    exports.LucideFileCheck2 = FileCheck2;
    exports.LucideFileClock = FileClock;
    exports.LucideFileCode = FileCode;
    exports.LucideFileCode2 = FileCode2;
    exports.LucideFileCog = FileCog;
    exports.LucideFileCog2 = FileCog;
    exports.LucideFileDiff = FileDiff;
    exports.LucideFileDigit = FileDigit;
    exports.LucideFileDown = FileDown;
    exports.LucideFileEdit = FilePen;
    exports.LucideFileHeart = FileHeart;
    exports.LucideFileImage = FileImage;
    exports.LucideFileInput = FileInput;
    exports.LucideFileJson = FileJson;
    exports.LucideFileJson2 = FileJson2;
    exports.LucideFileKey = FileKey;
    exports.LucideFileKey2 = FileKey2;
    exports.LucideFileLineChart = FileChartLine;
    exports.LucideFileLock = FileLock;
    exports.LucideFileLock2 = FileLock2;
    exports.LucideFileMinus = FileMinus;
    exports.LucideFileMinus2 = FileMinus2;
    exports.LucideFileMusic = FileMusic;
    exports.LucideFileOutput = FileOutput;
    exports.LucideFilePen = FilePen;
    exports.LucideFilePenLine = FilePenLine;
    exports.LucideFilePieChart = FileChartPie;
    exports.LucideFilePlus = FilePlus;
    exports.LucideFilePlus2 = FilePlus2;
    exports.LucideFileQuestion = FileQuestion;
    exports.LucideFileScan = FileScan;
    exports.LucideFileSearch = FileSearch;
    exports.LucideFileSearch2 = FileSearch2;
    exports.LucideFileSignature = FilePenLine;
    exports.LucideFileSliders = FileSliders;
    exports.LucideFileSpreadsheet = FileSpreadsheet;
    exports.LucideFileStack = FileStack;
    exports.LucideFileSymlink = FileSymlink;
    exports.LucideFileTerminal = FileTerminal;
    exports.LucideFileText = FileText;
    exports.LucideFileType = FileType;
    exports.LucideFileType2 = FileType2;
    exports.LucideFileUp = FileUp;
    exports.LucideFileUser = FileUser;
    exports.LucideFileVideo = FileVideo;
    exports.LucideFileVideo2 = FileVideo2;
    exports.LucideFileVolume = FileVolume;
    exports.LucideFileVolume2 = FileVolume2;
    exports.LucideFileWarning = FileWarning;
    exports.LucideFileX = FileX;
    exports.LucideFileX2 = FileX2;
    exports.LucideFiles = Files;
    exports.LucideFilm = Film;
    exports.LucideFilter = Filter;
    exports.LucideFilterX = FilterX;
    exports.LucideFingerprint = Fingerprint;
    exports.LucideFireExtinguisher = FireExtinguisher;
    exports.LucideFish = Fish;
    exports.LucideFishOff = FishOff;
    exports.LucideFishSymbol = FishSymbol;
    exports.LucideFlag = Flag;
    exports.LucideFlagOff = FlagOff;
    exports.LucideFlagTriangleLeft = FlagTriangleLeft;
    exports.LucideFlagTriangleRight = FlagTriangleRight;
    exports.LucideFlame = Flame;
    exports.LucideFlameKindling = FlameKindling;
    exports.LucideFlashlight = Flashlight;
    exports.LucideFlashlightOff = FlashlightOff;
    exports.LucideFlaskConical = FlaskConical;
    exports.LucideFlaskConicalOff = FlaskConicalOff;
    exports.LucideFlaskRound = FlaskRound;
    exports.LucideFlipHorizontal = FlipHorizontal;
    exports.LucideFlipHorizontal2 = FlipHorizontal2;
    exports.LucideFlipVertical = FlipVertical;
    exports.LucideFlipVertical2 = FlipVertical2;
    exports.LucideFlower = Flower;
    exports.LucideFlower2 = Flower2;
    exports.LucideFocus = Focus;
    exports.LucideFoldHorizontal = FoldHorizontal;
    exports.LucideFoldVertical = FoldVertical;
    exports.LucideFolder = Folder;
    exports.LucideFolderArchive = FolderArchive;
    exports.LucideFolderCheck = FolderCheck;
    exports.LucideFolderClock = FolderClock;
    exports.LucideFolderClosed = FolderClosed;
    exports.LucideFolderCode = FolderCode;
    exports.LucideFolderCog = FolderCog;
    exports.LucideFolderCog2 = FolderCog;
    exports.LucideFolderDot = FolderDot;
    exports.LucideFolderDown = FolderDown;
    exports.LucideFolderEdit = FolderPen;
    exports.LucideFolderGit = FolderGit;
    exports.LucideFolderGit2 = FolderGit2;
    exports.LucideFolderHeart = FolderHeart;
    exports.LucideFolderInput = FolderInput;
    exports.LucideFolderKanban = FolderKanban;
    exports.LucideFolderKey = FolderKey;
    exports.LucideFolderLock = FolderLock;
    exports.LucideFolderMinus = FolderMinus;
    exports.LucideFolderOpen = FolderOpen;
    exports.LucideFolderOpenDot = FolderOpenDot;
    exports.LucideFolderOutput = FolderOutput;
    exports.LucideFolderPen = FolderPen;
    exports.LucideFolderPlus = FolderPlus;
    exports.LucideFolderRoot = FolderRoot;
    exports.LucideFolderSearch = FolderSearch;
    exports.LucideFolderSearch2 = FolderSearch2;
    exports.LucideFolderSymlink = FolderSymlink;
    exports.LucideFolderSync = FolderSync;
    exports.LucideFolderTree = FolderTree;
    exports.LucideFolderUp = FolderUp;
    exports.LucideFolderX = FolderX;
    exports.LucideFolders = Folders;
    exports.LucideFootprints = Footprints;
    exports.LucideForkKnife = Utensils;
    exports.LucideForkKnifeCrossed = UtensilsCrossed;
    exports.LucideForklift = Forklift;
    exports.LucideFormInput = RectangleEllipsis;
    exports.LucideForward = Forward;
    exports.LucideFrame = Frame;
    exports.LucideFramer = Framer;
    exports.LucideFrown = Frown;
    exports.LucideFuel = Fuel;
    exports.LucideFullscreen = Fullscreen;
    exports.LucideFunctionSquare = SquareFunction;
    exports.LucideGalleryHorizontal = GalleryHorizontal;
    exports.LucideGalleryHorizontalEnd = GalleryHorizontalEnd;
    exports.LucideGalleryThumbnails = GalleryThumbnails;
    exports.LucideGalleryVertical = GalleryVertical;
    exports.LucideGalleryVerticalEnd = GalleryVerticalEnd;
    exports.LucideGamepad = Gamepad;
    exports.LucideGamepad2 = Gamepad2;
    exports.LucideGanttChart = ChartNoAxesGantt;
    exports.LucideGanttChartSquare = SquareChartGantt;
    exports.LucideGauge = Gauge;
    exports.LucideGaugeCircle = CircleGauge;
    exports.LucideGavel = Gavel;
    exports.LucideGem = Gem;
    exports.LucideGhost = Ghost;
    exports.LucideGift = Gift;
    exports.LucideGitBranch = GitBranch;
    exports.LucideGitBranchPlus = GitBranchPlus;
    exports.LucideGitCommit = GitCommitHorizontal;
    exports.LucideGitCommitHorizontal = GitCommitHorizontal;
    exports.LucideGitCommitVertical = GitCommitVertical;
    exports.LucideGitCompare = GitCompare;
    exports.LucideGitCompareArrows = GitCompareArrows;
    exports.LucideGitFork = GitFork;
    exports.LucideGitGraph = GitGraph;
    exports.LucideGitMerge = GitMerge;
    exports.LucideGitPullRequest = GitPullRequest;
    exports.LucideGitPullRequestArrow = GitPullRequestArrow;
    exports.LucideGitPullRequestClosed = GitPullRequestClosed;
    exports.LucideGitPullRequestCreate = GitPullRequestCreate;
    exports.LucideGitPullRequestCreateArrow = GitPullRequestCreateArrow;
    exports.LucideGitPullRequestDraft = GitPullRequestDraft;
    exports.LucideGithub = Github;
    exports.LucideGitlab = Gitlab;
    exports.LucideGlassWater = GlassWater;
    exports.LucideGlasses = Glasses;
    exports.LucideGlobe = Globe;
    exports.LucideGlobe2 = Earth;
    exports.LucideGlobeLock = GlobeLock;
    exports.LucideGoal = Goal;
    exports.LucideGrab = Grab;
    exports.LucideGraduationCap = GraduationCap;
    exports.LucideGrape = Grape;
    exports.LucideGrid = Grid3x3;
    exports.LucideGrid2X2 = Grid2x2;
    exports.LucideGrid2X2Plus = Grid2x2Plus;
    exports.LucideGrid2x2 = Grid2x2;
    exports.LucideGrid2x2Check = Grid2x2Check;
    exports.LucideGrid2x2Plus = Grid2x2Plus;
    exports.LucideGrid2x2X = Grid2x2X;
    exports.LucideGrid3X3 = Grid3x3;
    exports.LucideGrid3x3 = Grid3x3;
    exports.LucideGrip = Grip;
    exports.LucideGripHorizontal = GripHorizontal;
    exports.LucideGripVertical = GripVertical;
    exports.LucideGroup = Group;
    exports.LucideGuitar = Guitar;
    exports.LucideHam = Ham;
    exports.LucideHammer = Hammer;
    exports.LucideHand = Hand;
    exports.LucideHandCoins = HandCoins;
    exports.LucideHandHeart = HandHeart;
    exports.LucideHandHelping = HandHelping;
    exports.LucideHandMetal = HandMetal;
    exports.LucideHandPlatter = HandPlatter;
    exports.LucideHandshake = Handshake;
    exports.LucideHardDrive = HardDrive;
    exports.LucideHardDriveDownload = HardDriveDownload;
    exports.LucideHardDriveUpload = HardDriveUpload;
    exports.LucideHardHat = HardHat;
    exports.LucideHash = Hash;
    exports.LucideHaze = Haze;
    exports.LucideHdmiPort = HdmiPort;
    exports.LucideHeading = Heading;
    exports.LucideHeading1 = Heading1;
    exports.LucideHeading2 = Heading2;
    exports.LucideHeading3 = Heading3;
    exports.LucideHeading4 = Heading4;
    exports.LucideHeading5 = Heading5;
    exports.LucideHeading6 = Heading6;
    exports.LucideHeadphoneOff = HeadphoneOff;
    exports.LucideHeadphones = Headphones;
    exports.LucideHeadset = Headset;
    exports.LucideHeart = Heart;
    exports.LucideHeartCrack = HeartCrack;
    exports.LucideHeartHandshake = HeartHandshake;
    exports.LucideHeartOff = HeartOff;
    exports.LucideHeartPulse = HeartPulse;
    exports.LucideHeater = Heater;
    exports.LucideHelpCircle = CircleHelp;
    exports.LucideHelpingHand = HandHelping;
    exports.LucideHexagon = Hexagon;
    exports.LucideHighlighter = Highlighter;
    exports.LucideHistory = History;
    exports.LucideHome = House;
    exports.LucideHop = Hop;
    exports.LucideHopOff = HopOff;
    exports.LucideHospital = Hospital;
    exports.LucideHotel = Hotel;
    exports.LucideHourglass = Hourglass;
    exports.LucideHouse = House;
    exports.LucideHousePlug = HousePlug;
    exports.LucideHousePlus = HousePlus;
    exports.LucideIceCream = IceCreamCone;
    exports.LucideIceCream2 = IceCreamBowl;
    exports.LucideIceCreamBowl = IceCreamBowl;
    exports.LucideIceCreamCone = IceCreamCone;
    exports.LucideIdCard = IdCard;
    exports.LucideImage = Image;
    exports.LucideImageDown = ImageDown;
    exports.LucideImageMinus = ImageMinus;
    exports.LucideImageOff = ImageOff;
    exports.LucideImagePlay = ImagePlay;
    exports.LucideImagePlus = ImagePlus;
    exports.LucideImageUp = ImageUp;
    exports.LucideImageUpscale = ImageUpscale;
    exports.LucideImages = Images;
    exports.LucideImport = Import;
    exports.LucideInbox = Inbox;
    exports.LucideIndent = IndentIncrease;
    exports.LucideIndentDecrease = IndentDecrease;
    exports.LucideIndentIncrease = IndentIncrease;
    exports.LucideIndianRupee = IndianRupee;
    exports.LucideInfinity = Infinity2;
    exports.LucideInfo = Info;
    exports.LucideInspect = SquareMousePointer;
    exports.LucideInspectionPanel = InspectionPanel;
    exports.LucideInstagram = Instagram;
    exports.LucideItalic = Italic;
    exports.LucideIterationCcw = IterationCcw;
    exports.LucideIterationCw = IterationCw;
    exports.LucideJapaneseYen = JapaneseYen;
    exports.LucideJoystick = Joystick;
    exports.LucideKanban = Kanban;
    exports.LucideKanbanSquare = SquareKanban;
    exports.LucideKanbanSquareDashed = SquareDashedKanban;
    exports.LucideKey = Key;
    exports.LucideKeyRound = KeyRound;
    exports.LucideKeySquare = KeySquare;
    exports.LucideKeyboard = Keyboard;
    exports.LucideKeyboardMusic = KeyboardMusic;
    exports.LucideKeyboardOff = KeyboardOff;
    exports.LucideLamp = Lamp;
    exports.LucideLampCeiling = LampCeiling;
    exports.LucideLampDesk = LampDesk;
    exports.LucideLampFloor = LampFloor;
    exports.LucideLampWallDown = LampWallDown;
    exports.LucideLampWallUp = LampWallUp;
    exports.LucideLandPlot = LandPlot;
    exports.LucideLandmark = Landmark;
    exports.LucideLanguages = Languages;
    exports.LucideLaptop = Laptop;
    exports.LucideLaptop2 = LaptopMinimal;
    exports.LucideLaptopMinimal = LaptopMinimal;
    exports.LucideLaptopMinimalCheck = LaptopMinimalCheck;
    exports.LucideLasso = Lasso;
    exports.LucideLassoSelect = LassoSelect;
    exports.LucideLaugh = Laugh;
    exports.LucideLayers = Layers;
    exports.LucideLayers2 = Layers2;
    exports.LucideLayers3 = Layers3;
    exports.LucideLayout = PanelsTopLeft;
    exports.LucideLayoutDashboard = LayoutDashboard;
    exports.LucideLayoutGrid = LayoutGrid;
    exports.LucideLayoutList = LayoutList;
    exports.LucideLayoutPanelLeft = LayoutPanelLeft;
    exports.LucideLayoutPanelTop = LayoutPanelTop;
    exports.LucideLayoutTemplate = LayoutTemplate;
    exports.LucideLeaf = Leaf;
    exports.LucideLeafyGreen = LeafyGreen;
    exports.LucideLectern = Lectern;
    exports.LucideLetterText = LetterText;
    exports.LucideLibrary = Library;
    exports.LucideLibraryBig = LibraryBig;
    exports.LucideLibrarySquare = SquareLibrary;
    exports.LucideLifeBuoy = LifeBuoy;
    exports.LucideLigature = Ligature;
    exports.LucideLightbulb = Lightbulb;
    exports.LucideLightbulbOff = LightbulbOff;
    exports.LucideLineChart = ChartLine;
    exports.LucideLink = Link3;
    exports.LucideLink2 = Link2;
    exports.LucideLink2Off = Link2Off;
    exports.LucideLinkedin = Linkedin;
    exports.LucideList = List;
    exports.LucideListCheck = ListCheck;
    exports.LucideListChecks = ListChecks;
    exports.LucideListCollapse = ListCollapse;
    exports.LucideListEnd = ListEnd;
    exports.LucideListFilter = ListFilter;
    exports.LucideListMinus = ListMinus;
    exports.LucideListMusic = ListMusic;
    exports.LucideListOrdered = ListOrdered;
    exports.LucideListPlus = ListPlus;
    exports.LucideListRestart = ListRestart;
    exports.LucideListStart = ListStart;
    exports.LucideListTodo = ListTodo;
    exports.LucideListTree = ListTree;
    exports.LucideListVideo = ListVideo;
    exports.LucideListX = ListX;
    exports.LucideLoader = Loader;
    exports.LucideLoader2 = LoaderCircle;
    exports.LucideLoaderCircle = LoaderCircle;
    exports.LucideLoaderPinwheel = LoaderPinwheel;
    exports.LucideLocate = Locate;
    exports.LucideLocateFixed = LocateFixed;
    exports.LucideLocateOff = LocateOff;
    exports.LucideLock = Lock;
    exports.LucideLockKeyhole = LockKeyhole;
    exports.LucideLockKeyholeOpen = LockKeyholeOpen;
    exports.LucideLockOpen = LockOpen;
    exports.LucideLogIn = LogIn;
    exports.LucideLogOut = LogOut;
    exports.LucideLogs = Logs;
    exports.LucideLollipop = Lollipop;
    exports.LucideLuggage = Luggage;
    exports.LucideMSquare = SquareM;
    exports.LucideMagnet = Magnet;
    exports.LucideMail = Mail;
    exports.LucideMailCheck = MailCheck;
    exports.LucideMailMinus = MailMinus;
    exports.LucideMailOpen = MailOpen;
    exports.LucideMailPlus = MailPlus;
    exports.LucideMailQuestion = MailQuestion;
    exports.LucideMailSearch = MailSearch;
    exports.LucideMailWarning = MailWarning;
    exports.LucideMailX = MailX;
    exports.LucideMailbox = Mailbox;
    exports.LucideMails = Mails;
    exports.LucideMap = Map2;
    exports.LucideMapPin = MapPin;
    exports.LucideMapPinCheck = MapPinCheck;
    exports.LucideMapPinCheckInside = MapPinCheckInside;
    exports.LucideMapPinHouse = MapPinHouse;
    exports.LucideMapPinMinus = MapPinMinus;
    exports.LucideMapPinMinusInside = MapPinMinusInside;
    exports.LucideMapPinOff = MapPinOff;
    exports.LucideMapPinPlus = MapPinPlus;
    exports.LucideMapPinPlusInside = MapPinPlusInside;
    exports.LucideMapPinX = MapPinX;
    exports.LucideMapPinXInside = MapPinXInside;
    exports.LucideMapPinned = MapPinned;
    exports.LucideMartini = Martini;
    exports.LucideMaximize = Maximize;
    exports.LucideMaximize2 = Maximize2;
    exports.LucideMedal = Medal;
    exports.LucideMegaphone = Megaphone;
    exports.LucideMegaphoneOff = MegaphoneOff;
    exports.LucideMeh = Meh;
    exports.LucideMemoryStick = MemoryStick;
    exports.LucideMenu = Menu;
    exports.LucideMenuSquare = SquareMenu;
    exports.LucideMerge = Merge;
    exports.LucideMessageCircle = MessageCircle;
    exports.LucideMessageCircleCode = MessageCircleCode;
    exports.LucideMessageCircleDashed = MessageCircleDashed;
    exports.LucideMessageCircleHeart = MessageCircleHeart;
    exports.LucideMessageCircleMore = MessageCircleMore;
    exports.LucideMessageCircleOff = MessageCircleOff;
    exports.LucideMessageCirclePlus = MessageCirclePlus;
    exports.LucideMessageCircleQuestion = MessageCircleQuestion;
    exports.LucideMessageCircleReply = MessageCircleReply;
    exports.LucideMessageCircleWarning = MessageCircleWarning;
    exports.LucideMessageCircleX = MessageCircleX;
    exports.LucideMessageSquare = MessageSquare;
    exports.LucideMessageSquareCode = MessageSquareCode;
    exports.LucideMessageSquareDashed = MessageSquareDashed;
    exports.LucideMessageSquareDiff = MessageSquareDiff;
    exports.LucideMessageSquareDot = MessageSquareDot;
    exports.LucideMessageSquareHeart = MessageSquareHeart;
    exports.LucideMessageSquareLock = MessageSquareLock;
    exports.LucideMessageSquareMore = MessageSquareMore;
    exports.LucideMessageSquareOff = MessageSquareOff;
    exports.LucideMessageSquarePlus = MessageSquarePlus;
    exports.LucideMessageSquareQuote = MessageSquareQuote;
    exports.LucideMessageSquareReply = MessageSquareReply;
    exports.LucideMessageSquareShare = MessageSquareShare;
    exports.LucideMessageSquareText = MessageSquareText;
    exports.LucideMessageSquareWarning = MessageSquareWarning;
    exports.LucideMessageSquareX = MessageSquareX;
    exports.LucideMessagesSquare = MessagesSquare;
    exports.LucideMic = Mic;
    exports.LucideMic2 = MicVocal;
    exports.LucideMicOff = MicOff;
    exports.LucideMicVocal = MicVocal;
    exports.LucideMicrochip = Microchip;
    exports.LucideMicroscope = Microscope;
    exports.LucideMicrowave = Microwave;
    exports.LucideMilestone = Milestone;
    exports.LucideMilk = Milk;
    exports.LucideMilkOff = MilkOff;
    exports.LucideMinimize = Minimize;
    exports.LucideMinimize2 = Minimize2;
    exports.LucideMinus = Minus;
    exports.LucideMinusCircle = CircleMinus;
    exports.LucideMinusSquare = SquareMinus;
    exports.LucideMonitor = Monitor;
    exports.LucideMonitorCheck = MonitorCheck;
    exports.LucideMonitorCog = MonitorCog;
    exports.LucideMonitorDot = MonitorDot;
    exports.LucideMonitorDown = MonitorDown;
    exports.LucideMonitorOff = MonitorOff;
    exports.LucideMonitorPause = MonitorPause;
    exports.LucideMonitorPlay = MonitorPlay;
    exports.LucideMonitorSmartphone = MonitorSmartphone;
    exports.LucideMonitorSpeaker = MonitorSpeaker;
    exports.LucideMonitorStop = MonitorStop;
    exports.LucideMonitorUp = MonitorUp;
    exports.LucideMonitorX = MonitorX;
    exports.LucideMoon = Moon;
    exports.LucideMoonStar = MoonStar;
    exports.LucideMoreHorizontal = Ellipsis;
    exports.LucideMoreVertical = EllipsisVertical;
    exports.LucideMountain = Mountain;
    exports.LucideMountainSnow = MountainSnow;
    exports.LucideMouse = Mouse;
    exports.LucideMouseOff = MouseOff;
    exports.LucideMousePointer = MousePointer;
    exports.LucideMousePointer2 = MousePointer2;
    exports.LucideMousePointerBan = MousePointerBan;
    exports.LucideMousePointerClick = MousePointerClick;
    exports.LucideMousePointerSquareDashed = SquareDashedMousePointer;
    exports.LucideMove = Move;
    exports.LucideMove3D = Move3d;
    exports.LucideMove3d = Move3d;
    exports.LucideMoveDiagonal = MoveDiagonal;
    exports.LucideMoveDiagonal2 = MoveDiagonal2;
    exports.LucideMoveDown = MoveDown;
    exports.LucideMoveDownLeft = MoveDownLeft;
    exports.LucideMoveDownRight = MoveDownRight;
    exports.LucideMoveHorizontal = MoveHorizontal;
    exports.LucideMoveLeft = MoveLeft;
    exports.LucideMoveRight = MoveRight;
    exports.LucideMoveUp = MoveUp;
    exports.LucideMoveUpLeft = MoveUpLeft;
    exports.LucideMoveUpRight = MoveUpRight;
    exports.LucideMoveVertical = MoveVertical;
    exports.LucideMusic = Music;
    exports.LucideMusic2 = Music2;
    exports.LucideMusic3 = Music3;
    exports.LucideMusic4 = Music4;
    exports.LucideNavigation = Navigation;
    exports.LucideNavigation2 = Navigation2;
    exports.LucideNavigation2Off = Navigation2Off;
    exports.LucideNavigationOff = NavigationOff;
    exports.LucideNetwork = Network;
    exports.LucideNewspaper = Newspaper;
    exports.LucideNfc = Nfc;
    exports.LucideNotebook = Notebook;
    exports.LucideNotebookPen = NotebookPen;
    exports.LucideNotebookTabs = NotebookTabs;
    exports.LucideNotebookText = NotebookText;
    exports.LucideNotepadText = NotepadText;
    exports.LucideNotepadTextDashed = NotepadTextDashed;
    exports.LucideNut = Nut;
    exports.LucideNutOff = NutOff;
    exports.LucideOctagon = Octagon;
    exports.LucideOctagonAlert = OctagonAlert;
    exports.LucideOctagonMinus = OctagonMinus;
    exports.LucideOctagonPause = OctagonPause;
    exports.LucideOctagonX = OctagonX;
    exports.LucideOmega = Omega;
    exports.LucideOption = Option;
    exports.LucideOrbit = Orbit;
    exports.LucideOrigami = Origami;
    exports.LucideOutdent = IndentDecrease;
    exports.LucidePackage = Package;
    exports.LucidePackage2 = Package2;
    exports.LucidePackageCheck = PackageCheck;
    exports.LucidePackageMinus = PackageMinus;
    exports.LucidePackageOpen = PackageOpen;
    exports.LucidePackagePlus = PackagePlus;
    exports.LucidePackageSearch = PackageSearch;
    exports.LucidePackageX = PackageX;
    exports.LucidePaintBucket = PaintBucket;
    exports.LucidePaintRoller = PaintRoller;
    exports.LucidePaintbrush = Paintbrush;
    exports.LucidePaintbrush2 = PaintbrushVertical;
    exports.LucidePaintbrushVertical = PaintbrushVertical;
    exports.LucidePalette = Palette;
    exports.LucidePalmtree = TreePalm;
    exports.LucidePanelBottom = PanelBottom;
    exports.LucidePanelBottomClose = PanelBottomClose;
    exports.LucidePanelBottomDashed = PanelBottomDashed;
    exports.LucidePanelBottomInactive = PanelBottomDashed;
    exports.LucidePanelBottomOpen = PanelBottomOpen;
    exports.LucidePanelLeft = PanelLeft;
    exports.LucidePanelLeftClose = PanelLeftClose;
    exports.LucidePanelLeftDashed = PanelLeftDashed;
    exports.LucidePanelLeftInactive = PanelLeftDashed;
    exports.LucidePanelLeftOpen = PanelLeftOpen;
    exports.LucidePanelRight = PanelRight;
    exports.LucidePanelRightClose = PanelRightClose;
    exports.LucidePanelRightDashed = PanelRightDashed;
    exports.LucidePanelRightInactive = PanelRightDashed;
    exports.LucidePanelRightOpen = PanelRightOpen;
    exports.LucidePanelTop = PanelTop;
    exports.LucidePanelTopClose = PanelTopClose;
    exports.LucidePanelTopDashed = PanelTopDashed;
    exports.LucidePanelTopInactive = PanelTopDashed;
    exports.LucidePanelTopOpen = PanelTopOpen;
    exports.LucidePanelsLeftBottom = PanelsLeftBottom;
    exports.LucidePanelsLeftRight = Columns3;
    exports.LucidePanelsRightBottom = PanelsRightBottom;
    exports.LucidePanelsTopBottom = Rows3;
    exports.LucidePanelsTopLeft = PanelsTopLeft;
    exports.LucidePaperclip = Paperclip;
    exports.LucideParentheses = Parentheses;
    exports.LucideParkingCircle = CircleParking;
    exports.LucideParkingCircleOff = CircleParkingOff;
    exports.LucideParkingMeter = ParkingMeter;
    exports.LucideParkingSquare = SquareParking;
    exports.LucideParkingSquareOff = SquareParkingOff;
    exports.LucidePartyPopper = PartyPopper;
    exports.LucidePause = Pause;
    exports.LucidePauseCircle = CirclePause;
    exports.LucidePauseOctagon = OctagonPause;
    exports.LucidePawPrint = PawPrint;
    exports.LucidePcCase = PcCase;
    exports.LucidePen = Pen;
    exports.LucidePenBox = SquarePen;
    exports.LucidePenLine = PenLine;
    exports.LucidePenOff = PenOff;
    exports.LucidePenSquare = SquarePen;
    exports.LucidePenTool = PenTool;
    exports.LucidePencil = Pencil;
    exports.LucidePencilLine = PencilLine;
    exports.LucidePencilOff = PencilOff;
    exports.LucidePencilRuler = PencilRuler;
    exports.LucidePentagon = Pentagon;
    exports.LucidePercent = Percent;
    exports.LucidePercentCircle = CirclePercent;
    exports.LucidePercentDiamond = DiamondPercent;
    exports.LucidePercentSquare = SquarePercent;
    exports.LucidePersonStanding = PersonStanding;
    exports.LucidePhilippinePeso = PhilippinePeso;
    exports.LucidePhone = Phone;
    exports.LucidePhoneCall = PhoneCall;
    exports.LucidePhoneForwarded = PhoneForwarded;
    exports.LucidePhoneIncoming = PhoneIncoming;
    exports.LucidePhoneMissed = PhoneMissed;
    exports.LucidePhoneOff = PhoneOff;
    exports.LucidePhoneOutgoing = PhoneOutgoing;
    exports.LucidePi = Pi;
    exports.LucidePiSquare = SquarePi;
    exports.LucidePiano = Piano;
    exports.LucidePickaxe = Pickaxe;
    exports.LucidePictureInPicture = PictureInPicture;
    exports.LucidePictureInPicture2 = PictureInPicture2;
    exports.LucidePieChart = ChartPie;
    exports.LucidePiggyBank = PiggyBank;
    exports.LucidePilcrow = Pilcrow;
    exports.LucidePilcrowLeft = PilcrowLeft;
    exports.LucidePilcrowRight = PilcrowRight;
    exports.LucidePilcrowSquare = SquarePilcrow;
    exports.LucidePill = Pill;
    exports.LucidePillBottle = PillBottle;
    exports.LucidePin = Pin;
    exports.LucidePinOff = PinOff;
    exports.LucidePipette = Pipette;
    exports.LucidePizza = Pizza;
    exports.LucidePlane = Plane;
    exports.LucidePlaneLanding = PlaneLanding;
    exports.LucidePlaneTakeoff = PlaneTakeoff;
    exports.LucidePlay = Play;
    exports.LucidePlayCircle = CirclePlay;
    exports.LucidePlaySquare = SquarePlay;
    exports.LucidePlug = Plug;
    exports.LucidePlug2 = Plug2;
    exports.LucidePlugZap = PlugZap;
    exports.LucidePlugZap2 = PlugZap;
    exports.LucidePlus = Plus;
    exports.LucidePlusCircle = CirclePlus;
    exports.LucidePlusSquare = SquarePlus;
    exports.LucidePocket = Pocket;
    exports.LucidePocketKnife = PocketKnife;
    exports.LucidePodcast = Podcast;
    exports.LucidePointer = Pointer;
    exports.LucidePointerOff = PointerOff;
    exports.LucidePopcorn = Popcorn;
    exports.LucidePopsicle = Popsicle;
    exports.LucidePoundSterling = PoundSterling;
    exports.LucidePower = Power;
    exports.LucidePowerCircle = CirclePower;
    exports.LucidePowerOff = PowerOff;
    exports.LucidePowerSquare = SquarePower;
    exports.LucidePresentation = Presentation;
    exports.LucidePrinter = Printer;
    exports.LucidePrinterCheck = PrinterCheck;
    exports.LucideProjector = Projector;
    exports.LucideProportions = Proportions;
    exports.LucidePuzzle = Puzzle;
    exports.LucidePyramid = Pyramid;
    exports.LucideQrCode = QrCode;
    exports.LucideQuote = Quote;
    exports.LucideRabbit = Rabbit;
    exports.LucideRadar = Radar;
    exports.LucideRadiation = Radiation;
    exports.LucideRadical = Radical;
    exports.LucideRadio = Radio;
    exports.LucideRadioReceiver = RadioReceiver;
    exports.LucideRadioTower = RadioTower;
    exports.LucideRadius = Radius;
    exports.LucideRailSymbol = RailSymbol;
    exports.LucideRainbow = Rainbow;
    exports.LucideRat = Rat;
    exports.LucideRatio = Ratio;
    exports.LucideReceipt = Receipt;
    exports.LucideReceiptCent = ReceiptCent;
    exports.LucideReceiptEuro = ReceiptEuro;
    exports.LucideReceiptIndianRupee = ReceiptIndianRupee;
    exports.LucideReceiptJapaneseYen = ReceiptJapaneseYen;
    exports.LucideReceiptPoundSterling = ReceiptPoundSterling;
    exports.LucideReceiptRussianRuble = ReceiptRussianRuble;
    exports.LucideReceiptSwissFranc = ReceiptSwissFranc;
    exports.LucideReceiptText = ReceiptText;
    exports.LucideRectangleEllipsis = RectangleEllipsis;
    exports.LucideRectangleHorizontal = RectangleHorizontal;
    exports.LucideRectangleVertical = RectangleVertical;
    exports.LucideRecycle = Recycle;
    exports.LucideRedo = Redo;
    exports.LucideRedo2 = Redo2;
    exports.LucideRedoDot = RedoDot;
    exports.LucideRefreshCcw = RefreshCcw;
    exports.LucideRefreshCcwDot = RefreshCcwDot;
    exports.LucideRefreshCw = RefreshCw;
    exports.LucideRefreshCwOff = RefreshCwOff;
    exports.LucideRefrigerator = Refrigerator;
    exports.LucideRegex = Regex;
    exports.LucideRemoveFormatting = RemoveFormatting;
    exports.LucideRepeat = Repeat;
    exports.LucideRepeat1 = Repeat1;
    exports.LucideRepeat2 = Repeat2;
    exports.LucideReplace = Replace;
    exports.LucideReplaceAll = ReplaceAll;
    exports.LucideReply = Reply;
    exports.LucideReplyAll = ReplyAll;
    exports.LucideRewind = Rewind;
    exports.LucideRibbon = Ribbon;
    exports.LucideRocket = Rocket;
    exports.LucideRockingChair = RockingChair;
    exports.LucideRollerCoaster = RollerCoaster;
    exports.LucideRotate3D = Rotate3d;
    exports.LucideRotate3d = Rotate3d;
    exports.LucideRotateCcw = RotateCcw;
    exports.LucideRotateCcwSquare = RotateCcwSquare;
    exports.LucideRotateCw = RotateCw;
    exports.LucideRotateCwSquare = RotateCwSquare;
    exports.LucideRoute = Route;
    exports.LucideRouteOff = RouteOff;
    exports.LucideRouter = Router;
    exports.LucideRows = Rows2;
    exports.LucideRows2 = Rows2;
    exports.LucideRows3 = Rows3;
    exports.LucideRows4 = Rows4;
    exports.LucideRss = Rss;
    exports.LucideRuler = Ruler;
    exports.LucideRussianRuble = RussianRuble;
    exports.LucideSailboat = Sailboat;
    exports.LucideSalad = Salad;
    exports.LucideSandwich = Sandwich;
    exports.LucideSatellite = Satellite;
    exports.LucideSatelliteDish = SatelliteDish;
    exports.LucideSave = Save;
    exports.LucideSaveAll = SaveAll;
    exports.LucideSaveOff = SaveOff;
    exports.LucideScale = Scale;
    exports.LucideScale3D = Scale3d;
    exports.LucideScale3d = Scale3d;
    exports.LucideScaling = Scaling;
    exports.LucideScan = Scan;
    exports.LucideScanBarcode = ScanBarcode;
    exports.LucideScanEye = ScanEye;
    exports.LucideScanFace = ScanFace;
    exports.LucideScanLine = ScanLine;
    exports.LucideScanQrCode = ScanQrCode;
    exports.LucideScanSearch = ScanSearch;
    exports.LucideScanText = ScanText;
    exports.LucideScatterChart = ChartScatter;
    exports.LucideSchool = School;
    exports.LucideSchool2 = University;
    exports.LucideScissors = Scissors;
    exports.LucideScissorsLineDashed = ScissorsLineDashed;
    exports.LucideScissorsSquare = SquareScissors;
    exports.LucideScissorsSquareDashedBottom = SquareBottomDashedScissors;
    exports.LucideScreenShare = ScreenShare;
    exports.LucideScreenShareOff = ScreenShareOff;
    exports.LucideScroll = Scroll;
    exports.LucideScrollText = ScrollText;
    exports.LucideSearch = Search;
    exports.LucideSearchCheck = SearchCheck;
    exports.LucideSearchCode = SearchCode;
    exports.LucideSearchSlash = SearchSlash;
    exports.LucideSearchX = SearchX;
    exports.LucideSection = Section;
    exports.LucideSend = Send;
    exports.LucideSendHorizonal = SendHorizontal;
    exports.LucideSendHorizontal = SendHorizontal;
    exports.LucideSendToBack = SendToBack;
    exports.LucideSeparatorHorizontal = SeparatorHorizontal;
    exports.LucideSeparatorVertical = SeparatorVertical;
    exports.LucideServer = Server;
    exports.LucideServerCog = ServerCog;
    exports.LucideServerCrash = ServerCrash;
    exports.LucideServerOff = ServerOff;
    exports.LucideSettings = Settings;
    exports.LucideSettings2 = Settings2;
    exports.LucideShapes = Shapes;
    exports.LucideShare = Share;
    exports.LucideShare2 = Share2;
    exports.LucideSheet = Sheet;
    exports.LucideShell = Shell;
    exports.LucideShield = Shield;
    exports.LucideShieldAlert = ShieldAlert;
    exports.LucideShieldBan = ShieldBan;
    exports.LucideShieldCheck = ShieldCheck;
    exports.LucideShieldClose = ShieldX;
    exports.LucideShieldEllipsis = ShieldEllipsis;
    exports.LucideShieldHalf = ShieldHalf;
    exports.LucideShieldMinus = ShieldMinus;
    exports.LucideShieldOff = ShieldOff;
    exports.LucideShieldPlus = ShieldPlus;
    exports.LucideShieldQuestion = ShieldQuestion;
    exports.LucideShieldX = ShieldX;
    exports.LucideShip = Ship;
    exports.LucideShipWheel = ShipWheel;
    exports.LucideShirt = Shirt;
    exports.LucideShoppingBag = ShoppingBag;
    exports.LucideShoppingBasket = ShoppingBasket;
    exports.LucideShoppingCart = ShoppingCart;
    exports.LucideShovel = Shovel;
    exports.LucideShowerHead = ShowerHead;
    exports.LucideShrink = Shrink;
    exports.LucideShrub = Shrub;
    exports.LucideShuffle = Shuffle;
    exports.LucideSidebar = PanelLeft;
    exports.LucideSidebarClose = PanelLeftClose;
    exports.LucideSidebarOpen = PanelLeftOpen;
    exports.LucideSigma = Sigma;
    exports.LucideSigmaSquare = SquareSigma;
    exports.LucideSignal = Signal;
    exports.LucideSignalHigh = SignalHigh;
    exports.LucideSignalLow = SignalLow;
    exports.LucideSignalMedium = SignalMedium;
    exports.LucideSignalZero = SignalZero;
    exports.LucideSignature = Signature;
    exports.LucideSignpost = Signpost;
    exports.LucideSignpostBig = SignpostBig;
    exports.LucideSiren = Siren;
    exports.LucideSkipBack = SkipBack;
    exports.LucideSkipForward = SkipForward;
    exports.LucideSkull = Skull;
    exports.LucideSlack = Slack;
    exports.LucideSlash = Slash;
    exports.LucideSlashSquare = SquareSlash;
    exports.LucideSlice = Slice;
    exports.LucideSliders = SlidersVertical;
    exports.LucideSlidersHorizontal = SlidersHorizontal;
    exports.LucideSlidersVertical = SlidersVertical;
    exports.LucideSmartphone = Smartphone;
    exports.LucideSmartphoneCharging = SmartphoneCharging;
    exports.LucideSmartphoneNfc = SmartphoneNfc;
    exports.LucideSmile = Smile;
    exports.LucideSmilePlus = SmilePlus;
    exports.LucideSnail = Snail;
    exports.LucideSnowflake = Snowflake;
    exports.LucideSofa = Sofa;
    exports.LucideSortAsc = ArrowUpNarrowWide;
    exports.LucideSortDesc = ArrowDownWideNarrow;
    exports.LucideSoup = Soup;
    exports.LucideSpace = Space;
    exports.LucideSpade = Spade;
    exports.LucideSparkle = Sparkle;
    exports.LucideSparkles = Sparkles;
    exports.LucideSpeaker = Speaker;
    exports.LucideSpeech = Speech;
    exports.LucideSpellCheck = SpellCheck;
    exports.LucideSpellCheck2 = SpellCheck2;
    exports.LucideSpline = Spline;
    exports.LucideSplit = Split;
    exports.LucideSplitSquareHorizontal = SquareSplitHorizontal;
    exports.LucideSplitSquareVertical = SquareSplitVertical;
    exports.LucideSprayCan = SprayCan;
    exports.LucideSprout = Sprout;
    exports.LucideSquare = Square;
    exports.LucideSquareActivity = SquareActivity;
    exports.LucideSquareArrowDown = SquareArrowDown;
    exports.LucideSquareArrowDownLeft = SquareArrowDownLeft;
    exports.LucideSquareArrowDownRight = SquareArrowDownRight;
    exports.LucideSquareArrowLeft = SquareArrowLeft;
    exports.LucideSquareArrowOutDownLeft = SquareArrowOutDownLeft;
    exports.LucideSquareArrowOutDownRight = SquareArrowOutDownRight;
    exports.LucideSquareArrowOutUpLeft = SquareArrowOutUpLeft;
    exports.LucideSquareArrowOutUpRight = SquareArrowOutUpRight;
    exports.LucideSquareArrowRight = SquareArrowRight;
    exports.LucideSquareArrowUp = SquareArrowUp;
    exports.LucideSquareArrowUpLeft = SquareArrowUpLeft;
    exports.LucideSquareArrowUpRight = SquareArrowUpRight;
    exports.LucideSquareAsterisk = SquareAsterisk;
    exports.LucideSquareBottomDashedScissors = SquareBottomDashedScissors;
    exports.LucideSquareChartGantt = SquareChartGantt;
    exports.LucideSquareCheck = SquareCheck;
    exports.LucideSquareCheckBig = SquareCheckBig;
    exports.LucideSquareChevronDown = SquareChevronDown;
    exports.LucideSquareChevronLeft = SquareChevronLeft;
    exports.LucideSquareChevronRight = SquareChevronRight;
    exports.LucideSquareChevronUp = SquareChevronUp;
    exports.LucideSquareCode = SquareCode;
    exports.LucideSquareDashed = SquareDashed;
    exports.LucideSquareDashedBottom = SquareDashedBottom;
    exports.LucideSquareDashedBottomCode = SquareDashedBottomCode;
    exports.LucideSquareDashedKanban = SquareDashedKanban;
    exports.LucideSquareDashedMousePointer = SquareDashedMousePointer;
    exports.LucideSquareDivide = SquareDivide;
    exports.LucideSquareDot = SquareDot;
    exports.LucideSquareEqual = SquareEqual;
    exports.LucideSquareFunction = SquareFunction;
    exports.LucideSquareGanttChart = SquareChartGantt;
    exports.LucideSquareKanban = SquareKanban;
    exports.LucideSquareLibrary = SquareLibrary;
    exports.LucideSquareM = SquareM;
    exports.LucideSquareMenu = SquareMenu;
    exports.LucideSquareMinus = SquareMinus;
    exports.LucideSquareMousePointer = SquareMousePointer;
    exports.LucideSquareParking = SquareParking;
    exports.LucideSquareParkingOff = SquareParkingOff;
    exports.LucideSquarePen = SquarePen;
    exports.LucideSquarePercent = SquarePercent;
    exports.LucideSquarePi = SquarePi;
    exports.LucideSquarePilcrow = SquarePilcrow;
    exports.LucideSquarePlay = SquarePlay;
    exports.LucideSquarePlus = SquarePlus;
    exports.LucideSquarePower = SquarePower;
    exports.LucideSquareRadical = SquareRadical;
    exports.LucideSquareScissors = SquareScissors;
    exports.LucideSquareSigma = SquareSigma;
    exports.LucideSquareSlash = SquareSlash;
    exports.LucideSquareSplitHorizontal = SquareSplitHorizontal;
    exports.LucideSquareSplitVertical = SquareSplitVertical;
    exports.LucideSquareSquare = SquareSquare;
    exports.LucideSquareStack = SquareStack;
    exports.LucideSquareTerminal = SquareTerminal;
    exports.LucideSquareUser = SquareUser;
    exports.LucideSquareUserRound = SquareUserRound;
    exports.LucideSquareX = SquareX;
    exports.LucideSquircle = Squircle;
    exports.LucideSquirrel = Squirrel;
    exports.LucideStamp = Stamp;
    exports.LucideStar = Star;
    exports.LucideStarHalf = StarHalf;
    exports.LucideStarOff = StarOff;
    exports.LucideStars = Sparkles;
    exports.LucideStepBack = StepBack;
    exports.LucideStepForward = StepForward;
    exports.LucideStethoscope = Stethoscope;
    exports.LucideSticker = Sticker;
    exports.LucideStickyNote = StickyNote;
    exports.LucideStopCircle = CircleStop;
    exports.LucideStore = Store;
    exports.LucideStretchHorizontal = StretchHorizontal;
    exports.LucideStretchVertical = StretchVertical;
    exports.LucideStrikethrough = Strikethrough;
    exports.LucideSubscript = Subscript;
    exports.LucideSubtitles = Captions;
    exports.LucideSun = Sun;
    exports.LucideSunDim = SunDim;
    exports.LucideSunMedium = SunMedium;
    exports.LucideSunMoon = SunMoon;
    exports.LucideSunSnow = SunSnow;
    exports.LucideSunrise = Sunrise;
    exports.LucideSunset = Sunset;
    exports.LucideSuperscript = Superscript;
    exports.LucideSwatchBook = SwatchBook;
    exports.LucideSwissFranc = SwissFranc;
    exports.LucideSwitchCamera = SwitchCamera;
    exports.LucideSword = Sword;
    exports.LucideSwords = Swords;
    exports.LucideSyringe = Syringe;
    exports.LucideTable = Table;
    exports.LucideTable2 = Table2;
    exports.LucideTableCellsMerge = TableCellsMerge;
    exports.LucideTableCellsSplit = TableCellsSplit;
    exports.LucideTableColumnsSplit = TableColumnsSplit;
    exports.LucideTableOfContents = TableOfContents;
    exports.LucideTableProperties = TableProperties;
    exports.LucideTableRowsSplit = TableRowsSplit;
    exports.LucideTablet = Tablet;
    exports.LucideTabletSmartphone = TabletSmartphone;
    exports.LucideTablets = Tablets;
    exports.LucideTag = Tag;
    exports.LucideTags = Tags;
    exports.LucideTally1 = Tally1;
    exports.LucideTally2 = Tally2;
    exports.LucideTally3 = Tally3;
    exports.LucideTally4 = Tally4;
    exports.LucideTally5 = Tally5;
    exports.LucideTangent = Tangent;
    exports.LucideTarget = Target;
    exports.LucideTelescope = Telescope;
    exports.LucideTent = Tent;
    exports.LucideTentTree = TentTree;
    exports.LucideTerminal = Terminal;
    exports.LucideTerminalSquare = SquareTerminal;
    exports.LucideTestTube = TestTube;
    exports.LucideTestTube2 = TestTubeDiagonal;
    exports.LucideTestTubeDiagonal = TestTubeDiagonal;
    exports.LucideTestTubes = TestTubes;
    exports.LucideText = Text;
    exports.LucideTextCursor = TextCursor;
    exports.LucideTextCursorInput = TextCursorInput;
    exports.LucideTextQuote = TextQuote;
    exports.LucideTextSearch = TextSearch;
    exports.LucideTextSelect = TextSelect;
    exports.LucideTextSelection = TextSelect;
    exports.LucideTheater = Theater;
    exports.LucideThermometer = Thermometer;
    exports.LucideThermometerSnowflake = ThermometerSnowflake;
    exports.LucideThermometerSun = ThermometerSun;
    exports.LucideThumbsDown = ThumbsDown;
    exports.LucideThumbsUp = ThumbsUp;
    exports.LucideTicket = Ticket;
    exports.LucideTicketCheck = TicketCheck;
    exports.LucideTicketMinus = TicketMinus;
    exports.LucideTicketPercent = TicketPercent;
    exports.LucideTicketPlus = TicketPlus;
    exports.LucideTicketSlash = TicketSlash;
    exports.LucideTicketX = TicketX;
    exports.LucideTickets = Tickets;
    exports.LucideTicketsPlane = TicketsPlane;
    exports.LucideTimer = Timer;
    exports.LucideTimerOff = TimerOff;
    exports.LucideTimerReset = TimerReset;
    exports.LucideToggleLeft = ToggleLeft;
    exports.LucideToggleRight = ToggleRight;
    exports.LucideToilet = Toilet;
    exports.LucideTornado = Tornado;
    exports.LucideTorus = Torus;
    exports.LucideTouchpad = Touchpad;
    exports.LucideTouchpadOff = TouchpadOff;
    exports.LucideTowerControl = TowerControl;
    exports.LucideToyBrick = ToyBrick;
    exports.LucideTractor = Tractor;
    exports.LucideTrafficCone = TrafficCone;
    exports.LucideTrain = TramFront;
    exports.LucideTrainFront = TrainFront;
    exports.LucideTrainFrontTunnel = TrainFrontTunnel;
    exports.LucideTrainTrack = TrainTrack;
    exports.LucideTramFront = TramFront;
    exports.LucideTrash = Trash;
    exports.LucideTrash2 = Trash2;
    exports.LucideTreeDeciduous = TreeDeciduous;
    exports.LucideTreePalm = TreePalm;
    exports.LucideTreePine = TreePine;
    exports.LucideTrees = Trees;
    exports.LucideTrello = Trello;
    exports.LucideTrendingDown = TrendingDown;
    exports.LucideTrendingUp = TrendingUp;
    exports.LucideTrendingUpDown = TrendingUpDown;
    exports.LucideTriangle = Triangle;
    exports.LucideTriangleAlert = TriangleAlert;
    exports.LucideTriangleRight = TriangleRight;
    exports.LucideTrophy = Trophy;
    exports.LucideTruck = Truck;
    exports.LucideTurtle = Turtle;
    exports.LucideTv = Tv;
    exports.LucideTv2 = TvMinimal;
    exports.LucideTvMinimal = TvMinimal;
    exports.LucideTvMinimalPlay = TvMinimalPlay;
    exports.LucideTwitch = Twitch;
    exports.LucideTwitter = Twitter;
    exports.LucideType = Type;
    exports.LucideTypeOutline = TypeOutline;
    exports.LucideUmbrella = Umbrella;
    exports.LucideUmbrellaOff = UmbrellaOff;
    exports.LucideUnderline = Underline;
    exports.LucideUndo = Undo;
    exports.LucideUndo2 = Undo2;
    exports.LucideUndoDot = UndoDot;
    exports.LucideUnfoldHorizontal = UnfoldHorizontal;
    exports.LucideUnfoldVertical = UnfoldVertical;
    exports.LucideUngroup = Ungroup;
    exports.LucideUniversity = University;
    exports.LucideUnlink = Unlink;
    exports.LucideUnlink2 = Unlink2;
    exports.LucideUnlock = LockOpen;
    exports.LucideUnlockKeyhole = LockKeyholeOpen;
    exports.LucideUnplug = Unplug;
    exports.LucideUpload = Upload;
    exports.LucideUploadCloud = CloudUpload;
    exports.LucideUsb = Usb;
    exports.LucideUser = User;
    exports.LucideUser2 = UserRound;
    exports.LucideUserCheck = UserCheck;
    exports.LucideUserCheck2 = UserRoundCheck;
    exports.LucideUserCircle = CircleUser;
    exports.LucideUserCircle2 = CircleUserRound;
    exports.LucideUserCog = UserCog;
    exports.LucideUserCog2 = UserRoundCog;
    exports.LucideUserMinus = UserMinus;
    exports.LucideUserMinus2 = UserRoundMinus;
    exports.LucideUserPen = UserPen;
    exports.LucideUserPlus = UserPlus;
    exports.LucideUserPlus2 = UserRoundPlus;
    exports.LucideUserRound = UserRound;
    exports.LucideUserRoundCheck = UserRoundCheck;
    exports.LucideUserRoundCog = UserRoundCog;
    exports.LucideUserRoundMinus = UserRoundMinus;
    exports.LucideUserRoundPen = UserRoundPen;
    exports.LucideUserRoundPlus = UserRoundPlus;
    exports.LucideUserRoundSearch = UserRoundSearch;
    exports.LucideUserRoundX = UserRoundX;
    exports.LucideUserSearch = UserSearch;
    exports.LucideUserSquare = SquareUser;
    exports.LucideUserSquare2 = SquareUserRound;
    exports.LucideUserX = UserX;
    exports.LucideUserX2 = UserRoundX;
    exports.LucideUsers = Users;
    exports.LucideUsers2 = UsersRound;
    exports.LucideUsersRound = UsersRound;
    exports.LucideUtensils = Utensils;
    exports.LucideUtensilsCrossed = UtensilsCrossed;
    exports.LucideUtilityPole = UtilityPole;
    exports.LucideVariable = Variable;
    exports.LucideVault = Vault;
    exports.LucideVegan = Vegan;
    exports.LucideVenetianMask = VenetianMask;
    exports.LucideVerified = BadgeCheck;
    exports.LucideVibrate = Vibrate;
    exports.LucideVibrateOff = VibrateOff;
    exports.LucideVideo = Video;
    exports.LucideVideoOff = VideoOff;
    exports.LucideVideotape = Videotape;
    exports.LucideView = View;
    exports.LucideVoicemail = Voicemail;
    exports.LucideVolleyball = Volleyball;
    exports.LucideVolume = Volume;
    exports.LucideVolume1 = Volume1;
    exports.LucideVolume2 = Volume2;
    exports.LucideVolumeOff = VolumeOff;
    exports.LucideVolumeX = VolumeX;
    exports.LucideVote = Vote;
    exports.LucideWallet = Wallet;
    exports.LucideWallet2 = WalletMinimal;
    exports.LucideWalletCards = WalletCards;
    exports.LucideWalletMinimal = WalletMinimal;
    exports.LucideWallpaper = Wallpaper;
    exports.LucideWand = Wand;
    exports.LucideWand2 = WandSparkles;
    exports.LucideWandSparkles = WandSparkles;
    exports.LucideWarehouse = Warehouse;
    exports.LucideWashingMachine = WashingMachine;
    exports.LucideWatch = Watch;
    exports.LucideWaves = Waves;
    exports.LucideWaypoints = Waypoints;
    exports.LucideWebcam = Webcam;
    exports.LucideWebhook = Webhook;
    exports.LucideWebhookOff = WebhookOff;
    exports.LucideWeight = Weight;
    exports.LucideWheat = Wheat;
    exports.LucideWheatOff = WheatOff;
    exports.LucideWholeWord = WholeWord;
    exports.LucideWifi = Wifi;
    exports.LucideWifiHigh = WifiHigh;
    exports.LucideWifiLow = WifiLow;
    exports.LucideWifiOff = WifiOff;
    exports.LucideWifiZero = WifiZero;
    exports.LucideWind = Wind;
    exports.LucideWindArrowDown = WindArrowDown;
    exports.LucideWine = Wine;
    exports.LucideWineOff = WineOff;
    exports.LucideWorkflow = Workflow;
    exports.LucideWorm = Worm;
    exports.LucideWrapText = WrapText;
    exports.LucideWrench = Wrench;
    exports.LucideX = X;
    exports.LucideXCircle = CircleX;
    exports.LucideXOctagon = OctagonX;
    exports.LucideXSquare = SquareX;
    exports.LucideYoutube = Youtube;
    exports.LucideZap = Zap;
    exports.LucideZapOff = ZapOff;
    exports.LucideZoomIn = ZoomIn;
    exports.LucideZoomOut = ZoomOut;
    exports.Luggage = Luggage;
    exports.LuggageIcon = Luggage;
    exports.MSquare = SquareM;
    exports.MSquareIcon = SquareM;
    exports.Magnet = Magnet;
    exports.MagnetIcon = Magnet;
    exports.Mail = Mail;
    exports.MailCheck = MailCheck;
    exports.MailCheckIcon = MailCheck;
    exports.MailIcon = Mail;
    exports.MailMinus = MailMinus;
    exports.MailMinusIcon = MailMinus;
    exports.MailOpen = MailOpen;
    exports.MailOpenIcon = MailOpen;
    exports.MailPlus = MailPlus;
    exports.MailPlusIcon = MailPlus;
    exports.MailQuestion = MailQuestion;
    exports.MailQuestionIcon = MailQuestion;
    exports.MailSearch = MailSearch;
    exports.MailSearchIcon = MailSearch;
    exports.MailWarning = MailWarning;
    exports.MailWarningIcon = MailWarning;
    exports.MailX = MailX;
    exports.MailXIcon = MailX;
    exports.Mailbox = Mailbox;
    exports.MailboxIcon = Mailbox;
    exports.Mails = Mails;
    exports.MailsIcon = Mails;
    exports.Map = Map2;
    exports.MapIcon = Map2;
    exports.MapPin = MapPin;
    exports.MapPinCheck = MapPinCheck;
    exports.MapPinCheckIcon = MapPinCheck;
    exports.MapPinCheckInside = MapPinCheckInside;
    exports.MapPinCheckInsideIcon = MapPinCheckInside;
    exports.MapPinHouse = MapPinHouse;
    exports.MapPinHouseIcon = MapPinHouse;
    exports.MapPinIcon = MapPin;
    exports.MapPinMinus = MapPinMinus;
    exports.MapPinMinusIcon = MapPinMinus;
    exports.MapPinMinusInside = MapPinMinusInside;
    exports.MapPinMinusInsideIcon = MapPinMinusInside;
    exports.MapPinOff = MapPinOff;
    exports.MapPinOffIcon = MapPinOff;
    exports.MapPinPlus = MapPinPlus;
    exports.MapPinPlusIcon = MapPinPlus;
    exports.MapPinPlusInside = MapPinPlusInside;
    exports.MapPinPlusInsideIcon = MapPinPlusInside;
    exports.MapPinX = MapPinX;
    exports.MapPinXIcon = MapPinX;
    exports.MapPinXInside = MapPinXInside;
    exports.MapPinXInsideIcon = MapPinXInside;
    exports.MapPinned = MapPinned;
    exports.MapPinnedIcon = MapPinned;
    exports.Martini = Martini;
    exports.MartiniIcon = Martini;
    exports.Maximize = Maximize;
    exports.Maximize2 = Maximize2;
    exports.Maximize2Icon = Maximize2;
    exports.MaximizeIcon = Maximize;
    exports.Medal = Medal;
    exports.MedalIcon = Medal;
    exports.Megaphone = Megaphone;
    exports.MegaphoneIcon = Megaphone;
    exports.MegaphoneOff = MegaphoneOff;
    exports.MegaphoneOffIcon = MegaphoneOff;
    exports.Meh = Meh;
    exports.MehIcon = Meh;
    exports.MemoryStick = MemoryStick;
    exports.MemoryStickIcon = MemoryStick;
    exports.Menu = Menu;
    exports.MenuIcon = Menu;
    exports.MenuSquare = SquareMenu;
    exports.MenuSquareIcon = SquareMenu;
    exports.Merge = Merge;
    exports.MergeIcon = Merge;
    exports.MessageCircle = MessageCircle;
    exports.MessageCircleCode = MessageCircleCode;
    exports.MessageCircleCodeIcon = MessageCircleCode;
    exports.MessageCircleDashed = MessageCircleDashed;
    exports.MessageCircleDashedIcon = MessageCircleDashed;
    exports.MessageCircleHeart = MessageCircleHeart;
    exports.MessageCircleHeartIcon = MessageCircleHeart;
    exports.MessageCircleIcon = MessageCircle;
    exports.MessageCircleMore = MessageCircleMore;
    exports.MessageCircleMoreIcon = MessageCircleMore;
    exports.MessageCircleOff = MessageCircleOff;
    exports.MessageCircleOffIcon = MessageCircleOff;
    exports.MessageCirclePlus = MessageCirclePlus;
    exports.MessageCirclePlusIcon = MessageCirclePlus;
    exports.MessageCircleQuestion = MessageCircleQuestion;
    exports.MessageCircleQuestionIcon = MessageCircleQuestion;
    exports.MessageCircleReply = MessageCircleReply;
    exports.MessageCircleReplyIcon = MessageCircleReply;
    exports.MessageCircleWarning = MessageCircleWarning;
    exports.MessageCircleWarningIcon = MessageCircleWarning;
    exports.MessageCircleX = MessageCircleX;
    exports.MessageCircleXIcon = MessageCircleX;
    exports.MessageSquare = MessageSquare;
    exports.MessageSquareCode = MessageSquareCode;
    exports.MessageSquareCodeIcon = MessageSquareCode;
    exports.MessageSquareDashed = MessageSquareDashed;
    exports.MessageSquareDashedIcon = MessageSquareDashed;
    exports.MessageSquareDiff = MessageSquareDiff;
    exports.MessageSquareDiffIcon = MessageSquareDiff;
    exports.MessageSquareDot = MessageSquareDot;
    exports.MessageSquareDotIcon = MessageSquareDot;
    exports.MessageSquareHeart = MessageSquareHeart;
    exports.MessageSquareHeartIcon = MessageSquareHeart;
    exports.MessageSquareIcon = MessageSquare;
    exports.MessageSquareLock = MessageSquareLock;
    exports.MessageSquareLockIcon = MessageSquareLock;
    exports.MessageSquareMore = MessageSquareMore;
    exports.MessageSquareMoreIcon = MessageSquareMore;
    exports.MessageSquareOff = MessageSquareOff;
    exports.MessageSquareOffIcon = MessageSquareOff;
    exports.MessageSquarePlus = MessageSquarePlus;
    exports.MessageSquarePlusIcon = MessageSquarePlus;
    exports.MessageSquareQuote = MessageSquareQuote;
    exports.MessageSquareQuoteIcon = MessageSquareQuote;
    exports.MessageSquareReply = MessageSquareReply;
    exports.MessageSquareReplyIcon = MessageSquareReply;
    exports.MessageSquareShare = MessageSquareShare;
    exports.MessageSquareShareIcon = MessageSquareShare;
    exports.MessageSquareText = MessageSquareText;
    exports.MessageSquareTextIcon = MessageSquareText;
    exports.MessageSquareWarning = MessageSquareWarning;
    exports.MessageSquareWarningIcon = MessageSquareWarning;
    exports.MessageSquareX = MessageSquareX;
    exports.MessageSquareXIcon = MessageSquareX;
    exports.MessagesSquare = MessagesSquare;
    exports.MessagesSquareIcon = MessagesSquare;
    exports.Mic = Mic;
    exports.Mic2 = MicVocal;
    exports.Mic2Icon = MicVocal;
    exports.MicIcon = Mic;
    exports.MicOff = MicOff;
    exports.MicOffIcon = MicOff;
    exports.MicVocal = MicVocal;
    exports.MicVocalIcon = MicVocal;
    exports.Microchip = Microchip;
    exports.MicrochipIcon = Microchip;
    exports.Microscope = Microscope;
    exports.MicroscopeIcon = Microscope;
    exports.Microwave = Microwave;
    exports.MicrowaveIcon = Microwave;
    exports.Milestone = Milestone;
    exports.MilestoneIcon = Milestone;
    exports.Milk = Milk;
    exports.MilkIcon = Milk;
    exports.MilkOff = MilkOff;
    exports.MilkOffIcon = MilkOff;
    exports.Minimize = Minimize;
    exports.Minimize2 = Minimize2;
    exports.Minimize2Icon = Minimize2;
    exports.MinimizeIcon = Minimize;
    exports.Minus = Minus;
    exports.MinusCircle = CircleMinus;
    exports.MinusCircleIcon = CircleMinus;
    exports.MinusIcon = Minus;
    exports.MinusSquare = SquareMinus;
    exports.MinusSquareIcon = SquareMinus;
    exports.Monitor = Monitor;
    exports.MonitorCheck = MonitorCheck;
    exports.MonitorCheckIcon = MonitorCheck;
    exports.MonitorCog = MonitorCog;
    exports.MonitorCogIcon = MonitorCog;
    exports.MonitorDot = MonitorDot;
    exports.MonitorDotIcon = MonitorDot;
    exports.MonitorDown = MonitorDown;
    exports.MonitorDownIcon = MonitorDown;
    exports.MonitorIcon = Monitor;
    exports.MonitorOff = MonitorOff;
    exports.MonitorOffIcon = MonitorOff;
    exports.MonitorPause = MonitorPause;
    exports.MonitorPauseIcon = MonitorPause;
    exports.MonitorPlay = MonitorPlay;
    exports.MonitorPlayIcon = MonitorPlay;
    exports.MonitorSmartphone = MonitorSmartphone;
    exports.MonitorSmartphoneIcon = MonitorSmartphone;
    exports.MonitorSpeaker = MonitorSpeaker;
    exports.MonitorSpeakerIcon = MonitorSpeaker;
    exports.MonitorStop = MonitorStop;
    exports.MonitorStopIcon = MonitorStop;
    exports.MonitorUp = MonitorUp;
    exports.MonitorUpIcon = MonitorUp;
    exports.MonitorX = MonitorX;
    exports.MonitorXIcon = MonitorX;
    exports.Moon = Moon;
    exports.MoonIcon = Moon;
    exports.MoonStar = MoonStar;
    exports.MoonStarIcon = MoonStar;
    exports.MoreHorizontal = Ellipsis;
    exports.MoreHorizontalIcon = Ellipsis;
    exports.MoreVertical = EllipsisVertical;
    exports.MoreVerticalIcon = EllipsisVertical;
    exports.Mountain = Mountain;
    exports.MountainIcon = Mountain;
    exports.MountainSnow = MountainSnow;
    exports.MountainSnowIcon = MountainSnow;
    exports.Mouse = Mouse;
    exports.MouseIcon = Mouse;
    exports.MouseOff = MouseOff;
    exports.MouseOffIcon = MouseOff;
    exports.MousePointer = MousePointer;
    exports.MousePointer2 = MousePointer2;
    exports.MousePointer2Icon = MousePointer2;
    exports.MousePointerBan = MousePointerBan;
    exports.MousePointerBanIcon = MousePointerBan;
    exports.MousePointerClick = MousePointerClick;
    exports.MousePointerClickIcon = MousePointerClick;
    exports.MousePointerIcon = MousePointer;
    exports.MousePointerSquareDashed = SquareDashedMousePointer;
    exports.MousePointerSquareDashedIcon = SquareDashedMousePointer;
    exports.Move = Move;
    exports.Move3D = Move3d;
    exports.Move3DIcon = Move3d;
    exports.Move3d = Move3d;
    exports.Move3dIcon = Move3d;
    exports.MoveDiagonal = MoveDiagonal;
    exports.MoveDiagonal2 = MoveDiagonal2;
    exports.MoveDiagonal2Icon = MoveDiagonal2;
    exports.MoveDiagonalIcon = MoveDiagonal;
    exports.MoveDown = MoveDown;
    exports.MoveDownIcon = MoveDown;
    exports.MoveDownLeft = MoveDownLeft;
    exports.MoveDownLeftIcon = MoveDownLeft;
    exports.MoveDownRight = MoveDownRight;
    exports.MoveDownRightIcon = MoveDownRight;
    exports.MoveHorizontal = MoveHorizontal;
    exports.MoveHorizontalIcon = MoveHorizontal;
    exports.MoveIcon = Move;
    exports.MoveLeft = MoveLeft;
    exports.MoveLeftIcon = MoveLeft;
    exports.MoveRight = MoveRight;
    exports.MoveRightIcon = MoveRight;
    exports.MoveUp = MoveUp;
    exports.MoveUpIcon = MoveUp;
    exports.MoveUpLeft = MoveUpLeft;
    exports.MoveUpLeftIcon = MoveUpLeft;
    exports.MoveUpRight = MoveUpRight;
    exports.MoveUpRightIcon = MoveUpRight;
    exports.MoveVertical = MoveVertical;
    exports.MoveVerticalIcon = MoveVertical;
    exports.Music = Music;
    exports.Music2 = Music2;
    exports.Music2Icon = Music2;
    exports.Music3 = Music3;
    exports.Music3Icon = Music3;
    exports.Music4 = Music4;
    exports.Music4Icon = Music4;
    exports.MusicIcon = Music;
    exports.Navigation = Navigation;
    exports.Navigation2 = Navigation2;
    exports.Navigation2Icon = Navigation2;
    exports.Navigation2Off = Navigation2Off;
    exports.Navigation2OffIcon = Navigation2Off;
    exports.NavigationIcon = Navigation;
    exports.NavigationOff = NavigationOff;
    exports.NavigationOffIcon = NavigationOff;
    exports.Network = Network;
    exports.NetworkIcon = Network;
    exports.Newspaper = Newspaper;
    exports.NewspaperIcon = Newspaper;
    exports.Nfc = Nfc;
    exports.NfcIcon = Nfc;
    exports.Notebook = Notebook;
    exports.NotebookIcon = Notebook;
    exports.NotebookPen = NotebookPen;
    exports.NotebookPenIcon = NotebookPen;
    exports.NotebookTabs = NotebookTabs;
    exports.NotebookTabsIcon = NotebookTabs;
    exports.NotebookText = NotebookText;
    exports.NotebookTextIcon = NotebookText;
    exports.NotepadText = NotepadText;
    exports.NotepadTextDashed = NotepadTextDashed;
    exports.NotepadTextDashedIcon = NotepadTextDashed;
    exports.NotepadTextIcon = NotepadText;
    exports.Nut = Nut;
    exports.NutIcon = Nut;
    exports.NutOff = NutOff;
    exports.NutOffIcon = NutOff;
    exports.Octagon = Octagon;
    exports.OctagonAlert = OctagonAlert;
    exports.OctagonAlertIcon = OctagonAlert;
    exports.OctagonIcon = Octagon;
    exports.OctagonMinus = OctagonMinus;
    exports.OctagonMinusIcon = OctagonMinus;
    exports.OctagonPause = OctagonPause;
    exports.OctagonPauseIcon = OctagonPause;
    exports.OctagonX = OctagonX;
    exports.OctagonXIcon = OctagonX;
    exports.Omega = Omega;
    exports.OmegaIcon = Omega;
    exports.Option = Option;
    exports.OptionIcon = Option;
    exports.Orbit = Orbit;
    exports.OrbitIcon = Orbit;
    exports.Origami = Origami;
    exports.OrigamiIcon = Origami;
    exports.Outdent = IndentDecrease;
    exports.OutdentIcon = IndentDecrease;
    exports.Package = Package;
    exports.Package2 = Package2;
    exports.Package2Icon = Package2;
    exports.PackageCheck = PackageCheck;
    exports.PackageCheckIcon = PackageCheck;
    exports.PackageIcon = Package;
    exports.PackageMinus = PackageMinus;
    exports.PackageMinusIcon = PackageMinus;
    exports.PackageOpen = PackageOpen;
    exports.PackageOpenIcon = PackageOpen;
    exports.PackagePlus = PackagePlus;
    exports.PackagePlusIcon = PackagePlus;
    exports.PackageSearch = PackageSearch;
    exports.PackageSearchIcon = PackageSearch;
    exports.PackageX = PackageX;
    exports.PackageXIcon = PackageX;
    exports.PaintBucket = PaintBucket;
    exports.PaintBucketIcon = PaintBucket;
    exports.PaintRoller = PaintRoller;
    exports.PaintRollerIcon = PaintRoller;
    exports.Paintbrush = Paintbrush;
    exports.Paintbrush2 = PaintbrushVertical;
    exports.Paintbrush2Icon = PaintbrushVertical;
    exports.PaintbrushIcon = Paintbrush;
    exports.PaintbrushVertical = PaintbrushVertical;
    exports.PaintbrushVerticalIcon = PaintbrushVertical;
    exports.Palette = Palette;
    exports.PaletteIcon = Palette;
    exports.Palmtree = TreePalm;
    exports.PalmtreeIcon = TreePalm;
    exports.PanelBottom = PanelBottom;
    exports.PanelBottomClose = PanelBottomClose;
    exports.PanelBottomCloseIcon = PanelBottomClose;
    exports.PanelBottomDashed = PanelBottomDashed;
    exports.PanelBottomDashedIcon = PanelBottomDashed;
    exports.PanelBottomIcon = PanelBottom;
    exports.PanelBottomInactive = PanelBottomDashed;
    exports.PanelBottomInactiveIcon = PanelBottomDashed;
    exports.PanelBottomOpen = PanelBottomOpen;
    exports.PanelBottomOpenIcon = PanelBottomOpen;
    exports.PanelLeft = PanelLeft;
    exports.PanelLeftClose = PanelLeftClose;
    exports.PanelLeftCloseIcon = PanelLeftClose;
    exports.PanelLeftDashed = PanelLeftDashed;
    exports.PanelLeftDashedIcon = PanelLeftDashed;
    exports.PanelLeftIcon = PanelLeft;
    exports.PanelLeftInactive = PanelLeftDashed;
    exports.PanelLeftInactiveIcon = PanelLeftDashed;
    exports.PanelLeftOpen = PanelLeftOpen;
    exports.PanelLeftOpenIcon = PanelLeftOpen;
    exports.PanelRight = PanelRight;
    exports.PanelRightClose = PanelRightClose;
    exports.PanelRightCloseIcon = PanelRightClose;
    exports.PanelRightDashed = PanelRightDashed;
    exports.PanelRightDashedIcon = PanelRightDashed;
    exports.PanelRightIcon = PanelRight;
    exports.PanelRightInactive = PanelRightDashed;
    exports.PanelRightInactiveIcon = PanelRightDashed;
    exports.PanelRightOpen = PanelRightOpen;
    exports.PanelRightOpenIcon = PanelRightOpen;
    exports.PanelTop = PanelTop;
    exports.PanelTopClose = PanelTopClose;
    exports.PanelTopCloseIcon = PanelTopClose;
    exports.PanelTopDashed = PanelTopDashed;
    exports.PanelTopDashedIcon = PanelTopDashed;
    exports.PanelTopIcon = PanelTop;
    exports.PanelTopInactive = PanelTopDashed;
    exports.PanelTopInactiveIcon = PanelTopDashed;
    exports.PanelTopOpen = PanelTopOpen;
    exports.PanelTopOpenIcon = PanelTopOpen;
    exports.PanelsLeftBottom = PanelsLeftBottom;
    exports.PanelsLeftBottomIcon = PanelsLeftBottom;
    exports.PanelsLeftRight = Columns3;
    exports.PanelsLeftRightIcon = Columns3;
    exports.PanelsRightBottom = PanelsRightBottom;
    exports.PanelsRightBottomIcon = PanelsRightBottom;
    exports.PanelsTopBottom = Rows3;
    exports.PanelsTopBottomIcon = Rows3;
    exports.PanelsTopLeft = PanelsTopLeft;
    exports.PanelsTopLeftIcon = PanelsTopLeft;
    exports.Paperclip = Paperclip;
    exports.PaperclipIcon = Paperclip;
    exports.Parentheses = Parentheses;
    exports.ParenthesesIcon = Parentheses;
    exports.ParkingCircle = CircleParking;
    exports.ParkingCircleIcon = CircleParking;
    exports.ParkingCircleOff = CircleParkingOff;
    exports.ParkingCircleOffIcon = CircleParkingOff;
    exports.ParkingMeter = ParkingMeter;
    exports.ParkingMeterIcon = ParkingMeter;
    exports.ParkingSquare = SquareParking;
    exports.ParkingSquareIcon = SquareParking;
    exports.ParkingSquareOff = SquareParkingOff;
    exports.ParkingSquareOffIcon = SquareParkingOff;
    exports.PartyPopper = PartyPopper;
    exports.PartyPopperIcon = PartyPopper;
    exports.Pause = Pause;
    exports.PauseCircle = CirclePause;
    exports.PauseCircleIcon = CirclePause;
    exports.PauseIcon = Pause;
    exports.PauseOctagon = OctagonPause;
    exports.PauseOctagonIcon = OctagonPause;
    exports.PawPrint = PawPrint;
    exports.PawPrintIcon = PawPrint;
    exports.PcCase = PcCase;
    exports.PcCaseIcon = PcCase;
    exports.Pen = Pen;
    exports.PenBox = SquarePen;
    exports.PenBoxIcon = SquarePen;
    exports.PenIcon = Pen;
    exports.PenLine = PenLine;
    exports.PenLineIcon = PenLine;
    exports.PenOff = PenOff;
    exports.PenOffIcon = PenOff;
    exports.PenSquare = SquarePen;
    exports.PenSquareIcon = SquarePen;
    exports.PenTool = PenTool;
    exports.PenToolIcon = PenTool;
    exports.Pencil = Pencil;
    exports.PencilIcon = Pencil;
    exports.PencilLine = PencilLine;
    exports.PencilLineIcon = PencilLine;
    exports.PencilOff = PencilOff;
    exports.PencilOffIcon = PencilOff;
    exports.PencilRuler = PencilRuler;
    exports.PencilRulerIcon = PencilRuler;
    exports.Pentagon = Pentagon;
    exports.PentagonIcon = Pentagon;
    exports.Percent = Percent;
    exports.PercentCircle = CirclePercent;
    exports.PercentCircleIcon = CirclePercent;
    exports.PercentDiamond = DiamondPercent;
    exports.PercentDiamondIcon = DiamondPercent;
    exports.PercentIcon = Percent;
    exports.PercentSquare = SquarePercent;
    exports.PercentSquareIcon = SquarePercent;
    exports.PersonStanding = PersonStanding;
    exports.PersonStandingIcon = PersonStanding;
    exports.PhilippinePeso = PhilippinePeso;
    exports.PhilippinePesoIcon = PhilippinePeso;
    exports.Phone = Phone;
    exports.PhoneCall = PhoneCall;
    exports.PhoneCallIcon = PhoneCall;
    exports.PhoneForwarded = PhoneForwarded;
    exports.PhoneForwardedIcon = PhoneForwarded;
    exports.PhoneIcon = Phone;
    exports.PhoneIncoming = PhoneIncoming;
    exports.PhoneIncomingIcon = PhoneIncoming;
    exports.PhoneMissed = PhoneMissed;
    exports.PhoneMissedIcon = PhoneMissed;
    exports.PhoneOff = PhoneOff;
    exports.PhoneOffIcon = PhoneOff;
    exports.PhoneOutgoing = PhoneOutgoing;
    exports.PhoneOutgoingIcon = PhoneOutgoing;
    exports.Pi = Pi;
    exports.PiIcon = Pi;
    exports.PiSquare = SquarePi;
    exports.PiSquareIcon = SquarePi;
    exports.Piano = Piano;
    exports.PianoIcon = Piano;
    exports.Pickaxe = Pickaxe;
    exports.PickaxeIcon = Pickaxe;
    exports.PictureInPicture = PictureInPicture;
    exports.PictureInPicture2 = PictureInPicture2;
    exports.PictureInPicture2Icon = PictureInPicture2;
    exports.PictureInPictureIcon = PictureInPicture;
    exports.PieChart = ChartPie;
    exports.PieChartIcon = ChartPie;
    exports.PiggyBank = PiggyBank;
    exports.PiggyBankIcon = PiggyBank;
    exports.Pilcrow = Pilcrow;
    exports.PilcrowIcon = Pilcrow;
    exports.PilcrowLeft = PilcrowLeft;
    exports.PilcrowLeftIcon = PilcrowLeft;
    exports.PilcrowRight = PilcrowRight;
    exports.PilcrowRightIcon = PilcrowRight;
    exports.PilcrowSquare = SquarePilcrow;
    exports.PilcrowSquareIcon = SquarePilcrow;
    exports.Pill = Pill;
    exports.PillBottle = PillBottle;
    exports.PillBottleIcon = PillBottle;
    exports.PillIcon = Pill;
    exports.Pin = Pin;
    exports.PinIcon = Pin;
    exports.PinOff = PinOff;
    exports.PinOffIcon = PinOff;
    exports.Pipette = Pipette;
    exports.PipetteIcon = Pipette;
    exports.Pizza = Pizza;
    exports.PizzaIcon = Pizza;
    exports.Plane = Plane;
    exports.PlaneIcon = Plane;
    exports.PlaneLanding = PlaneLanding;
    exports.PlaneLandingIcon = PlaneLanding;
    exports.PlaneTakeoff = PlaneTakeoff;
    exports.PlaneTakeoffIcon = PlaneTakeoff;
    exports.Play = Play;
    exports.PlayCircle = CirclePlay;
    exports.PlayCircleIcon = CirclePlay;
    exports.PlayIcon = Play;
    exports.PlaySquare = SquarePlay;
    exports.PlaySquareIcon = SquarePlay;
    exports.Plug = Plug;
    exports.Plug2 = Plug2;
    exports.Plug2Icon = Plug2;
    exports.PlugIcon = Plug;
    exports.PlugZap = PlugZap;
    exports.PlugZap2 = PlugZap;
    exports.PlugZap2Icon = PlugZap;
    exports.PlugZapIcon = PlugZap;
    exports.Plus = Plus;
    exports.PlusCircle = CirclePlus;
    exports.PlusCircleIcon = CirclePlus;
    exports.PlusIcon = Plus;
    exports.PlusSquare = SquarePlus;
    exports.PlusSquareIcon = SquarePlus;
    exports.Pocket = Pocket;
    exports.PocketIcon = Pocket;
    exports.PocketKnife = PocketKnife;
    exports.PocketKnifeIcon = PocketKnife;
    exports.Podcast = Podcast;
    exports.PodcastIcon = Podcast;
    exports.Pointer = Pointer;
    exports.PointerIcon = Pointer;
    exports.PointerOff = PointerOff;
    exports.PointerOffIcon = PointerOff;
    exports.Popcorn = Popcorn;
    exports.PopcornIcon = Popcorn;
    exports.Popsicle = Popsicle;
    exports.PopsicleIcon = Popsicle;
    exports.PoundSterling = PoundSterling;
    exports.PoundSterlingIcon = PoundSterling;
    exports.Power = Power;
    exports.PowerCircle = CirclePower;
    exports.PowerCircleIcon = CirclePower;
    exports.PowerIcon = Power;
    exports.PowerOff = PowerOff;
    exports.PowerOffIcon = PowerOff;
    exports.PowerSquare = SquarePower;
    exports.PowerSquareIcon = SquarePower;
    exports.Presentation = Presentation;
    exports.PresentationIcon = Presentation;
    exports.Printer = Printer;
    exports.PrinterCheck = PrinterCheck;
    exports.PrinterCheckIcon = PrinterCheck;
    exports.PrinterIcon = Printer;
    exports.Projector = Projector;
    exports.ProjectorIcon = Projector;
    exports.Proportions = Proportions;
    exports.ProportionsIcon = Proportions;
    exports.Puzzle = Puzzle;
    exports.PuzzleIcon = Puzzle;
    exports.Pyramid = Pyramid;
    exports.PyramidIcon = Pyramid;
    exports.QrCode = QrCode;
    exports.QrCodeIcon = QrCode;
    exports.Quote = Quote;
    exports.QuoteIcon = Quote;
    exports.Rabbit = Rabbit;
    exports.RabbitIcon = Rabbit;
    exports.Radar = Radar;
    exports.RadarIcon = Radar;
    exports.Radiation = Radiation;
    exports.RadiationIcon = Radiation;
    exports.Radical = Radical;
    exports.RadicalIcon = Radical;
    exports.Radio = Radio;
    exports.RadioIcon = Radio;
    exports.RadioReceiver = RadioReceiver;
    exports.RadioReceiverIcon = RadioReceiver;
    exports.RadioTower = RadioTower;
    exports.RadioTowerIcon = RadioTower;
    exports.Radius = Radius;
    exports.RadiusIcon = Radius;
    exports.RailSymbol = RailSymbol;
    exports.RailSymbolIcon = RailSymbol;
    exports.Rainbow = Rainbow;
    exports.RainbowIcon = Rainbow;
    exports.Rat = Rat;
    exports.RatIcon = Rat;
    exports.Ratio = Ratio;
    exports.RatioIcon = Ratio;
    exports.Receipt = Receipt;
    exports.ReceiptCent = ReceiptCent;
    exports.ReceiptCentIcon = ReceiptCent;
    exports.ReceiptEuro = ReceiptEuro;
    exports.ReceiptEuroIcon = ReceiptEuro;
    exports.ReceiptIcon = Receipt;
    exports.ReceiptIndianRupee = ReceiptIndianRupee;
    exports.ReceiptIndianRupeeIcon = ReceiptIndianRupee;
    exports.ReceiptJapaneseYen = ReceiptJapaneseYen;
    exports.ReceiptJapaneseYenIcon = ReceiptJapaneseYen;
    exports.ReceiptPoundSterling = ReceiptPoundSterling;
    exports.ReceiptPoundSterlingIcon = ReceiptPoundSterling;
    exports.ReceiptRussianRuble = ReceiptRussianRuble;
    exports.ReceiptRussianRubleIcon = ReceiptRussianRuble;
    exports.ReceiptSwissFranc = ReceiptSwissFranc;
    exports.ReceiptSwissFrancIcon = ReceiptSwissFranc;
    exports.ReceiptText = ReceiptText;
    exports.ReceiptTextIcon = ReceiptText;
    exports.RectangleEllipsis = RectangleEllipsis;
    exports.RectangleEllipsisIcon = RectangleEllipsis;
    exports.RectangleHorizontal = RectangleHorizontal;
    exports.RectangleHorizontalIcon = RectangleHorizontal;
    exports.RectangleVertical = RectangleVertical;
    exports.RectangleVerticalIcon = RectangleVertical;
    exports.Recycle = Recycle;
    exports.RecycleIcon = Recycle;
    exports.Redo = Redo;
    exports.Redo2 = Redo2;
    exports.Redo2Icon = Redo2;
    exports.RedoDot = RedoDot;
    exports.RedoDotIcon = RedoDot;
    exports.RedoIcon = Redo;
    exports.RefreshCcw = RefreshCcw;
    exports.RefreshCcwDot = RefreshCcwDot;
    exports.RefreshCcwDotIcon = RefreshCcwDot;
    exports.RefreshCcwIcon = RefreshCcw;
    exports.RefreshCw = RefreshCw;
    exports.RefreshCwIcon = RefreshCw;
    exports.RefreshCwOff = RefreshCwOff;
    exports.RefreshCwOffIcon = RefreshCwOff;
    exports.Refrigerator = Refrigerator;
    exports.RefrigeratorIcon = Refrigerator;
    exports.Regex = Regex;
    exports.RegexIcon = Regex;
    exports.RemoveFormatting = RemoveFormatting;
    exports.RemoveFormattingIcon = RemoveFormatting;
    exports.Repeat = Repeat;
    exports.Repeat1 = Repeat1;
    exports.Repeat1Icon = Repeat1;
    exports.Repeat2 = Repeat2;
    exports.Repeat2Icon = Repeat2;
    exports.RepeatIcon = Repeat;
    exports.Replace = Replace;
    exports.ReplaceAll = ReplaceAll;
    exports.ReplaceAllIcon = ReplaceAll;
    exports.ReplaceIcon = Replace;
    exports.Reply = Reply;
    exports.ReplyAll = ReplyAll;
    exports.ReplyAllIcon = ReplyAll;
    exports.ReplyIcon = Reply;
    exports.Rewind = Rewind;
    exports.RewindIcon = Rewind;
    exports.Ribbon = Ribbon;
    exports.RibbonIcon = Ribbon;
    exports.Rocket = Rocket;
    exports.RocketIcon = Rocket;
    exports.RockingChair = RockingChair;
    exports.RockingChairIcon = RockingChair;
    exports.RollerCoaster = RollerCoaster;
    exports.RollerCoasterIcon = RollerCoaster;
    exports.Rotate3D = Rotate3d;
    exports.Rotate3DIcon = Rotate3d;
    exports.Rotate3d = Rotate3d;
    exports.Rotate3dIcon = Rotate3d;
    exports.RotateCcw = RotateCcw;
    exports.RotateCcwIcon = RotateCcw;
    exports.RotateCcwSquare = RotateCcwSquare;
    exports.RotateCcwSquareIcon = RotateCcwSquare;
    exports.RotateCw = RotateCw;
    exports.RotateCwIcon = RotateCw;
    exports.RotateCwSquare = RotateCwSquare;
    exports.RotateCwSquareIcon = RotateCwSquare;
    exports.Route = Route;
    exports.RouteIcon = Route;
    exports.RouteOff = RouteOff;
    exports.RouteOffIcon = RouteOff;
    exports.Router = Router;
    exports.RouterIcon = Router;
    exports.Rows = Rows2;
    exports.Rows2 = Rows2;
    exports.Rows2Icon = Rows2;
    exports.Rows3 = Rows3;
    exports.Rows3Icon = Rows3;
    exports.Rows4 = Rows4;
    exports.Rows4Icon = Rows4;
    exports.RowsIcon = Rows2;
    exports.Rss = Rss;
    exports.RssIcon = Rss;
    exports.Ruler = Ruler;
    exports.RulerIcon = Ruler;
    exports.RussianRuble = RussianRuble;
    exports.RussianRubleIcon = RussianRuble;
    exports.Sailboat = Sailboat;
    exports.SailboatIcon = Sailboat;
    exports.Salad = Salad;
    exports.SaladIcon = Salad;
    exports.Sandwich = Sandwich;
    exports.SandwichIcon = Sandwich;
    exports.Satellite = Satellite;
    exports.SatelliteDish = SatelliteDish;
    exports.SatelliteDishIcon = SatelliteDish;
    exports.SatelliteIcon = Satellite;
    exports.Save = Save;
    exports.SaveAll = SaveAll;
    exports.SaveAllIcon = SaveAll;
    exports.SaveIcon = Save;
    exports.SaveOff = SaveOff;
    exports.SaveOffIcon = SaveOff;
    exports.Scale = Scale;
    exports.Scale3D = Scale3d;
    exports.Scale3DIcon = Scale3d;
    exports.Scale3d = Scale3d;
    exports.Scale3dIcon = Scale3d;
    exports.ScaleIcon = Scale;
    exports.Scaling = Scaling;
    exports.ScalingIcon = Scaling;
    exports.Scan = Scan;
    exports.ScanBarcode = ScanBarcode;
    exports.ScanBarcodeIcon = ScanBarcode;
    exports.ScanEye = ScanEye;
    exports.ScanEyeIcon = ScanEye;
    exports.ScanFace = ScanFace;
    exports.ScanFaceIcon = ScanFace;
    exports.ScanIcon = Scan;
    exports.ScanLine = ScanLine;
    exports.ScanLineIcon = ScanLine;
    exports.ScanQrCode = ScanQrCode;
    exports.ScanQrCodeIcon = ScanQrCode;
    exports.ScanSearch = ScanSearch;
    exports.ScanSearchIcon = ScanSearch;
    exports.ScanText = ScanText;
    exports.ScanTextIcon = ScanText;
    exports.ScatterChart = ChartScatter;
    exports.ScatterChartIcon = ChartScatter;
    exports.School = School;
    exports.School2 = University;
    exports.School2Icon = University;
    exports.SchoolIcon = School;
    exports.Scissors = Scissors;
    exports.ScissorsIcon = Scissors;
    exports.ScissorsLineDashed = ScissorsLineDashed;
    exports.ScissorsLineDashedIcon = ScissorsLineDashed;
    exports.ScissorsSquare = SquareScissors;
    exports.ScissorsSquareDashedBottom = SquareBottomDashedScissors;
    exports.ScissorsSquareDashedBottomIcon = SquareBottomDashedScissors;
    exports.ScissorsSquareIcon = SquareScissors;
    exports.ScreenShare = ScreenShare;
    exports.ScreenShareIcon = ScreenShare;
    exports.ScreenShareOff = ScreenShareOff;
    exports.ScreenShareOffIcon = ScreenShareOff;
    exports.Scroll = Scroll;
    exports.ScrollIcon = Scroll;
    exports.ScrollText = ScrollText;
    exports.ScrollTextIcon = ScrollText;
    exports.Search = Search;
    exports.SearchCheck = SearchCheck;
    exports.SearchCheckIcon = SearchCheck;
    exports.SearchCode = SearchCode;
    exports.SearchCodeIcon = SearchCode;
    exports.SearchIcon = Search;
    exports.SearchSlash = SearchSlash;
    exports.SearchSlashIcon = SearchSlash;
    exports.SearchX = SearchX;
    exports.SearchXIcon = SearchX;
    exports.Section = Section;
    exports.SectionIcon = Section;
    exports.Send = Send;
    exports.SendHorizonal = SendHorizontal;
    exports.SendHorizonalIcon = SendHorizontal;
    exports.SendHorizontal = SendHorizontal;
    exports.SendHorizontalIcon = SendHorizontal;
    exports.SendIcon = Send;
    exports.SendToBack = SendToBack;
    exports.SendToBackIcon = SendToBack;
    exports.SeparatorHorizontal = SeparatorHorizontal;
    exports.SeparatorHorizontalIcon = SeparatorHorizontal;
    exports.SeparatorVertical = SeparatorVertical;
    exports.SeparatorVerticalIcon = SeparatorVertical;
    exports.Server = Server;
    exports.ServerCog = ServerCog;
    exports.ServerCogIcon = ServerCog;
    exports.ServerCrash = ServerCrash;
    exports.ServerCrashIcon = ServerCrash;
    exports.ServerIcon = Server;
    exports.ServerOff = ServerOff;
    exports.ServerOffIcon = ServerOff;
    exports.Settings = Settings;
    exports.Settings2 = Settings2;
    exports.Settings2Icon = Settings2;
    exports.SettingsIcon = Settings;
    exports.Shapes = Shapes;
    exports.ShapesIcon = Shapes;
    exports.Share = Share;
    exports.Share2 = Share2;
    exports.Share2Icon = Share2;
    exports.ShareIcon = Share;
    exports.Sheet = Sheet;
    exports.SheetIcon = Sheet;
    exports.Shell = Shell;
    exports.ShellIcon = Shell;
    exports.Shield = Shield;
    exports.ShieldAlert = ShieldAlert;
    exports.ShieldAlertIcon = ShieldAlert;
    exports.ShieldBan = ShieldBan;
    exports.ShieldBanIcon = ShieldBan;
    exports.ShieldCheck = ShieldCheck;
    exports.ShieldCheckIcon = ShieldCheck;
    exports.ShieldClose = ShieldX;
    exports.ShieldCloseIcon = ShieldX;
    exports.ShieldEllipsis = ShieldEllipsis;
    exports.ShieldEllipsisIcon = ShieldEllipsis;
    exports.ShieldHalf = ShieldHalf;
    exports.ShieldHalfIcon = ShieldHalf;
    exports.ShieldIcon = Shield;
    exports.ShieldMinus = ShieldMinus;
    exports.ShieldMinusIcon = ShieldMinus;
    exports.ShieldOff = ShieldOff;
    exports.ShieldOffIcon = ShieldOff;
    exports.ShieldPlus = ShieldPlus;
    exports.ShieldPlusIcon = ShieldPlus;
    exports.ShieldQuestion = ShieldQuestion;
    exports.ShieldQuestionIcon = ShieldQuestion;
    exports.ShieldX = ShieldX;
    exports.ShieldXIcon = ShieldX;
    exports.Ship = Ship;
    exports.ShipIcon = Ship;
    exports.ShipWheel = ShipWheel;
    exports.ShipWheelIcon = ShipWheel;
    exports.Shirt = Shirt;
    exports.ShirtIcon = Shirt;
    exports.ShoppingBag = ShoppingBag;
    exports.ShoppingBagIcon = ShoppingBag;
    exports.ShoppingBasket = ShoppingBasket;
    exports.ShoppingBasketIcon = ShoppingBasket;
    exports.ShoppingCart = ShoppingCart;
    exports.ShoppingCartIcon = ShoppingCart;
    exports.Shovel = Shovel;
    exports.ShovelIcon = Shovel;
    exports.ShowerHead = ShowerHead;
    exports.ShowerHeadIcon = ShowerHead;
    exports.Shrink = Shrink;
    exports.ShrinkIcon = Shrink;
    exports.Shrub = Shrub;
    exports.ShrubIcon = Shrub;
    exports.Shuffle = Shuffle;
    exports.ShuffleIcon = Shuffle;
    exports.Sidebar = PanelLeft;
    exports.SidebarClose = PanelLeftClose;
    exports.SidebarCloseIcon = PanelLeftClose;
    exports.SidebarIcon = PanelLeft;
    exports.SidebarOpen = PanelLeftOpen;
    exports.SidebarOpenIcon = PanelLeftOpen;
    exports.Sigma = Sigma;
    exports.SigmaIcon = Sigma;
    exports.SigmaSquare = SquareSigma;
    exports.SigmaSquareIcon = SquareSigma;
    exports.Signal = Signal;
    exports.SignalHigh = SignalHigh;
    exports.SignalHighIcon = SignalHigh;
    exports.SignalIcon = Signal;
    exports.SignalLow = SignalLow;
    exports.SignalLowIcon = SignalLow;
    exports.SignalMedium = SignalMedium;
    exports.SignalMediumIcon = SignalMedium;
    exports.SignalZero = SignalZero;
    exports.SignalZeroIcon = SignalZero;
    exports.Signature = Signature;
    exports.SignatureIcon = Signature;
    exports.Signpost = Signpost;
    exports.SignpostBig = SignpostBig;
    exports.SignpostBigIcon = SignpostBig;
    exports.SignpostIcon = Signpost;
    exports.Siren = Siren;
    exports.SirenIcon = Siren;
    exports.SkipBack = SkipBack;
    exports.SkipBackIcon = SkipBack;
    exports.SkipForward = SkipForward;
    exports.SkipForwardIcon = SkipForward;
    exports.Skull = Skull;
    exports.SkullIcon = Skull;
    exports.Slack = Slack;
    exports.SlackIcon = Slack;
    exports.Slash = Slash;
    exports.SlashIcon = Slash;
    exports.SlashSquare = SquareSlash;
    exports.SlashSquareIcon = SquareSlash;
    exports.Slice = Slice;
    exports.SliceIcon = Slice;
    exports.Sliders = SlidersVertical;
    exports.SlidersHorizontal = SlidersHorizontal;
    exports.SlidersHorizontalIcon = SlidersHorizontal;
    exports.SlidersIcon = SlidersVertical;
    exports.SlidersVertical = SlidersVertical;
    exports.SlidersVerticalIcon = SlidersVertical;
    exports.Smartphone = Smartphone;
    exports.SmartphoneCharging = SmartphoneCharging;
    exports.SmartphoneChargingIcon = SmartphoneCharging;
    exports.SmartphoneIcon = Smartphone;
    exports.SmartphoneNfc = SmartphoneNfc;
    exports.SmartphoneNfcIcon = SmartphoneNfc;
    exports.Smile = Smile;
    exports.SmileIcon = Smile;
    exports.SmilePlus = SmilePlus;
    exports.SmilePlusIcon = SmilePlus;
    exports.Snail = Snail;
    exports.SnailIcon = Snail;
    exports.Snowflake = Snowflake;
    exports.SnowflakeIcon = Snowflake;
    exports.Sofa = Sofa;
    exports.SofaIcon = Sofa;
    exports.SortAsc = ArrowUpNarrowWide;
    exports.SortAscIcon = ArrowUpNarrowWide;
    exports.SortDesc = ArrowDownWideNarrow;
    exports.SortDescIcon = ArrowDownWideNarrow;
    exports.Soup = Soup;
    exports.SoupIcon = Soup;
    exports.Space = Space;
    exports.SpaceIcon = Space;
    exports.Spade = Spade;
    exports.SpadeIcon = Spade;
    exports.Sparkle = Sparkle;
    exports.SparkleIcon = Sparkle;
    exports.Sparkles = Sparkles;
    exports.SparklesIcon = Sparkles;
    exports.Speaker = Speaker;
    exports.SpeakerIcon = Speaker;
    exports.Speech = Speech;
    exports.SpeechIcon = Speech;
    exports.SpellCheck = SpellCheck;
    exports.SpellCheck2 = SpellCheck2;
    exports.SpellCheck2Icon = SpellCheck2;
    exports.SpellCheckIcon = SpellCheck;
    exports.Spline = Spline;
    exports.SplineIcon = Spline;
    exports.Split = Split;
    exports.SplitIcon = Split;
    exports.SplitSquareHorizontal = SquareSplitHorizontal;
    exports.SplitSquareHorizontalIcon = SquareSplitHorizontal;
    exports.SplitSquareVertical = SquareSplitVertical;
    exports.SplitSquareVerticalIcon = SquareSplitVertical;
    exports.SprayCan = SprayCan;
    exports.SprayCanIcon = SprayCan;
    exports.Sprout = Sprout;
    exports.SproutIcon = Sprout;
    exports.Square = Square;
    exports.SquareActivity = SquareActivity;
    exports.SquareActivityIcon = SquareActivity;
    exports.SquareArrowDown = SquareArrowDown;
    exports.SquareArrowDownIcon = SquareArrowDown;
    exports.SquareArrowDownLeft = SquareArrowDownLeft;
    exports.SquareArrowDownLeftIcon = SquareArrowDownLeft;
    exports.SquareArrowDownRight = SquareArrowDownRight;
    exports.SquareArrowDownRightIcon = SquareArrowDownRight;
    exports.SquareArrowLeft = SquareArrowLeft;
    exports.SquareArrowLeftIcon = SquareArrowLeft;
    exports.SquareArrowOutDownLeft = SquareArrowOutDownLeft;
    exports.SquareArrowOutDownLeftIcon = SquareArrowOutDownLeft;
    exports.SquareArrowOutDownRight = SquareArrowOutDownRight;
    exports.SquareArrowOutDownRightIcon = SquareArrowOutDownRight;
    exports.SquareArrowOutUpLeft = SquareArrowOutUpLeft;
    exports.SquareArrowOutUpLeftIcon = SquareArrowOutUpLeft;
    exports.SquareArrowOutUpRight = SquareArrowOutUpRight;
    exports.SquareArrowOutUpRightIcon = SquareArrowOutUpRight;
    exports.SquareArrowRight = SquareArrowRight;
    exports.SquareArrowRightIcon = SquareArrowRight;
    exports.SquareArrowUp = SquareArrowUp;
    exports.SquareArrowUpIcon = SquareArrowUp;
    exports.SquareArrowUpLeft = SquareArrowUpLeft;
    exports.SquareArrowUpLeftIcon = SquareArrowUpLeft;
    exports.SquareArrowUpRight = SquareArrowUpRight;
    exports.SquareArrowUpRightIcon = SquareArrowUpRight;
    exports.SquareAsterisk = SquareAsterisk;
    exports.SquareAsteriskIcon = SquareAsterisk;
    exports.SquareBottomDashedScissors = SquareBottomDashedScissors;
    exports.SquareBottomDashedScissorsIcon = SquareBottomDashedScissors;
    exports.SquareChartGantt = SquareChartGantt;
    exports.SquareChartGanttIcon = SquareChartGantt;
    exports.SquareCheck = SquareCheck;
    exports.SquareCheckBig = SquareCheckBig;
    exports.SquareCheckBigIcon = SquareCheckBig;
    exports.SquareCheckIcon = SquareCheck;
    exports.SquareChevronDown = SquareChevronDown;
    exports.SquareChevronDownIcon = SquareChevronDown;
    exports.SquareChevronLeft = SquareChevronLeft;
    exports.SquareChevronLeftIcon = SquareChevronLeft;
    exports.SquareChevronRight = SquareChevronRight;
    exports.SquareChevronRightIcon = SquareChevronRight;
    exports.SquareChevronUp = SquareChevronUp;
    exports.SquareChevronUpIcon = SquareChevronUp;
    exports.SquareCode = SquareCode;
    exports.SquareCodeIcon = SquareCode;
    exports.SquareDashed = SquareDashed;
    exports.SquareDashedBottom = SquareDashedBottom;
    exports.SquareDashedBottomCode = SquareDashedBottomCode;
    exports.SquareDashedBottomCodeIcon = SquareDashedBottomCode;
    exports.SquareDashedBottomIcon = SquareDashedBottom;
    exports.SquareDashedIcon = SquareDashed;
    exports.SquareDashedKanban = SquareDashedKanban;
    exports.SquareDashedKanbanIcon = SquareDashedKanban;
    exports.SquareDashedMousePointer = SquareDashedMousePointer;
    exports.SquareDashedMousePointerIcon = SquareDashedMousePointer;
    exports.SquareDivide = SquareDivide;
    exports.SquareDivideIcon = SquareDivide;
    exports.SquareDot = SquareDot;
    exports.SquareDotIcon = SquareDot;
    exports.SquareEqual = SquareEqual;
    exports.SquareEqualIcon = SquareEqual;
    exports.SquareFunction = SquareFunction;
    exports.SquareFunctionIcon = SquareFunction;
    exports.SquareGanttChart = SquareChartGantt;
    exports.SquareGanttChartIcon = SquareChartGantt;
    exports.SquareIcon = Square;
    exports.SquareKanban = SquareKanban;
    exports.SquareKanbanIcon = SquareKanban;
    exports.SquareLibrary = SquareLibrary;
    exports.SquareLibraryIcon = SquareLibrary;
    exports.SquareM = SquareM;
    exports.SquareMIcon = SquareM;
    exports.SquareMenu = SquareMenu;
    exports.SquareMenuIcon = SquareMenu;
    exports.SquareMinus = SquareMinus;
    exports.SquareMinusIcon = SquareMinus;
    exports.SquareMousePointer = SquareMousePointer;
    exports.SquareMousePointerIcon = SquareMousePointer;
    exports.SquareParking = SquareParking;
    exports.SquareParkingIcon = SquareParking;
    exports.SquareParkingOff = SquareParkingOff;
    exports.SquareParkingOffIcon = SquareParkingOff;
    exports.SquarePen = SquarePen;
    exports.SquarePenIcon = SquarePen;
    exports.SquarePercent = SquarePercent;
    exports.SquarePercentIcon = SquarePercent;
    exports.SquarePi = SquarePi;
    exports.SquarePiIcon = SquarePi;
    exports.SquarePilcrow = SquarePilcrow;
    exports.SquarePilcrowIcon = SquarePilcrow;
    exports.SquarePlay = SquarePlay;
    exports.SquarePlayIcon = SquarePlay;
    exports.SquarePlus = SquarePlus;
    exports.SquarePlusIcon = SquarePlus;
    exports.SquarePower = SquarePower;
    exports.SquarePowerIcon = SquarePower;
    exports.SquareRadical = SquareRadical;
    exports.SquareRadicalIcon = SquareRadical;
    exports.SquareScissors = SquareScissors;
    exports.SquareScissorsIcon = SquareScissors;
    exports.SquareSigma = SquareSigma;
    exports.SquareSigmaIcon = SquareSigma;
    exports.SquareSlash = SquareSlash;
    exports.SquareSlashIcon = SquareSlash;
    exports.SquareSplitHorizontal = SquareSplitHorizontal;
    exports.SquareSplitHorizontalIcon = SquareSplitHorizontal;
    exports.SquareSplitVertical = SquareSplitVertical;
    exports.SquareSplitVerticalIcon = SquareSplitVertical;
    exports.SquareSquare = SquareSquare;
    exports.SquareSquareIcon = SquareSquare;
    exports.SquareStack = SquareStack;
    exports.SquareStackIcon = SquareStack;
    exports.SquareTerminal = SquareTerminal;
    exports.SquareTerminalIcon = SquareTerminal;
    exports.SquareUser = SquareUser;
    exports.SquareUserIcon = SquareUser;
    exports.SquareUserRound = SquareUserRound;
    exports.SquareUserRoundIcon = SquareUserRound;
    exports.SquareX = SquareX;
    exports.SquareXIcon = SquareX;
    exports.Squircle = Squircle;
    exports.SquircleIcon = Squircle;
    exports.Squirrel = Squirrel;
    exports.SquirrelIcon = Squirrel;
    exports.Stamp = Stamp;
    exports.StampIcon = Stamp;
    exports.Star = Star;
    exports.StarHalf = StarHalf;
    exports.StarHalfIcon = StarHalf;
    exports.StarIcon = Star;
    exports.StarOff = StarOff;
    exports.StarOffIcon = StarOff;
    exports.Stars = Sparkles;
    exports.StarsIcon = Sparkles;
    exports.StepBack = StepBack;
    exports.StepBackIcon = StepBack;
    exports.StepForward = StepForward;
    exports.StepForwardIcon = StepForward;
    exports.Stethoscope = Stethoscope;
    exports.StethoscopeIcon = Stethoscope;
    exports.Sticker = Sticker;
    exports.StickerIcon = Sticker;
    exports.StickyNote = StickyNote;
    exports.StickyNoteIcon = StickyNote;
    exports.StopCircle = CircleStop;
    exports.StopCircleIcon = CircleStop;
    exports.Store = Store;
    exports.StoreIcon = Store;
    exports.StretchHorizontal = StretchHorizontal;
    exports.StretchHorizontalIcon = StretchHorizontal;
    exports.StretchVertical = StretchVertical;
    exports.StretchVerticalIcon = StretchVertical;
    exports.Strikethrough = Strikethrough;
    exports.StrikethroughIcon = Strikethrough;
    exports.Subscript = Subscript;
    exports.SubscriptIcon = Subscript;
    exports.Subtitles = Captions;
    exports.SubtitlesIcon = Captions;
    exports.Sun = Sun;
    exports.SunDim = SunDim;
    exports.SunDimIcon = SunDim;
    exports.SunIcon = Sun;
    exports.SunMedium = SunMedium;
    exports.SunMediumIcon = SunMedium;
    exports.SunMoon = SunMoon;
    exports.SunMoonIcon = SunMoon;
    exports.SunSnow = SunSnow;
    exports.SunSnowIcon = SunSnow;
    exports.Sunrise = Sunrise;
    exports.SunriseIcon = Sunrise;
    exports.Sunset = Sunset;
    exports.SunsetIcon = Sunset;
    exports.Superscript = Superscript;
    exports.SuperscriptIcon = Superscript;
    exports.SwatchBook = SwatchBook;
    exports.SwatchBookIcon = SwatchBook;
    exports.SwissFranc = SwissFranc;
    exports.SwissFrancIcon = SwissFranc;
    exports.SwitchCamera = SwitchCamera;
    exports.SwitchCameraIcon = SwitchCamera;
    exports.Sword = Sword;
    exports.SwordIcon = Sword;
    exports.Swords = Swords;
    exports.SwordsIcon = Swords;
    exports.Syringe = Syringe;
    exports.SyringeIcon = Syringe;
    exports.Table = Table;
    exports.Table2 = Table2;
    exports.Table2Icon = Table2;
    exports.TableCellsMerge = TableCellsMerge;
    exports.TableCellsMergeIcon = TableCellsMerge;
    exports.TableCellsSplit = TableCellsSplit;
    exports.TableCellsSplitIcon = TableCellsSplit;
    exports.TableColumnsSplit = TableColumnsSplit;
    exports.TableColumnsSplitIcon = TableColumnsSplit;
    exports.TableIcon = Table;
    exports.TableOfContents = TableOfContents;
    exports.TableOfContentsIcon = TableOfContents;
    exports.TableProperties = TableProperties;
    exports.TablePropertiesIcon = TableProperties;
    exports.TableRowsSplit = TableRowsSplit;
    exports.TableRowsSplitIcon = TableRowsSplit;
    exports.Tablet = Tablet;
    exports.TabletIcon = Tablet;
    exports.TabletSmartphone = TabletSmartphone;
    exports.TabletSmartphoneIcon = TabletSmartphone;
    exports.Tablets = Tablets;
    exports.TabletsIcon = Tablets;
    exports.Tag = Tag;
    exports.TagIcon = Tag;
    exports.Tags = Tags;
    exports.TagsIcon = Tags;
    exports.Tally1 = Tally1;
    exports.Tally1Icon = Tally1;
    exports.Tally2 = Tally2;
    exports.Tally2Icon = Tally2;
    exports.Tally3 = Tally3;
    exports.Tally3Icon = Tally3;
    exports.Tally4 = Tally4;
    exports.Tally4Icon = Tally4;
    exports.Tally5 = Tally5;
    exports.Tally5Icon = Tally5;
    exports.Tangent = Tangent;
    exports.TangentIcon = Tangent;
    exports.Target = Target;
    exports.TargetIcon = Target;
    exports.Telescope = Telescope;
    exports.TelescopeIcon = Telescope;
    exports.Tent = Tent;
    exports.TentIcon = Tent;
    exports.TentTree = TentTree;
    exports.TentTreeIcon = TentTree;
    exports.Terminal = Terminal;
    exports.TerminalIcon = Terminal;
    exports.TerminalSquare = SquareTerminal;
    exports.TerminalSquareIcon = SquareTerminal;
    exports.TestTube = TestTube;
    exports.TestTube2 = TestTubeDiagonal;
    exports.TestTube2Icon = TestTubeDiagonal;
    exports.TestTubeDiagonal = TestTubeDiagonal;
    exports.TestTubeDiagonalIcon = TestTubeDiagonal;
    exports.TestTubeIcon = TestTube;
    exports.TestTubes = TestTubes;
    exports.TestTubesIcon = TestTubes;
    exports.Text = Text;
    exports.TextCursor = TextCursor;
    exports.TextCursorIcon = TextCursor;
    exports.TextCursorInput = TextCursorInput;
    exports.TextCursorInputIcon = TextCursorInput;
    exports.TextIcon = Text;
    exports.TextQuote = TextQuote;
    exports.TextQuoteIcon = TextQuote;
    exports.TextSearch = TextSearch;
    exports.TextSearchIcon = TextSearch;
    exports.TextSelect = TextSelect;
    exports.TextSelectIcon = TextSelect;
    exports.TextSelection = TextSelect;
    exports.TextSelectionIcon = TextSelect;
    exports.Theater = Theater;
    exports.TheaterIcon = Theater;
    exports.Thermometer = Thermometer;
    exports.ThermometerIcon = Thermometer;
    exports.ThermometerSnowflake = ThermometerSnowflake;
    exports.ThermometerSnowflakeIcon = ThermometerSnowflake;
    exports.ThermometerSun = ThermometerSun;
    exports.ThermometerSunIcon = ThermometerSun;
    exports.ThumbsDown = ThumbsDown;
    exports.ThumbsDownIcon = ThumbsDown;
    exports.ThumbsUp = ThumbsUp;
    exports.ThumbsUpIcon = ThumbsUp;
    exports.Ticket = Ticket;
    exports.TicketCheck = TicketCheck;
    exports.TicketCheckIcon = TicketCheck;
    exports.TicketIcon = Ticket;
    exports.TicketMinus = TicketMinus;
    exports.TicketMinusIcon = TicketMinus;
    exports.TicketPercent = TicketPercent;
    exports.TicketPercentIcon = TicketPercent;
    exports.TicketPlus = TicketPlus;
    exports.TicketPlusIcon = TicketPlus;
    exports.TicketSlash = TicketSlash;
    exports.TicketSlashIcon = TicketSlash;
    exports.TicketX = TicketX;
    exports.TicketXIcon = TicketX;
    exports.Tickets = Tickets;
    exports.TicketsIcon = Tickets;
    exports.TicketsPlane = TicketsPlane;
    exports.TicketsPlaneIcon = TicketsPlane;
    exports.Timer = Timer;
    exports.TimerIcon = Timer;
    exports.TimerOff = TimerOff;
    exports.TimerOffIcon = TimerOff;
    exports.TimerReset = TimerReset;
    exports.TimerResetIcon = TimerReset;
    exports.ToggleLeft = ToggleLeft;
    exports.ToggleLeftIcon = ToggleLeft;
    exports.ToggleRight = ToggleRight;
    exports.ToggleRightIcon = ToggleRight;
    exports.Toilet = Toilet;
    exports.ToiletIcon = Toilet;
    exports.Tornado = Tornado;
    exports.TornadoIcon = Tornado;
    exports.Torus = Torus;
    exports.TorusIcon = Torus;
    exports.Touchpad = Touchpad;
    exports.TouchpadIcon = Touchpad;
    exports.TouchpadOff = TouchpadOff;
    exports.TouchpadOffIcon = TouchpadOff;
    exports.TowerControl = TowerControl;
    exports.TowerControlIcon = TowerControl;
    exports.ToyBrick = ToyBrick;
    exports.ToyBrickIcon = ToyBrick;
    exports.Tractor = Tractor;
    exports.TractorIcon = Tractor;
    exports.TrafficCone = TrafficCone;
    exports.TrafficConeIcon = TrafficCone;
    exports.Train = TramFront;
    exports.TrainFront = TrainFront;
    exports.TrainFrontIcon = TrainFront;
    exports.TrainFrontTunnel = TrainFrontTunnel;
    exports.TrainFrontTunnelIcon = TrainFrontTunnel;
    exports.TrainIcon = TramFront;
    exports.TrainTrack = TrainTrack;
    exports.TrainTrackIcon = TrainTrack;
    exports.TramFront = TramFront;
    exports.TramFrontIcon = TramFront;
    exports.Trash = Trash;
    exports.Trash2 = Trash2;
    exports.Trash2Icon = Trash2;
    exports.TrashIcon = Trash;
    exports.TreeDeciduous = TreeDeciduous;
    exports.TreeDeciduousIcon = TreeDeciduous;
    exports.TreePalm = TreePalm;
    exports.TreePalmIcon = TreePalm;
    exports.TreePine = TreePine;
    exports.TreePineIcon = TreePine;
    exports.Trees = Trees;
    exports.TreesIcon = Trees;
    exports.Trello = Trello;
    exports.TrelloIcon = Trello;
    exports.TrendingDown = TrendingDown;
    exports.TrendingDownIcon = TrendingDown;
    exports.TrendingUp = TrendingUp;
    exports.TrendingUpDown = TrendingUpDown;
    exports.TrendingUpDownIcon = TrendingUpDown;
    exports.TrendingUpIcon = TrendingUp;
    exports.Triangle = Triangle;
    exports.TriangleAlert = TriangleAlert;
    exports.TriangleAlertIcon = TriangleAlert;
    exports.TriangleIcon = Triangle;
    exports.TriangleRight = TriangleRight;
    exports.TriangleRightIcon = TriangleRight;
    exports.Trophy = Trophy;
    exports.TrophyIcon = Trophy;
    exports.Truck = Truck;
    exports.TruckIcon = Truck;
    exports.Turtle = Turtle;
    exports.TurtleIcon = Turtle;
    exports.Tv = Tv;
    exports.Tv2 = TvMinimal;
    exports.Tv2Icon = TvMinimal;
    exports.TvIcon = Tv;
    exports.TvMinimal = TvMinimal;
    exports.TvMinimalIcon = TvMinimal;
    exports.TvMinimalPlay = TvMinimalPlay;
    exports.TvMinimalPlayIcon = TvMinimalPlay;
    exports.Twitch = Twitch;
    exports.TwitchIcon = Twitch;
    exports.Twitter = Twitter;
    exports.TwitterIcon = Twitter;
    exports.Type = Type;
    exports.TypeIcon = Type;
    exports.TypeOutline = TypeOutline;
    exports.TypeOutlineIcon = TypeOutline;
    exports.Umbrella = Umbrella;
    exports.UmbrellaIcon = Umbrella;
    exports.UmbrellaOff = UmbrellaOff;
    exports.UmbrellaOffIcon = UmbrellaOff;
    exports.Underline = Underline;
    exports.UnderlineIcon = Underline;
    exports.Undo = Undo;
    exports.Undo2 = Undo2;
    exports.Undo2Icon = Undo2;
    exports.UndoDot = UndoDot;
    exports.UndoDotIcon = UndoDot;
    exports.UndoIcon = Undo;
    exports.UnfoldHorizontal = UnfoldHorizontal;
    exports.UnfoldHorizontalIcon = UnfoldHorizontal;
    exports.UnfoldVertical = UnfoldVertical;
    exports.UnfoldVerticalIcon = UnfoldVertical;
    exports.Ungroup = Ungroup;
    exports.UngroupIcon = Ungroup;
    exports.University = University;
    exports.UniversityIcon = University;
    exports.Unlink = Unlink;
    exports.Unlink2 = Unlink2;
    exports.Unlink2Icon = Unlink2;
    exports.UnlinkIcon = Unlink;
    exports.Unlock = LockOpen;
    exports.UnlockIcon = LockOpen;
    exports.UnlockKeyhole = LockKeyholeOpen;
    exports.UnlockKeyholeIcon = LockKeyholeOpen;
    exports.Unplug = Unplug;
    exports.UnplugIcon = Unplug;
    exports.Upload = Upload;
    exports.UploadCloud = CloudUpload;
    exports.UploadCloudIcon = CloudUpload;
    exports.UploadIcon = Upload;
    exports.Usb = Usb;
    exports.UsbIcon = Usb;
    exports.User = User;
    exports.User2 = UserRound;
    exports.User2Icon = UserRound;
    exports.UserCheck = UserCheck;
    exports.UserCheck2 = UserRoundCheck;
    exports.UserCheck2Icon = UserRoundCheck;
    exports.UserCheckIcon = UserCheck;
    exports.UserCircle = CircleUser;
    exports.UserCircle2 = CircleUserRound;
    exports.UserCircle2Icon = CircleUserRound;
    exports.UserCircleIcon = CircleUser;
    exports.UserCog = UserCog;
    exports.UserCog2 = UserRoundCog;
    exports.UserCog2Icon = UserRoundCog;
    exports.UserCogIcon = UserCog;
    exports.UserIcon = User;
    exports.UserMinus = UserMinus;
    exports.UserMinus2 = UserRoundMinus;
    exports.UserMinus2Icon = UserRoundMinus;
    exports.UserMinusIcon = UserMinus;
    exports.UserPen = UserPen;
    exports.UserPenIcon = UserPen;
    exports.UserPlus = UserPlus;
    exports.UserPlus2 = UserRoundPlus;
    exports.UserPlus2Icon = UserRoundPlus;
    exports.UserPlusIcon = UserPlus;
    exports.UserRound = UserRound;
    exports.UserRoundCheck = UserRoundCheck;
    exports.UserRoundCheckIcon = UserRoundCheck;
    exports.UserRoundCog = UserRoundCog;
    exports.UserRoundCogIcon = UserRoundCog;
    exports.UserRoundIcon = UserRound;
    exports.UserRoundMinus = UserRoundMinus;
    exports.UserRoundMinusIcon = UserRoundMinus;
    exports.UserRoundPen = UserRoundPen;
    exports.UserRoundPenIcon = UserRoundPen;
    exports.UserRoundPlus = UserRoundPlus;
    exports.UserRoundPlusIcon = UserRoundPlus;
    exports.UserRoundSearch = UserRoundSearch;
    exports.UserRoundSearchIcon = UserRoundSearch;
    exports.UserRoundX = UserRoundX;
    exports.UserRoundXIcon = UserRoundX;
    exports.UserSearch = UserSearch;
    exports.UserSearchIcon = UserSearch;
    exports.UserSquare = SquareUser;
    exports.UserSquare2 = SquareUserRound;
    exports.UserSquare2Icon = SquareUserRound;
    exports.UserSquareIcon = SquareUser;
    exports.UserX = UserX;
    exports.UserX2 = UserRoundX;
    exports.UserX2Icon = UserRoundX;
    exports.UserXIcon = UserX;
    exports.Users = Users;
    exports.Users2 = UsersRound;
    exports.Users2Icon = UsersRound;
    exports.UsersIcon = Users;
    exports.UsersRound = UsersRound;
    exports.UsersRoundIcon = UsersRound;
    exports.Utensils = Utensils;
    exports.UtensilsCrossed = UtensilsCrossed;
    exports.UtensilsCrossedIcon = UtensilsCrossed;
    exports.UtensilsIcon = Utensils;
    exports.UtilityPole = UtilityPole;
    exports.UtilityPoleIcon = UtilityPole;
    exports.Variable = Variable;
    exports.VariableIcon = Variable;
    exports.Vault = Vault;
    exports.VaultIcon = Vault;
    exports.Vegan = Vegan;
    exports.VeganIcon = Vegan;
    exports.VenetianMask = VenetianMask;
    exports.VenetianMaskIcon = VenetianMask;
    exports.Verified = BadgeCheck;
    exports.VerifiedIcon = BadgeCheck;
    exports.Vibrate = Vibrate;
    exports.VibrateIcon = Vibrate;
    exports.VibrateOff = VibrateOff;
    exports.VibrateOffIcon = VibrateOff;
    exports.Video = Video;
    exports.VideoIcon = Video;
    exports.VideoOff = VideoOff;
    exports.VideoOffIcon = VideoOff;
    exports.Videotape = Videotape;
    exports.VideotapeIcon = Videotape;
    exports.View = View;
    exports.ViewIcon = View;
    exports.Voicemail = Voicemail;
    exports.VoicemailIcon = Voicemail;
    exports.Volleyball = Volleyball;
    exports.VolleyballIcon = Volleyball;
    exports.Volume = Volume;
    exports.Volume1 = Volume1;
    exports.Volume1Icon = Volume1;
    exports.Volume2 = Volume2;
    exports.Volume2Icon = Volume2;
    exports.VolumeIcon = Volume;
    exports.VolumeOff = VolumeOff;
    exports.VolumeOffIcon = VolumeOff;
    exports.VolumeX = VolumeX;
    exports.VolumeXIcon = VolumeX;
    exports.Vote = Vote;
    exports.VoteIcon = Vote;
    exports.Wallet = Wallet;
    exports.Wallet2 = WalletMinimal;
    exports.Wallet2Icon = WalletMinimal;
    exports.WalletCards = WalletCards;
    exports.WalletCardsIcon = WalletCards;
    exports.WalletIcon = Wallet;
    exports.WalletMinimal = WalletMinimal;
    exports.WalletMinimalIcon = WalletMinimal;
    exports.Wallpaper = Wallpaper;
    exports.WallpaperIcon = Wallpaper;
    exports.Wand = Wand;
    exports.Wand2 = WandSparkles;
    exports.Wand2Icon = WandSparkles;
    exports.WandIcon = Wand;
    exports.WandSparkles = WandSparkles;
    exports.WandSparklesIcon = WandSparkles;
    exports.Warehouse = Warehouse;
    exports.WarehouseIcon = Warehouse;
    exports.WashingMachine = WashingMachine;
    exports.WashingMachineIcon = WashingMachine;
    exports.Watch = Watch;
    exports.WatchIcon = Watch;
    exports.Waves = Waves;
    exports.WavesIcon = Waves;
    exports.Waypoints = Waypoints;
    exports.WaypointsIcon = Waypoints;
    exports.Webcam = Webcam;
    exports.WebcamIcon = Webcam;
    exports.Webhook = Webhook;
    exports.WebhookIcon = Webhook;
    exports.WebhookOff = WebhookOff;
    exports.WebhookOffIcon = WebhookOff;
    exports.Weight = Weight;
    exports.WeightIcon = Weight;
    exports.Wheat = Wheat;
    exports.WheatIcon = Wheat;
    exports.WheatOff = WheatOff;
    exports.WheatOffIcon = WheatOff;
    exports.WholeWord = WholeWord;
    exports.WholeWordIcon = WholeWord;
    exports.Wifi = Wifi;
    exports.WifiHigh = WifiHigh;
    exports.WifiHighIcon = WifiHigh;
    exports.WifiIcon = Wifi;
    exports.WifiLow = WifiLow;
    exports.WifiLowIcon = WifiLow;
    exports.WifiOff = WifiOff;
    exports.WifiOffIcon = WifiOff;
    exports.WifiZero = WifiZero;
    exports.WifiZeroIcon = WifiZero;
    exports.Wind = Wind;
    exports.WindArrowDown = WindArrowDown;
    exports.WindArrowDownIcon = WindArrowDown;
    exports.WindIcon = Wind;
    exports.Wine = Wine;
    exports.WineIcon = Wine;
    exports.WineOff = WineOff;
    exports.WineOffIcon = WineOff;
    exports.Workflow = Workflow;
    exports.WorkflowIcon = Workflow;
    exports.Worm = Worm;
    exports.WormIcon = Worm;
    exports.WrapText = WrapText;
    exports.WrapTextIcon = WrapText;
    exports.Wrench = Wrench;
    exports.WrenchIcon = Wrench;
    exports.X = X;
    exports.XCircle = CircleX;
    exports.XCircleIcon = CircleX;
    exports.XIcon = X;
    exports.XOctagon = OctagonX;
    exports.XOctagonIcon = OctagonX;
    exports.XSquare = SquareX;
    exports.XSquareIcon = SquareX;
    exports.Youtube = Youtube;
    exports.YoutubeIcon = Youtube;
    exports.Zap = Zap;
    exports.ZapIcon = Zap;
    exports.ZapOff = ZapOff;
    exports.ZapOffIcon = ZapOff;
    exports.ZoomIn = ZoomIn;
    exports.ZoomInIcon = ZoomIn;
    exports.ZoomOut = ZoomOut;
    exports.ZoomOutIcon = ZoomOut;
    exports.createLucideIcon = createLucideIcon;
    exports.icons = index;
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    init_react_inject();
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a: for (; 0 < c; ) {
        var d = c - 1 >>> 1, e = a[d];
        if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
        else break a;
      }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length) return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
          var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
          if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
          else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;
          else break a;
        }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    if ("object" === typeof performance && "function" === typeof performance.now) {
      l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      p = Date, q = p.now();
      exports.unstable_now = function() {
        return p.now() - q;
      };
    }
    var l;
    var p;
    var q;
    var r = [];
    var t = [];
    var u = 1;
    var v = null;
    var y = 3;
    var z = false;
    var A = false;
    var B = false;
    var D = "function" === typeof setTimeout ? setTimeout : null;
    var E = "function" === typeof clearTimeout ? clearTimeout : null;
    var F = "undefined" !== typeof setImmediate ? setImmediate : null;
    "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback) k(t);
        else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);
        else break;
        b = h(t);
      }
    }
    function H(a) {
      B = false;
      G(a);
      if (!A) if (null !== h(r)) A = true, I(J);
      else {
        var b = h(t);
        null !== b && K(H, b.startTime - a);
      }
    }
    function J(a, b) {
      A = false;
      B && (B = false, E(L), L = -1);
      z = true;
      var c = y;
      try {
        G(b);
        for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
          var d = v.callback;
          if ("function" === typeof d) {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now();
            "function" === typeof e ? v.callback = e : v === h(r) && k(r);
            G(b);
          } else k(r);
          v = h(r);
        }
        if (null !== v) var w = true;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b);
          w = false;
        }
        return w;
      } finally {
        v = null, y = c, z = false;
      }
    }
    var N = false;
    var O = null;
    var L = -1;
    var P = 5;
    var Q = -1;
    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(true, a);
        } finally {
          b ? S() : (N = false, O = null);
        }
      } else N = false;
    }
    var S;
    if ("function" === typeof F) S = function() {
      F(R);
    };
    else if ("undefined" !== typeof MessageChannel) {
      T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R;
      S = function() {
        U.postMessage(null);
      };
    } else S = function() {
      D(R, 0);
    };
    var T;
    var U;
    function I(a) {
      O = a;
      N || (N = true, S());
    }
    function K(a, b) {
      L = D(function() {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    };
    exports.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h(r);
    };
    exports.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    };
    exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
      switch (a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c + e;
      a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
      c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J)));
      return a;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a, b) {
          var diff = a.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV === "production") {
      module.exports = require_scheduler_production_min();
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    init_react_inject();
    var aa = require_react();
    var ca = require_scheduler();
    function p(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set();
    var ea = {};
    function fa(a, b) {
      ha(a, b);
      ha(a + "Capture", b);
    }
    function ha(a, b) {
      ea[a] = b;
      for (a = 0; a < b.length; a++) da.add(b[a]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
    var ja = Object.prototype.hasOwnProperty;
    var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var la = {};
    var ma = {};
    function oa(a) {
      if (ja.call(ma, a)) return true;
      if (ja.call(la, a)) return false;
      if (ka.test(a)) return ma[a] = true;
      la[a] = true;
      return false;
    }
    function pa(a, b, c, d) {
      if (null !== c && 0 === c.type) return false;
      switch (typeof b) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d) return false;
          if (null !== c) return !c.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function qa(a, b, c, d) {
      if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
      if (d) return false;
      if (null !== c) switch (c.type) {
        case 3:
          return !b;
        case 4:
          return false === b;
        case 5:
          return isNaN(b);
        case 6:
          return isNaN(b) || 1 > b;
      }
      return false;
    }
    function v(a, b, c, d, e, f, g) {
      this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
      this.attributeName = d;
      this.attributeNamespace = e;
      this.mustUseProperty = c;
      this.propertyName = a;
      this.type = b;
      this.sanitizeURL = f;
      this.removeEmptyString = g;
    }
    var z = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      z[a] = new v(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b = a[0];
      z[b] = new v(b, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      z[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      z[a] = new v(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      z[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      z[a] = new v(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      z[a] = new v(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      z[a] = new v(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      z[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b = a.replace(
        ra,
        sa
      );
      z[b] = new v(b, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b = a.replace(ra, sa);
      z[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b = a.replace(ra, sa);
      z[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      z[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
    });
    z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      z[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function ta(a, b, c, d) {
      var e = z.hasOwnProperty(b) ? z[b] : null;
      if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var va = Symbol.for("react.element");
    var wa = Symbol.for("react.portal");
    var ya = Symbol.for("react.fragment");
    var za = Symbol.for("react.strict_mode");
    var Aa = Symbol.for("react.profiler");
    var Ba = Symbol.for("react.provider");
    var Ca = Symbol.for("react.context");
    var Da = Symbol.for("react.forward_ref");
    var Ea = Symbol.for("react.suspense");
    var Fa = Symbol.for("react.suspense_list");
    var Ga = Symbol.for("react.memo");
    var Ha = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var Ia = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ja = Symbol.iterator;
    function Ka(a) {
      if (null === a || "object" !== typeof a) return null;
      a = Ja && a[Ja] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var A = Object.assign;
    var La;
    function Ma(a) {
      if (void 0 === La) try {
        throw Error();
      } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        La = b && b[1] || "";
      }
      return "\n" + La + a;
    }
    var Na = false;
    function Oa(a, b) {
      if (!a || Na) return "";
      Na = true;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b) if (b = function() {
          throw Error();
        }, Object.defineProperty(b.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b, []);
          } catch (l) {
            var d = l;
          }
          Reflect.construct(a, [], b);
        } else {
          try {
            b.call();
          } catch (l) {
            d = l;
          }
          a.call(b.prototype);
        }
        else {
          try {
            throw Error();
          } catch (l) {
            d = l;
          }
          a();
        }
      } catch (l) {
        if (l && d && "string" === typeof l.stack) {
          for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; ) h--;
          for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
            if (1 !== g || 1 !== h) {
              do
                if (g--, h--, 0 > h || e[g] !== f[h]) {
                  var k = "\n" + e[g].replace(" at new ", " at ");
                  a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
                  return k;
                }
              while (1 <= g && 0 <= h);
            }
            break;
          }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
    }
    function Pa(a) {
      switch (a.tag) {
        case 5:
          return Ma(a.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Oa(a.type, false), a;
        case 11:
          return a = Oa(a.type.render, false), a;
        case 1:
          return a = Oa(a.type, true), a;
        default:
          return "";
      }
    }
    function Qa(a) {
      if (null == a) return null;
      if ("function" === typeof a) return a.displayName || a.name || null;
      if ("string" === typeof a) return a;
      switch (a) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a) switch (a.$$typeof) {
        case Ca:
          return (a.displayName || "Context") + ".Consumer";
        case Ba:
          return (a._context.displayName || "Context") + ".Provider";
        case Da:
          var b = a.render;
          a = a.displayName;
          a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          return a;
        case Ga:
          return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
        case Ha:
          b = a._payload;
          a = a._init;
          try {
            return Qa(a(b));
          } catch (c) {
          }
      }
      return null;
    }
    function Ra(a) {
      var b = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b.displayName || "Context") + ".Consumer";
        case 10:
          return (b._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b);
        case 8:
          return b === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b) return b.displayName || b.name || null;
          if ("string" === typeof b) return b;
      }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
    }
    function Ua(a) {
      var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
      if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f = c.set;
        Object.defineProperty(a, b, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(a2) {
          d = "" + a2;
          f.call(this, a2);
        } });
        Object.defineProperty(a, b, { enumerable: c.enumerable });
        return { getValue: function() {
          return d;
        }, setValue: function(a2) {
          d = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a) return false;
      var b = a._valueTracker;
      if (!b) return true;
      var c = b.getValue();
      var d = "";
      a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d;
      return a !== c ? (b.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a) return null;
      try {
        return a.activeElement || a.body;
      } catch (b) {
        return a.body;
      }
    }
    function Ya(a, b) {
      var c = b.checked;
      return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
    }
    function Za(a, b) {
      var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
      c = Sa(null != b.value ? b.value : c);
      a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
    }
    function ab(a, b) {
      b = b.checked;
      null != b && ta(a, "checked", b, false);
    }
    function bb(a, b) {
      ab(a, b);
      var c = Sa(b.value), d = b.type;
      if (null != c) if ("number" === d) {
        if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
      else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
      }
      b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
      null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
    }
    function db(a, b, c) {
      if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
      }
      c = a.name;
      "" !== c && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c && (a.name = c);
    }
    function cb(a, b, c) {
      if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
    }
    var eb = Array.isArray;
    function fb(a, b, c, d) {
      a = a.options;
      if (b) {
        b = {};
        for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
        for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
      } else {
        c = "" + Sa(c);
        b = null;
        for (e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = true;
            d && (a[e].defaultSelected = true);
            return;
          }
          null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = true);
      }
    }
    function gb(a, b) {
      if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
      return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b) {
      var c = b.value;
      if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
          if (null != b) throw Error(p(92));
          if (eb(c)) {
            if (1 < c.length) throw Error(p(93));
            c = c[0];
          }
          b = c;
        }
        null == b && (b = "");
        c = b;
      }
      a._wrapperState = { initialValue: Sa(c) };
    }
    function ib(a, b) {
      var c = Sa(b.value), d = Sa(b.defaultValue);
      null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
      null != d && (a.defaultValue = "" + d);
    }
    function jb(a) {
      var b = a.textContent;
      b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
    }
    function kb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a, b) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
    }
    var mb;
    var nb = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b, c, d, e);
        });
      } : a;
    }(function(a, b) {
      if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
        for (; b.firstChild; ) a.appendChild(b.firstChild);
      }
    });
    function ob(a, b) {
      if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
          c.nodeValue = b;
          return;
        }
      }
      a.textContent = b;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a) {
      qb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        pb[b] = pb[a];
      });
    });
    function rb(a, b, c) {
      return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
    }
    function sb(a, b) {
      a = a.style;
      for (var c in b) if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
      }
    }
    var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a, b) {
      if (b) {
        if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
        if (null != b.dangerouslySetInnerHTML) {
          if (null != b.children) throw Error(p(60));
          if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
      }
    }
    function vb(a, b) {
      if (-1 === a.indexOf("-")) return "string" === typeof b.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var yb = null;
    var zb = null;
    var Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if ("function" !== typeof yb) throw Error(p(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
      }
    }
    function Gb(a, b) {
      return a(b);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a, b, c) {
      if (Ib) return a(b, c);
      Ib = true;
      try {
        return Gb(a, b, c);
      } finally {
        if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
      }
    }
    function Kb(a, b) {
      var c = a.stateNode;
      if (null === c) return null;
      var d = Db(c);
      if (null === d) return null;
      c = d[b];
      a: switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
          a = !d;
          break a;
        default:
          a = false;
      }
      if (a) return null;
      if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
      return c;
    }
    var Lb = false;
    if (ia) try {
      Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a) {
      Lb = false;
    }
    var Mb;
    function Nb(a, b, c, d, e, f, g, h, k) {
      var l = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, l);
      } catch (m) {
        this.onError(m);
      }
    }
    var Ob = false;
    var Pb = null;
    var Qb = false;
    var Rb = null;
    var Sb = { onError: function(a) {
      Ob = true;
      Pb = a;
    } };
    function Tb(a, b, c, d, e, f, g, h, k) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a, b, c, d, e, f, g, h, k) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l = Pb;
          Ob = false;
          Pb = null;
        } else throw Error(p(198));
        Qb || (Qb = true, Rb = l);
      }
    }
    function Vb(a) {
      var b = a, c = a;
      if (a.alternate) for (; b.return; ) b = b.return;
      else {
        a = b;
        do
          b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
      }
      return 3 === b.tag ? c : null;
    }
    function Wb(a) {
      if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
      }
      return null;
    }
    function Xb(a) {
      if (Vb(a) !== a) throw Error(p(188));
    }
    function Yb(a) {
      var b = a.alternate;
      if (!b) {
        b = Vb(a);
        if (null === b) throw Error(p(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (null === e) break;
        var f = e.alternate;
        if (null === f) {
          d = e.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c) return Xb(e), a;
            if (f === d) return Xb(e), b;
            f = f.sibling;
          }
          throw Error(p(188));
        }
        if (c.return !== d.return) c = e, d = f;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d = f;
              break;
            }
            if (h === d) {
              g = true;
              d = e;
              c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = true;
                c = f;
                d = e;
                break;
              }
              if (h === d) {
                g = true;
                d = f;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g) throw Error(p(189));
          }
        }
        if (c.alternate !== d) throw Error(p(190));
      }
      if (3 !== c.tag) throw Error(p(188));
      return c.stateNode.current === c ? a : b;
    }
    function Zb(a) {
      a = Yb(a);
      return null !== a ? $b(a) : null;
    }
    function $b(a) {
      if (5 === a.tag || 6 === a.tag) return a;
      for (a = a.child; null !== a; ) {
        var b = $b(a);
        if (null !== b) return b;
        a = a.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback;
    var bc = ca.unstable_cancelCallback;
    var cc = ca.unstable_shouldYield;
    var dc = ca.unstable_requestPaint;
    var B = ca.unstable_now;
    var ec = ca.unstable_getCurrentPriorityLevel;
    var fc = ca.unstable_ImmediatePriority;
    var gc = ca.unstable_UserBlockingPriority;
    var hc = ca.unstable_NormalPriority;
    var ic = ca.unstable_LowPriority;
    var jc = ca.unstable_IdlePriority;
    var kc = null;
    var lc = null;
    function mc(a) {
      if (lc && "function" === typeof lc.onCommitFiberRoot) try {
        lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
      } catch (b) {
      }
    }
    var oc = Math.clz32 ? Math.clz32 : nc;
    var pc = Math.log;
    var qc = Math.LN2;
    function nc(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
    }
    var rc = 64;
    var sc = 4194304;
    function tc(a) {
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function uc(a, b) {
      var c = a.pendingLanes;
      if (0 === c) return 0;
      var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
      if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
      } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
      if (0 === d) return 0;
      if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
      0 !== (d & 4) && (d |= c & 16);
      b = a.entangledLanes;
      if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
      return d;
    }
    function vc(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 4:
          return b + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a, b) {
      for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
        var g = 31 - oc(f), h = 1 << g, k = e[g];
        if (-1 === k) {
          if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
        } else k <= b && (a.expiredLanes |= h);
        f &= ~h;
      }
    }
    function xc(a) {
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a;
    }
    function zc(a) {
      for (var b = [], c = 0; 31 > c; c++) b.push(a);
      return b;
    }
    function Ac(a, b, c) {
      a.pendingLanes |= b;
      536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
      a = a.eventTimes;
      b = 31 - oc(b);
      a[b] = c;
    }
    function Bc(a, b) {
      var c = a.pendingLanes & ~b;
      a.pendingLanes = b;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= b;
      a.mutableReadLanes &= b;
      a.entangledLanes &= b;
      b = a.entanglements;
      var d = a.eventTimes;
      for (a = a.expirationTimes; 0 < c; ) {
        var e = 31 - oc(c), f = 1 << e;
        b[e] = 0;
        d[e] = -1;
        a[e] = -1;
        c &= ~f;
      }
    }
    function Cc(a, b) {
      var c = a.entangledLanes |= b;
      for (a = a.entanglements; c; ) {
        var d = 31 - oc(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b);
        c &= ~e;
      }
    }
    var C = 0;
    function Dc(a) {
      a &= -a;
      return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec;
    var Fc;
    var Gc;
    var Hc;
    var Ic;
    var Jc = false;
    var Kc = [];
    var Lc = null;
    var Mc = null;
    var Nc = null;
    var Oc = /* @__PURE__ */ new Map();
    var Pc = /* @__PURE__ */ new Map();
    var Qc = [];
    var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a, b) {
      switch (a) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b.pointerId);
      }
    }
    function Tc(a, b, c, d, e, f) {
      if (null === a || a.nativeEvent !== f) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
      a.eventSystemFlags |= d;
      b = a.targetContainers;
      null !== e && -1 === b.indexOf(e) && b.push(e);
      return a;
    }
    function Uc(a, b, c, d, e) {
      switch (b) {
        case "focusin":
          return Lc = Tc(Lc, a, b, c, d, e), true;
        case "dragenter":
          return Mc = Tc(Mc, a, b, c, d, e), true;
        case "mouseover":
          return Nc = Tc(Nc, a, b, c, d, e), true;
        case "pointerover":
          var f = e.pointerId;
          Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
          return true;
        case "gotpointercapture":
          return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), true;
      }
      return false;
    }
    function Vc(a) {
      var b = Wc(a.target);
      if (null !== b) {
        var c = Vb(b);
        if (null !== c) {
          if (b = c.tag, 13 === b) {
            if (b = Wb(c), null !== b) {
              a.blockedOn = b;
              Ic(a.priority, function() {
                Gc(c);
              });
              return;
            }
          } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Xc(a) {
      if (null !== a.blockedOn) return false;
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null === c) {
          c = a.nativeEvent;
          var d = new c.constructor(c.type, c);
          wb = d;
          c.target.dispatchEvent(d);
          wb = null;
        } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
        b.shift();
      }
      return true;
    }
    function Zc(a, b, c) {
      Xc(a) && c.delete(b);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a, b) {
      a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a) {
      function b(b2) {
        return ad(b2, a);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a);
        for (var c = 1; c < Kc.length; c++) {
          var d = Kc[c];
          d.blockedOn === a && (d.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a);
      null !== Mc && ad(Mc, a);
      null !== Nc && ad(Nc, a);
      Oc.forEach(b);
      Pc.forEach(b);
      for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
      for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig;
    var dd = true;
    function ed(a, b, c, d) {
      var e = C, f = cd.transition;
      cd.transition = null;
      try {
        C = 1, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f;
      }
    }
    function gd(a, b, c, d) {
      var e = C, f = cd.transition;
      cd.transition = null;
      try {
        C = 4, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f;
      }
    }
    function fd(a, b, c, d) {
      if (dd) {
        var e = Yc(a, b, c, d);
        if (null === e) hd(a, b, d, id, c), Sc(a, d);
        else if (Uc(e, a, b, c, d)) d.stopPropagation();
        else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
          for (; null !== e; ) {
            var f = Cb(e);
            null !== f && Ec(f);
            f = Yc(a, b, c, d);
            null === f && hd(a, b, d, id, c);
            if (f === e) break;
            e = f;
          }
          null !== e && d.stopPropagation();
        } else hd(a, b, d, null, c);
      }
    }
    var id = null;
    function Yc(a, b, c, d) {
      id = null;
      a = xb(d);
      a = Wc(a);
      if (null !== a) if (b = Vb(a), null === b) a = null;
      else if (c = b.tag, 13 === c) {
        a = Wb(b);
        if (null !== a) return a;
        a = null;
      } else if (3 === c) {
        if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
        a = null;
      } else b !== a && (a = null);
      id = a;
      return null;
    }
    function jd(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null;
    var ld = null;
    var md = null;
    function nd() {
      if (md) return md;
      var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
      for (a = 0; a < c && b[a] === e[a]; a++) ;
      var g = c - a;
      for (d = 1; d <= g && b[c - d] === e[f - d]; d++) ;
      return md = e.slice(a, 1 < d ? 1 - d : void 0);
    }
    function od(a) {
      var b = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b(b2, d, e, f, g) {
        this._reactName = b2;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g;
        this.currentTarget = null;
        for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
        this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A(b.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var td = rd(sd);
    var ud = A({}, sd, { view: 0, detail: 0 });
    var vd = rd(ud);
    var wd;
    var xd;
    var yd;
    var Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } });
    var Bd = rd(Ad);
    var Cd = A({}, Ad, { dataTransfer: 0 });
    var Dd = rd(Cd);
    var Ed = A({}, ud, { relatedTarget: 0 });
    var Fd = rd(Ed);
    var Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Hd = rd(Gd);
    var Id = A({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } });
    var Jd = rd(Id);
    var Kd = A({}, sd, { data: 0 });
    var Ld = rd(Kd);
    var Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A({}, ud, { key: function(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return "keypress" === a.type ? od(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } });
    var Rd = rd(Qd);
    var Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    var Td = rd(Sd);
    var Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
    var Vd = rd(Ud);
    var Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Xd = rd(Wd);
    var Yd = A({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Zd = rd(Yd);
    var $d = [9, 13, 27, 32];
    var ae = ia && "CompositionEvent" in window;
    var be = null;
    ia && "documentMode" in document && (be = document.documentMode);
    var ce = ia && "TextEvent" in window && !be;
    var de = ia && (!ae || be && 8 < be && 11 >= be);
    var ee = String.fromCharCode(32);
    var fe = false;
    function ge(a, b) {
      switch (a) {
        case "keyup":
          return -1 !== $d.indexOf(b.keyCode);
        case "keydown":
          return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b) {
      switch (a) {
        case "compositionend":
          return he(b);
        case "keypress":
          if (32 !== b.which) return null;
          fe = true;
          return ee;
        case "textInput":
          return a = b.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b) {
      if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length) return b.char;
            if (b.which) return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return de && "ko" !== b.locale ? null : b.data;
        default:
          return null;
      }
    }
    var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
    }
    function ne(a, b, c, d) {
      Eb(d);
      b = oe(b, "onChange");
      0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
    }
    var pe = null;
    var qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b = ue(a);
      if (Wa(b)) return a;
    }
    function ve(a, b) {
      if ("change" === a) return b;
    }
    var we = false;
    if (ia) {
      if (ia) {
        ye = "oninput" in document;
        if (!ye) {
          ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = "function" === typeof ze.oninput;
        }
        xe = ye;
      } else xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    var xe;
    var ye;
    var ze;
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if ("value" === a.propertyName && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a));
        Jb(re, b);
      }
    }
    function Ce(a, b, c) {
      "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
    }
    function De(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
    }
    function Ee(a, b) {
      if ("click" === a) return te(b);
    }
    function Fe(a, b) {
      if ("input" === a || "change" === a) return te(b);
    }
    function Ge(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge;
    function Ie(a, b) {
      if (He(a, b)) return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length) return false;
      for (d = 0; d < c.length; d++) {
        var e = c[d];
        if (!ja.call(b, e) || !He(a[e], b[e])) return false;
      }
      return true;
    }
    function Je(a) {
      for (; a && a.firstChild; ) a = a.firstChild;
      return a;
    }
    function Ke(a, b) {
      var c = Je(a);
      a = 0;
      for (var d; c; ) {
        if (3 === c.nodeType) {
          d = a + c.textContent.length;
          if (a <= b && d >= b) return { node: c, offset: b - a };
          a = d;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = Je(c);
      }
    }
    function Le(a, b) {
      return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
    }
    function Me() {
      for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
        try {
          var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
          c = false;
        }
        if (c) a = b.contentWindow;
        else break;
        b = Xa(a.document);
      }
      return b;
    }
    function Ne(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
    }
    function Oe(a) {
      var b = Me(), c = a.focusedElem, d = a.selectionRange;
      if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
        if (null !== d && Ne(c)) {
          if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
          else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e = c.textContent.length, f = Math.min(d.start, e);
            d = void 0 === d.end ? f : Math.min(d.end, e);
            !a.extend && f > d && (e = d, d = f, f = e);
            e = Ke(c, f);
            var g = Ke(
              c,
              d
            );
            e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
          }
        }
        b = [];
        for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        "function" === typeof c.focus && c.focus();
        for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
    var Qe = null;
    var Re = null;
    var Se = null;
    var Te = false;
    function Ue(a, b, c) {
      var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
      Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
    }
    function Ve(a, b) {
      var c = {};
      c[a.toLowerCase()] = b.toLowerCase();
      c["Webkit" + a] = "webkit" + b;
      c["Moz" + a] = "moz" + b;
      return c;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
    var Xe = {};
    var Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a) {
      if (Xe[a]) return Xe[a];
      if (!We[a]) return a;
      var b = We[a], c;
      for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
      return a;
    }
    var $e = Ze("animationend");
    var af = Ze("animationiteration");
    var bf = Ze("animationstart");
    var cf = Ze("transitionend");
    var df = /* @__PURE__ */ new Map();
    var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a, b) {
      df.set(a, b);
      fa(b, [a]);
    }
    for (gf = 0; gf < ef.length; gf++) {
      hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    var hf;
    var jf;
    var kf;
    var gf;
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a, b, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = c;
      Ub(d, b, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b) {
      b = 0 !== (b & 4);
      for (var c = 0; c < a.length; c++) {
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
          var f = void 0;
          if (b) for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g], k = h.instance, l = h.currentTarget;
            h = h.listener;
            if (k !== f && e.isPropagationStopped()) break a;
            nf(e, h, l);
            f = k;
          }
          else for (g = 0; g < d.length; g++) {
            h = d[g];
            k = h.instance;
            l = h.currentTarget;
            h = h.listener;
            if (k !== f && e.isPropagationStopped()) break a;
            nf(e, h, l);
            f = k;
          }
        }
      }
      if (Qb) throw a = Rb, Qb = false, Rb = null, a;
    }
    function D(a, b) {
      var c = b[of];
      void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
      var d = a + "__bubble";
      c.has(d) || (pf(b, a, 2, false), c.add(d));
    }
    function qf(a, b, c) {
      var d = 0;
      b && (d |= 4);
      pf(c, a, d, b);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a) {
      if (!a[rf]) {
        a[rf] = true;
        da.forEach(function(b2) {
          "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
        });
        var b = 9 === a.nodeType ? a : a.ownerDocument;
        null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
      }
    }
    function pf(a, b, c, d) {
      switch (jd(b)) {
        case 1:
          var e = ed;
          break;
        case 4:
          e = gd;
          break;
        default:
          e = fd;
      }
      c = e.bind(null, b, c, a);
      e = void 0;
      !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
      d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
    }
    function hd(a, b, c, d, e) {
      var f = d;
      if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
          var h = d.stateNode.containerInfo;
          if (h === e || 8 === h.nodeType && h.parentNode === e) break;
          if (4 === g) for (g = d.return; null !== g; ) {
            var k = g.tag;
            if (3 === k || 4 === k) {
              if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
            }
            g = g.return;
          }
          for (; null !== h; ) {
            g = Wc(h);
            if (null === g) return;
            k = g.tag;
            if (5 === k || 6 === k) {
              d = f = g;
              continue a;
            }
            h = h.parentNode;
          }
        }
        d = d.return;
      }
      Jb(function() {
        var d2 = f, e2 = xb(c), g2 = [];
        a: {
          var h2 = df.get(a);
          if (void 0 !== h2) {
            var k2 = td, n = a;
            switch (a) {
              case "keypress":
                if (0 === od(c)) break a;
              case "keydown":
              case "keyup":
                k2 = Rd;
                break;
              case "focusin":
                n = "focus";
                k2 = Fd;
                break;
              case "focusout":
                n = "blur";
                k2 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k2 = Fd;
                break;
              case "click":
                if (2 === c.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k2 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k2 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k2 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k2 = Hd;
                break;
              case cf:
                k2 = Xd;
                break;
              case "scroll":
                k2 = vd;
                break;
              case "wheel":
                k2 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k2 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k2 = Td;
            }
            var t = 0 !== (b & 4), J = !t && "scroll" === a, x = t ? null !== h2 ? h2 + "Capture" : null : h2;
            t = [];
            for (var w = d2, u; null !== w; ) {
              u = w;
              var F = u.stateNode;
              5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
              if (J) break;
              w = w.return;
            }
            0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({ event: h2, listeners: t }));
          }
        }
        if (0 === (b & 7)) {
          a: {
            h2 = "mouseover" === a || "pointerover" === a;
            k2 = "mouseout" === a || "pointerout" === a;
            if (h2 && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
            if (k2 || h2) {
              h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
              if (k2) {
                if (n = c.relatedTarget || c.toElement, k2 = d2, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
              } else k2 = null, n = d2;
              if (k2 !== n) {
                t = Bd;
                F = "onMouseLeave";
                x = "onMouseEnter";
                w = "mouse";
                if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                J = null == k2 ? h2 : ue(k2);
                u = null == n ? h2 : ue(n);
                h2 = new t(F, w + "leave", k2, c, e2);
                h2.target = J;
                h2.relatedTarget = u;
                F = null;
                Wc(e2) === d2 && (t = new t(x, w + "enter", n, c, e2), t.target = u, t.relatedTarget = J, F = t);
                J = F;
                if (k2 && n) b: {
                  t = k2;
                  x = n;
                  w = 0;
                  for (u = t; u; u = vf(u)) w++;
                  u = 0;
                  for (F = x; F; F = vf(F)) u++;
                  for (; 0 < w - u; ) t = vf(t), w--;
                  for (; 0 < u - w; ) x = vf(x), u--;
                  for (; w--; ) {
                    if (t === x || null !== x && t === x.alternate) break b;
                    t = vf(t);
                    x = vf(x);
                  }
                  t = null;
                }
                else t = null;
                null !== k2 && wf(g2, h2, k2, t, false);
                null !== n && null !== J && wf(g2, J, n, t, true);
              }
            }
          }
          a: {
            h2 = d2 ? ue(d2) : window;
            k2 = h2.nodeName && h2.nodeName.toLowerCase();
            if ("select" === k2 || "input" === k2 && "file" === h2.type) var na = ve;
            else if (me(h2)) if (we) na = Fe;
            else {
              na = De;
              var xa = Ce;
            }
            else (k2 = h2.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
            if (na && (na = na(a, d2))) {
              ne(g2, na, c, e2);
              break a;
            }
            xa && xa(a, h2, d2);
            "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
          }
          xa = d2 ? ue(d2) : window;
          switch (a) {
            case "focusin":
              if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g2, c, e2);
              break;
            case "selectionchange":
              if (Pe) break;
            case "keydown":
            case "keyup":
              Ue(g2, c, e2);
          }
          var $a;
          if (ae) b: {
            switch (a) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
          else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
          ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
          if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
        }
        se(g2, b);
      });
    }
    function tf(a, b, c) {
      return { instance: a, listener: b, currentTarget: c };
    }
    function oe(a, b) {
      for (var c = b + "Capture", d = []; null !== a; ) {
        var e = a, f = e.stateNode;
        5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
        a = a.return;
      }
      return d;
    }
    function vf(a) {
      if (null === a) return null;
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function wf(a, b, c, d, e) {
      for (var f = b._reactName, g = []; null !== c && c !== d; ) {
        var h = c, k = h.alternate, l = h.stateNode;
        if (null !== k && k === d) break;
        5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
        c = c.return;
      }
      0 !== g.length && a.push({ event: b, listeners: g });
    }
    var xf = /\r\n?/g;
    var yf = /\u0000|\uFFFD/g;
    function zf(a) {
      return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
    }
    function Af(a, b, c) {
      b = zf(b);
      if (zf(a) !== b && c) throw Error(p(425));
    }
    function Bf() {
    }
    var Cf = null;
    var Df = null;
    function Ef(a, b) {
      return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
    var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
    var Hf = "function" === typeof Promise ? Promise : void 0;
    var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
      return Hf.resolve(null).then(a).catch(If);
    } : Ff;
    function If(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function Kf(a, b) {
      var c = b, d = 0;
      do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
          if (0 === d) {
            a.removeChild(e);
            bd(b);
            return;
          }
          d--;
        } else "$" !== c && "$?" !== c && "$!" !== c || d++;
        c = e;
      } while (c);
      bd(b);
    }
    function Lf(a) {
      for (; null != a; a = a.nextSibling) {
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
        if (8 === b) {
          b = a.data;
          if ("$" === b || "$!" === b || "$?" === b) break;
          if ("/$" === b) return null;
        }
      }
      return a;
    }
    function Mf(a) {
      a = a.previousSibling;
      for (var b = 0; a; ) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("$" === c || "$!" === c || "$?" === c) {
            if (0 === b) return a;
            b--;
          } else "/$" === c && b++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2);
    var Of = "__reactFiber$" + Nf;
    var Pf = "__reactProps$" + Nf;
    var uf = "__reactContainer$" + Nf;
    var of = "__reactEvents$" + Nf;
    var Qf = "__reactListeners$" + Nf;
    var Rf = "__reactHandles$" + Nf;
    function Wc(a) {
      var b = a[Of];
      if (b) return b;
      for (var c = a.parentNode; c; ) {
        if (b = c[uf] || c[Of]) {
          c = b.alternate;
          if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
            if (c = a[Of]) return c;
            a = Mf(a);
          }
          return b;
        }
        a = c;
        c = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[Of] || a[uf];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function ue(a) {
      if (5 === a.tag || 6 === a.tag) return a.stateNode;
      throw Error(p(33));
    }
    function Db(a) {
      return a[Pf] || null;
    }
    var Sf = [];
    var Tf = -1;
    function Uf(a) {
      return { current: a };
    }
    function E(a) {
      0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G(a, b) {
      Tf++;
      Sf[Tf] = a.current;
      a.current = b;
    }
    var Vf = {};
    var H = Uf(Vf);
    var Wf = Uf(false);
    var Xf = Vf;
    function Yf(a, b) {
      var c = a.type.contextTypes;
      if (!c) return Vf;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c) e[f] = b[f];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Zf(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function $f() {
      E(Wf);
      E(H);
    }
    function ag(a, b, c) {
      if (H.current !== Vf) throw Error(p(168));
      G(H, b);
      G(Wf, c);
    }
    function bg(a, b, c) {
      var d = a.stateNode;
      b = b.childContextTypes;
      if ("function" !== typeof d.getChildContext) return c;
      d = d.getChildContext();
      for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
      return A({}, c, d);
    }
    function cg(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H.current;
      G(H, a);
      G(Wf, Wf.current);
      return true;
    }
    function dg(a, b, c) {
      var d = a.stateNode;
      if (!d) throw Error(p(169));
      c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
      G(Wf, c);
    }
    var eg = null;
    var fg = false;
    var gg = false;
    function hg(a) {
      null === eg ? eg = [a] : eg.push(a);
    }
    function ig(a) {
      fg = true;
      hg(a);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a = 0, b = C;
        try {
          var c = eg;
          for (C = 1; a < c.length; a++) {
            var d = c[a];
            do
              d = d(true);
            while (null !== d);
          }
          eg = null;
          fg = false;
        } catch (e) {
          throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
        } finally {
          C = b, gg = false;
        }
      }
      return null;
    }
    var kg = [];
    var lg = 0;
    var mg = null;
    var ng = 0;
    var og = [];
    var pg = 0;
    var qg = null;
    var rg = 1;
    var sg = "";
    function tg(a, b) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a;
      ng = b;
    }
    function ug(a, b, c) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a;
      var d = rg;
      a = sg;
      var e = 32 - oc(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f = 32 - oc(b) + e;
      if (30 < f) {
        var g = e - e % 5;
        f = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        rg = 1 << 32 - oc(b) + e | c << e | d;
        sg = f + a;
      } else rg = 1 << f | c << e | d, sg = a;
    }
    function vg(a) {
      null !== a.return && (tg(a, 1), ug(a, 1, 0));
    }
    function wg(a) {
      for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null;
    var yg = null;
    var I = false;
    var zg = null;
    function Ag(a, b) {
      var c = Bg(5, null, null, 0);
      c.elementType = "DELETED";
      c.stateNode = b;
      c.return = a;
      b = a.deletions;
      null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
    }
    function Cg(a, b) {
      switch (a.tag) {
        case 5:
          var c = a.type;
          b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
          return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
        case 6:
          return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
        case 13:
          return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a) {
      return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
    }
    function Eg(a) {
      if (I) {
        var b = yg;
        if (b) {
          var c = b;
          if (!Cg(a, b)) {
            if (Dg(a)) throw Error(p(418));
            b = Lf(c.nextSibling);
            var d = xg;
            b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
          }
        } else {
          if (Dg(a)) throw Error(p(418));
          a.flags = a.flags & -4097 | 2;
          I = false;
          xg = a;
        }
      }
    }
    function Fg(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
      xg = a;
    }
    function Gg(a) {
      if (a !== xg) return false;
      if (!I) return Fg(a), I = true, false;
      var b;
      (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
      if (b && (b = yg)) {
        if (Dg(a)) throw Hg(), Error(p(418));
        for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
      }
      Fg(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(p(317));
        a: {
          a = a.nextSibling;
          for (b = 0; a; ) {
            if (8 === a.nodeType) {
              var c = a.data;
              if ("/$" === c) {
                if (0 === b) {
                  yg = Lf(a.nextSibling);
                  break a;
                }
                b--;
              } else "$" !== c && "$!" !== c && "$?" !== c || b++;
            }
            a = a.nextSibling;
          }
          yg = null;
        }
      } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a = yg; a; ) a = Lf(a.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I = false;
    }
    function Jg(a) {
      null === zg ? zg = [a] : zg.push(a);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a, b, c) {
      a = c.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (1 !== c.tag) throw Error(p(309));
            var d = c.stateNode;
          }
          if (!d) throw Error(p(147, a));
          var e = d, f = "" + a;
          if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
          b = function(a2) {
            var b2 = e.refs;
            null === a2 ? delete b2[f] : b2[f] = a2;
          };
          b._stringRef = f;
          return b;
        }
        if ("string" !== typeof a) throw Error(p(284));
        if (!c._owner) throw Error(p(290, a));
      }
      return a;
    }
    function Mg(a, b) {
      a = Object.prototype.toString.call(b);
      throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
    }
    function Ng(a) {
      var b = a._init;
      return b(a._payload);
    }
    function Og(a) {
      function b(b2, c2) {
        if (a) {
          var d2 = b2.deletions;
          null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
        }
      }
      function c(c2, d2) {
        if (!a) return null;
        for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(a2, b2) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
        return a2;
      }
      function e(a2, b2) {
        a2 = Pg(a2, b2);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f(b2, c2, d2) {
        b2.index = d2;
        if (!a) return b2.flags |= 1048576, c2;
        d2 = b2.alternate;
        if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
        b2.flags |= 2;
        return c2;
      }
      function g(b2) {
        a && null === b2.alternate && (b2.flags |= 2);
        return b2;
      }
      function h(a2, b2, c2, d2) {
        if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function k(a2, b2, c2, d2) {
        var f2 = c2.type;
        if (f2 === ya) return m(a2, b2, c2.props.children, d2, c2.key);
        if (null !== b2 && (b2.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === Ha && Ng(f2) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
        d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
        d2.ref = Lg(a2, b2, c2);
        d2.return = a2;
        return d2;
      }
      function l(a2, b2, c2, d2) {
        if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2.children || []);
        b2.return = a2;
        return b2;
      }
      function m(a2, b2, c2, d2, f2) {
        if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function q(a2, b2, c2) {
        if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
        if ("object" === typeof b2 && null !== b2) {
          switch (b2.$$typeof) {
            case va:
              return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
            case wa:
              return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
            case Ha:
              var d2 = b2._init;
              return q(a2, d2(b2._payload), c2);
          }
          if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
          Mg(a2, b2);
        }
        return null;
      }
      function r(a2, b2, c2, d2) {
        var e2 = null !== b2 ? b2.key : null;
        if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
        if ("object" === typeof c2 && null !== c2) {
          switch (c2.$$typeof) {
            case va:
              return c2.key === e2 ? k(a2, b2, c2, d2) : null;
            case wa:
              return c2.key === e2 ? l(a2, b2, c2, d2) : null;
            case Ha:
              return e2 = c2._init, r(
                a2,
                b2,
                e2(c2._payload),
                d2
              );
          }
          if (eb(c2) || Ka(c2)) return null !== e2 ? null : m(a2, b2, c2, d2, null);
          Mg(a2, c2);
        }
        return null;
      }
      function y(a2, b2, c2, d2, e2) {
        if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
        if ("object" === typeof d2 && null !== d2) {
          switch (d2.$$typeof) {
            case va:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k(b2, a2, d2, e2);
            case wa:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
            case Ha:
              var f2 = d2._init;
              return y(a2, b2, c2, f2(d2._payload), e2);
          }
          if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m(b2, a2, d2, e2, null);
          Mg(b2, d2);
        }
        return null;
      }
      function n(e2, g2, h2, k2) {
        for (var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; null !== u && w < h2.length; w++) {
          u.index > w ? (x = u, u = null) : x = u.sibling;
          var n2 = r(e2, u, h2[w], k2);
          if (null === n2) {
            null === u && (u = x);
            break;
          }
          a && u && null === n2.alternate && b(e2, u);
          g2 = f(n2, g2, w);
          null === m2 ? l2 = n2 : m2.sibling = n2;
          m2 = n2;
          u = x;
        }
        if (w === h2.length) return c(e2, u), I && tg(e2, w), l2;
        if (null === u) {
          for (; w < h2.length; w++) u = q(e2, h2[w], k2), null !== u && (g2 = f(u, g2, w), null === m2 ? l2 = u : m2.sibling = u, m2 = u);
          I && tg(e2, w);
          return l2;
        }
        for (u = d(e2, u); w < h2.length; w++) x = y(u, e2, w, h2[w], k2), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m2 ? l2 = x : m2.sibling = x, m2 = x);
        a && u.forEach(function(a2) {
          return b(e2, a2);
        });
        I && tg(e2, w);
        return l2;
      }
      function t(e2, g2, h2, k2) {
        var l2 = Ka(h2);
        if ("function" !== typeof l2) throw Error(p(150));
        h2 = l2.call(h2);
        if (null == h2) throw Error(p(151));
        for (var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); null !== m2 && !n2.done; w++, n2 = h2.next()) {
          m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
          var t2 = r(e2, m2, n2.value, k2);
          if (null === t2) {
            null === m2 && (m2 = x);
            break;
          }
          a && m2 && null === t2.alternate && b(e2, m2);
          g2 = f(t2, g2, w);
          null === u ? l2 = t2 : u.sibling = t2;
          u = t2;
          m2 = x;
        }
        if (n2.done) return c(
          e2,
          m2
        ), I && tg(e2, w), l2;
        if (null === m2) {
          for (; !n2.done; w++, n2 = h2.next()) n2 = q(e2, n2.value, k2), null !== n2 && (g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
          I && tg(e2, w);
          return l2;
        }
        for (m2 = d(e2, m2); !n2.done; w++, n2 = h2.next()) n2 = y(m2, e2, w, n2.value, k2), null !== n2 && (a && null !== n2.alternate && m2.delete(null === n2.key ? w : n2.key), g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
        a && m2.forEach(function(a2) {
          return b(e2, a2);
        });
        I && tg(e2, w);
        return l2;
      }
      function J(a2, d2, f2, h2) {
        "object" === typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
        if ("object" === typeof f2 && null !== f2) {
          switch (f2.$$typeof) {
            case va:
              a: {
                for (var k2 = f2.key, l2 = d2; null !== l2; ) {
                  if (l2.key === k2) {
                    k2 = f2.type;
                    if (k2 === ya) {
                      if (7 === l2.tag) {
                        c(a2, l2.sibling);
                        d2 = e(l2, f2.props.children);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                    } else if (l2.elementType === k2 || "object" === typeof k2 && null !== k2 && k2.$$typeof === Ha && Ng(k2) === l2.type) {
                      c(a2, l2.sibling);
                      d2 = e(l2, f2.props);
                      d2.ref = Lg(a2, l2, f2);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                    c(a2, l2);
                    break;
                  } else b(a2, l2);
                  l2 = l2.sibling;
                }
                f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case wa:
              a: {
                for (l2 = f2.key; null !== d2; ) {
                  if (d2.key === l2) if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                    c(a2, d2.sibling);
                    d2 = e(d2, f2.children || []);
                    d2.return = a2;
                    a2 = d2;
                    break a;
                  } else {
                    c(a2, d2);
                    break;
                  }
                  else b(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = Sg(f2, a2.mode, h2);
                d2.return = a2;
                a2 = d2;
              }
              return g(a2);
            case Ha:
              return l2 = f2._init, J(a2, d2, l2(f2._payload), h2);
          }
          if (eb(f2)) return n(a2, d2, f2, h2);
          if (Ka(f2)) return t(a2, d2, f2, h2);
          Mg(a2, f2);
        }
        return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
      }
      return J;
    }
    var Ug = Og(true);
    var Vg = Og(false);
    var Wg = Uf(null);
    var Xg = null;
    var Yg = null;
    var Zg = null;
    function $g() {
      Zg = Yg = Xg = null;
    }
    function ah(a) {
      var b = Wg.current;
      E(Wg);
      a._currentValue = b;
    }
    function bh(a, b, c) {
      for (; null !== a; ) {
        var d = a.alternate;
        (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
        if (a === c) break;
        a = a.return;
      }
    }
    function ch(a, b) {
      Xg = a;
      Zg = Yg = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
    }
    function eh(a) {
      var b = a._currentValue;
      if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
        if (null === Xg) throw Error(p(308));
        Yg = a;
        Xg.dependencies = { lanes: 0, firstContext: a };
      } else Yg = Yg.next = a;
      return b;
    }
    var fh = null;
    function gh(a) {
      null === fh ? fh = [a] : fh.push(a);
    }
    function hh(a, b, c, d) {
      var e = b.interleaved;
      null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
      b.interleaved = c;
      return ih(a, d);
    }
    function ih(a, b) {
      a.lanes |= b;
      var c = a.alternate;
      null !== c && (c.lanes |= b);
      c = a;
      for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
      return 3 === c.tag ? c.stateNode : null;
    }
    var jh = false;
    function kh(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function lh(a, b) {
      a = a.updateQueue;
      b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function mh(a, b) {
      return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
    }
    function nh(a, b, c) {
      var d = a.updateQueue;
      if (null === d) return null;
      d = d.shared;
      if (0 !== (K & 2)) {
        var e = d.pending;
        null === e ? b.next = b : (b.next = e.next, e.next = b);
        d.pending = b;
        return ih(a, c);
      }
      e = d.interleaved;
      null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
      d.interleaved = b;
      return ih(a, c);
    }
    function oh(a, b, c) {
      b = b.updateQueue;
      if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        Cc(a, c);
      }
    }
    function ph(a, b) {
      var c = a.updateQueue, d = a.alternate;
      if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
          do {
            var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
            null === f ? e = f = g : f = f.next = g;
            c = c.next;
          } while (null !== c);
          null === f ? e = f = b : f = f.next = b;
        } else e = f = b;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
        a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate;
      null === a ? c.firstBaseUpdate = b : a.next = b;
      c.lastBaseUpdate = b;
    }
    function qh(a, b, c, d) {
      var e = a.updateQueue;
      jh = false;
      var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (null !== h) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        null === g ? f = l : g.next = l;
        g = k;
        var m = a.alternate;
        null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
      }
      if (null !== f) {
        var q = e.baseState;
        g = 0;
        m = l = k = null;
        h = f;
        do {
          var r = h.lane, y = h.eventTime;
          if ((d & r) === r) {
            null !== m && (m = m.next = {
              eventTime: y,
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: h.callback,
              next: null
            });
            a: {
              var n = a, t = h;
              r = b;
              y = c;
              switch (t.tag) {
                case 1:
                  n = t.payload;
                  if ("function" === typeof n) {
                    q = n.call(y, q, r);
                    break a;
                  }
                  q = n;
                  break a;
                case 3:
                  n.flags = n.flags & -65537 | 128;
                case 0:
                  n = t.payload;
                  r = "function" === typeof n ? n.call(y, q, r) : n;
                  if (null === r || void 0 === r) break a;
                  q = A({}, q, r);
                  break a;
                case 2:
                  jh = true;
              }
            }
            null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
          } else y = { eventTime: y, lane: r, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
          h = h.next;
          if (null === h) if (h = e.shared.pending, null === h) break;
          else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
        } while (1);
        null === m && (k = q);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = m;
        b = e.shared.interleaved;
        if (null !== b) {
          e = b;
          do
            g |= e.lane, e = e.next;
          while (e !== b);
        } else null === f && (e.shared.lanes = 0);
        rh |= g;
        a.lanes = g;
        a.memoizedState = q;
      }
    }
    function sh(a, b, c) {
      a = b.effects;
      b.effects = null;
      if (null !== a) for (b = 0; b < a.length; b++) {
        var d = a[b], e = d.callback;
        if (null !== e) {
          d.callback = null;
          d = c;
          if ("function" !== typeof e) throw Error(p(191, e));
          e.call(d);
        }
      }
    }
    var th = {};
    var uh = Uf(th);
    var vh = Uf(th);
    var wh = Uf(th);
    function xh(a) {
      if (a === th) throw Error(p(174));
      return a;
    }
    function yh(a, b) {
      G(wh, b);
      G(vh, a);
      G(uh, th);
      a = b.nodeType;
      switch (a) {
        case 9:
        case 11:
          b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
          break;
        default:
          a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
      }
      E(uh);
      G(uh, b);
    }
    function zh() {
      E(uh);
      E(vh);
      E(wh);
    }
    function Ah(a) {
      xh(wh.current);
      var b = xh(uh.current);
      var c = lb(b, a.type);
      b !== c && (G(vh, a), G(uh, c));
    }
    function Bh(a) {
      vh.current === a && (E(uh), E(vh));
    }
    var L = Uf(0);
    function Ch(a) {
      for (var b = a; null !== b; ) {
        if (13 === b.tag) {
          var c = b.memoizedState;
          if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
          if (0 !== (b.flags & 128)) return b;
        } else if (null !== b.child) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a) break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a) return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    var Dh = [];
    function Eh() {
      for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
      Dh.length = 0;
    }
    var Fh = ua.ReactCurrentDispatcher;
    var Gh = ua.ReactCurrentBatchConfig;
    var Hh = 0;
    var M = null;
    var N = null;
    var O = null;
    var Ih = false;
    var Jh = false;
    var Kh = 0;
    var Lh = 0;
    function P() {
      throw Error(p(321));
    }
    function Mh(a, b) {
      if (null === b) return false;
      for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
      return true;
    }
    function Nh(a, b, c, d, e, f) {
      Hh = f;
      M = b;
      b.memoizedState = null;
      b.updateQueue = null;
      b.lanes = 0;
      Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
      a = c(d, e);
      if (Jh) {
        f = 0;
        do {
          Jh = false;
          Kh = 0;
          if (25 <= f) throw Error(p(301));
          f += 1;
          O = N = null;
          b.updateQueue = null;
          Fh.current = Qh;
          a = c(d, e);
        } while (Jh);
      }
      Fh.current = Rh;
      b = null !== N && null !== N.next;
      Hh = 0;
      O = N = M = null;
      Ih = false;
      if (b) throw Error(p(300));
      return a;
    }
    function Sh() {
      var a = 0 !== Kh;
      Kh = 0;
      return a;
    }
    function Th() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === O ? M.memoizedState = O = a : O = O.next = a;
      return O;
    }
    function Uh() {
      if (null === N) {
        var a = M.alternate;
        a = null !== a ? a.memoizedState : null;
      } else a = N.next;
      var b = null === O ? M.memoizedState : O.next;
      if (null !== b) O = b, N = a;
      else {
        if (null === a) throw Error(p(310));
        N = a;
        a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
      }
      return O;
    }
    function Vh(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Wh(a) {
      var b = Uh(), c = b.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = N, e = d.baseQueue, f = c.pending;
      if (null !== f) {
        if (null !== e) {
          var g = e.next;
          e.next = f.next;
          f.next = g;
        }
        d.baseQueue = e = f;
        c.pending = null;
      }
      if (null !== e) {
        f = e.next;
        d = d.baseState;
        var h = g = null, k = null, l = f;
        do {
          var m = l.lane;
          if ((Hh & m) === m) null !== k && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
          else {
            var q = {
              lane: m,
              action: l.action,
              hasEagerState: l.hasEagerState,
              eagerState: l.eagerState,
              next: null
            };
            null === k ? (h = k = q, g = d) : k = k.next = q;
            M.lanes |= m;
            rh |= m;
          }
          l = l.next;
        } while (null !== l && l !== f);
        null === k ? g = d : k.next = h;
        He(d, b.memoizedState) || (dh = true);
        b.memoizedState = d;
        b.baseState = g;
        b.baseQueue = k;
        c.lastRenderedState = d;
      }
      a = c.interleaved;
      if (null !== a) {
        e = a;
        do
          f = e.lane, M.lanes |= f, rh |= f, e = e.next;
        while (e !== a);
      } else null === e && (c.lanes = 0);
      return [b.memoizedState, c.dispatch];
    }
    function Xh(a) {
      var b = Uh(), c = b.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f = b.memoizedState;
      if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do
          f = a(f, g.action), g = g.next;
        while (g !== e);
        He(f, b.memoizedState) || (dh = true);
        b.memoizedState = f;
        null === b.baseQueue && (b.baseState = f);
        c.lastRenderedState = f;
      }
      return [f, d];
    }
    function Yh() {
    }
    function Zh(a, b) {
      var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
      f && (d.memoizedState = e, dh = true);
      d = d.queue;
      $h(ai.bind(null, c, d, a), [a]);
      if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
        c.flags |= 2048;
        bi(9, ci.bind(null, c, d, e, b), void 0, null);
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(c, b, e);
      }
      return e;
    }
    function di(a, b, c) {
      a.flags |= 16384;
      a = { getSnapshot: b, value: c };
      b = M.updateQueue;
      null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
    }
    function ci(a, b, c, d) {
      b.value = c;
      b.getSnapshot = d;
      ei(b) && fi(a);
    }
    function ai(a, b, c) {
      return c(function() {
        ei(b) && fi(a);
      });
    }
    function ei(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var c = b();
        return !He(a, c);
      } catch (d) {
        return true;
      }
    }
    function fi(a) {
      var b = ih(a, 1);
      null !== b && gi(b, a, 1, -1);
    }
    function hi(a) {
      var b = Th();
      "function" === typeof a && (a = a());
      b.memoizedState = b.baseState = a;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
      b.queue = a;
      a = a.dispatch = ii.bind(null, M, a);
      return [b.memoizedState, a];
    }
    function bi(a, b, c, d) {
      a = { tag: a, create: b, destroy: c, deps: d, next: null };
      b = M.updateQueue;
      null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
      return a;
    }
    function ji() {
      return Uh().memoizedState;
    }
    function ki(a, b, c, d) {
      var e = Th();
      M.flags |= a;
      e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
    }
    function li(a, b, c, d) {
      var e = Uh();
      d = void 0 === d ? null : d;
      var f = void 0;
      if (null !== N) {
        var g = N.memoizedState;
        f = g.destroy;
        if (null !== d && Mh(d, g.deps)) {
          e.memoizedState = bi(b, c, f, d);
          return;
        }
      }
      M.flags |= a;
      e.memoizedState = bi(1 | b, c, f, d);
    }
    function mi(a, b) {
      return ki(8390656, 8, a, b);
    }
    function $h(a, b) {
      return li(2048, 8, a, b);
    }
    function ni(a, b) {
      return li(4, 2, a, b);
    }
    function oi(a, b) {
      return li(4, 4, a, b);
    }
    function pi(a, b) {
      if ("function" === typeof b) return a = a(), b(a), function() {
        b(null);
      };
      if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
        b.current = null;
      };
    }
    function qi(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return li(4, 4, pi.bind(null, b, a), c);
    }
    function ri() {
    }
    function si(a, b) {
      var c = Uh();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Mh(b, d[1])) return d[0];
      c.memoizedState = [a, b];
      return a;
    }
    function ti(a, b) {
      var c = Uh();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Mh(b, d[1])) return d[0];
      a = a();
      c.memoizedState = [a, b];
      return a;
    }
    function ui(a, b, c) {
      if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
      He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
      return b;
    }
    function vi(a, b) {
      var c = C;
      C = 0 !== c && 4 > c ? c : 4;
      a(true);
      var d = Gh.transition;
      Gh.transition = {};
      try {
        a(false), b();
      } finally {
        C = c, Gh.transition = d;
      }
    }
    function wi() {
      return Uh().memoizedState;
    }
    function xi(a, b, c) {
      var d = yi(a);
      c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b, c);
      else if (c = hh(a, b, c, d), null !== c) {
        var e = R();
        gi(c, a, d, e);
        Bi(c, b, d);
      }
    }
    function ii(a, b, c) {
      var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b, e);
      else {
        var f = a.alternate;
        if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
          var g = b.lastRenderedState, h = f(g, c);
          e.hasEagerState = true;
          e.eagerState = h;
          if (He(h, g)) {
            var k = b.interleaved;
            null === k ? (e.next = e, gh(b)) : (e.next = k.next, k.next = e);
            b.interleaved = e;
            return;
          }
        } catch (l) {
        } finally {
        }
        c = hh(a, b, e, d);
        null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
      }
    }
    function zi(a) {
      var b = a.alternate;
      return a === M || null !== b && b === M;
    }
    function Ai(a, b) {
      Jh = Ih = true;
      var c = a.pending;
      null === c ? b.next = b : (b.next = c.next, c.next = b);
      a.pending = b;
    }
    function Bi(a, b, c) {
      if (0 !== (c & 4194240)) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        Cc(a, c);
      }
    }
    var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false };
    var Oh = { readContext: eh, useCallback: function(a, b) {
      Th().memoizedState = [a, void 0 === b ? null : b];
      return a;
    }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return ki(
        4194308,
        4,
        pi.bind(null, b, a),
        c
      );
    }, useLayoutEffect: function(a, b) {
      return ki(4194308, 4, a, b);
    }, useInsertionEffect: function(a, b) {
      return ki(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Th();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: function(a, b, c) {
      var d = Th();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
      d.queue = a;
      a = a.dispatch = xi.bind(null, M, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Th();
      a = { current: a };
      return b.memoizedState = a;
    }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
      return Th().memoizedState = a;
    }, useTransition: function() {
      var a = hi(false), b = a[0];
      a = vi.bind(null, a[1]);
      Th().memoizedState = a;
      return [b, a];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a, b, c) {
      var d = M, e = Th();
      if (I) {
        if (void 0 === c) throw Error(p(407));
        c = c();
      } else {
        c = b();
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(d, b, c);
      }
      e.memoizedState = c;
      var f = { value: c, getSnapshot: b };
      e.queue = f;
      mi(ai.bind(
        null,
        d,
        f,
        a
      ), [a]);
      d.flags |= 2048;
      bi(9, ci.bind(null, d, f, c, b), void 0, null);
      return c;
    }, useId: function() {
      var a = Th(), b = Q.identifierPrefix;
      if (I) {
        var c = sg;
        var d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
        b = ":" + b + "R" + c;
        c = Kh++;
        0 < c && (b += "H" + c.toString(32));
        b += ":";
      } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    }, unstable_isNewReconciler: false };
    var Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function() {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function(a) {
        var b = Uh();
        return ui(b, N.memoizedState, a);
      },
      useTransition: function() {
        var a = Wh(Vh)[0], b = Uh().memoizedState;
        return [a, b];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false
    };
    var Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
      return Xh(Vh);
    }, useDebugValue: ri, useDeferredValue: function(a) {
      var b = Uh();
      return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
    }, useTransition: function() {
      var a = Xh(Vh)[0], b = Uh().memoizedState;
      return [a, b];
    }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
    function Ci(a, b) {
      if (a && a.defaultProps) {
        b = A({}, b);
        a = a.defaultProps;
        for (var c in a) void 0 === b[c] && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function Di(a, b, c, d) {
      b = a.memoizedState;
      c = c(d, b);
      c = null === c || void 0 === c ? b : A({}, b, c);
      a.memoizedState = c;
      0 === a.lanes && (a.updateQueue.baseState = c);
    }
    var Ei = { isMounted: function(a) {
      return (a = a._reactInternals) ? Vb(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f = mh(d, e);
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      b = nh(a, f, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f = mh(d, e);
      f.tag = 1;
      f.payload = b;
      void 0 !== c && null !== c && (f.callback = c);
      b = nh(a, f, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternals;
      var c = R(), d = yi(a), e = mh(c, d);
      e.tag = 2;
      void 0 !== b && null !== b && (e.callback = b);
      b = nh(a, e, d);
      null !== b && (gi(b, a, d, c), oh(b, a, d));
    } };
    function Fi(a, b, c, d, e, f, g) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : true;
    }
    function Gi(a, b, c) {
      var d = false, e = Vf;
      var f = b.contextType;
      "object" === typeof f && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
      b = new b(c, f);
      a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
      b.updater = Ei;
      a.stateNode = b;
      b._reactInternals = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
      return b;
    }
    function Hi(a, b, c, d) {
      a = b.state;
      "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
      "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
      b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
    }
    function Ii(a, b, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = {};
      kh(a);
      var f = b.contextType;
      "object" === typeof f && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
      e.state = a.memoizedState;
      f = b.getDerivedStateFromProps;
      "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
      "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
      "function" === typeof e.componentDidMount && (a.flags |= 4194308);
    }
    function Ji(a, b) {
      try {
        var c = "", d = b;
        do
          c += Pa(d), d = d.return;
        while (d);
        var e = c;
      } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
      }
      return { value: a, source: b, stack: e, digest: null };
    }
    function Ki(a, b, c) {
      return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
    }
    function Li(a, b) {
      try {
        console.error(b.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    var Mi = "function" === typeof WeakMap ? WeakMap : Map;
    function Ni(a, b, c) {
      c = mh(-1, c);
      c.tag = 3;
      c.payload = { element: null };
      var d = b.value;
      c.callback = function() {
        Oi || (Oi = true, Pi = d);
        Li(a, b);
      };
      return c;
    }
    function Qi(a, b, c) {
      c = mh(-1, c);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
          return d(e);
        };
        c.callback = function() {
          Li(a, b);
        };
      }
      var f = a.stateNode;
      null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
        Li(a, b);
        "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
        var c2 = b.stack;
        this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
      });
      return c;
    }
    function Si(a, b, c) {
      var d = a.pingCache;
      if (null === d) {
        d = a.pingCache = new Mi();
        var e = /* @__PURE__ */ new Set();
        d.set(b, e);
      } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
      e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
    }
    function Ui(a) {
      do {
        var b;
        if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
        if (b) return a;
        a = a.return;
      } while (null !== a);
      return null;
    }
    function Vi(a, b, c, d, e) {
      if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
      a.flags |= 65536;
      a.lanes = e;
      return a;
    }
    var Wi = ua.ReactCurrentOwner;
    var dh = false;
    function Xi(a, b, c, d) {
      b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
    }
    function Yi(a, b, c, d, e) {
      c = c.render;
      var f = b.ref;
      ch(b, e);
      d = Nh(a, b, c, d, f, e);
      c = Sh();
      if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
      I && c && vg(b);
      b.flags |= 1;
      Xi(a, b, d, e);
      return b.child;
    }
    function $i(a, b, c, d, e) {
      if (null === a) {
        var f = c.type;
        if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
        a = Rg(c.type, null, d, b, b.mode, e);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      f = a.child;
      if (0 === (a.lanes & e)) {
        var g = f.memoizedProps;
        c = c.compare;
        c = null !== c ? c : Ie;
        if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
      }
      b.flags |= 1;
      a = Pg(f, d);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function bj(a, b, c, d, e) {
      if (null !== a) {
        var f = a.memoizedProps;
        if (Ie(f, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
        else return b.lanes = a.lanes, Zi(a, b, e);
      }
      return cj(a, b, c, d, e);
    }
    function dj(a, b, c) {
      var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
      if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
      else {
        if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
        b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d = null !== f ? f.baseLanes : c;
        G(ej, fj);
        fj |= d;
      }
      else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
      Xi(a, b, e, c);
      return b.child;
    }
    function gj(a, b) {
      var c = b.ref;
      if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
    }
    function cj(a, b, c, d, e) {
      var f = Zf(c) ? Xf : H.current;
      f = Yf(b, f);
      ch(b, e);
      c = Nh(a, b, c, d, f, e);
      d = Sh();
      if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
      I && d && vg(b);
      b.flags |= 1;
      Xi(a, b, c, e);
      return b.child;
    }
    function hj(a, b, c, d, e) {
      if (Zf(c)) {
        var f = true;
        cg(b);
      } else f = false;
      ch(b, e);
      if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
      else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k = g.context, l = c.contextType;
        "object" === typeof l && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
        var m = c.getDerivedStateFromProps, q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
        q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Hi(b, g, d, l);
        jh = false;
        var r = b.memoizedState;
        g.state = r;
        qh(b, d, g, e);
        k = b.memoizedState;
        h !== d || r !== k || Wf.current || jh ? ("function" === typeof m && (Di(b, c, m, d), k = b.memoizedState), (h = jh || Fi(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
      } else {
        g = b.stateNode;
        lh(a, b);
        h = b.memoizedProps;
        l = b.type === b.elementType ? h : Ci(b.type, h);
        g.props = l;
        q = b.pendingProps;
        r = g.context;
        k = c.contextType;
        "object" === typeof k && null !== k ? k = eh(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
        var y = c.getDerivedStateFromProps;
        (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && Hi(b, g, d, k);
        jh = false;
        r = b.memoizedState;
        g.state = r;
        qh(b, d, g, e);
        var n = b.memoizedState;
        h !== q || r !== n || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n = b.memoizedState), (l = jh || Fi(b, c, l, d, r, n, k) || false) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = false);
      }
      return jj(a, b, c, d, f, e);
    }
    function jj(a, b, c, d, e, f) {
      gj(a, b);
      var g = 0 !== (b.flags & 128);
      if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
      d = b.stateNode;
      Wi.current = b;
      var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
      b.flags |= 1;
      null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
      b.memoizedState = d.state;
      e && dg(b, c, true);
      return b.child;
    }
    function kj(a) {
      var b = a.stateNode;
      b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
      yh(a, b.containerInfo);
    }
    function lj(a, b, c, d, e) {
      Ig();
      Jg(e);
      b.flags |= 256;
      Xi(a, b, c, d);
      return b.child;
    }
    var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function nj(a) {
      return { baseLanes: a, cachePool: null, transitions: null };
    }
    function oj(a, b, c) {
      var d = b.pendingProps, e = L.current, f = false, g = 0 !== (b.flags & 128), h;
      (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
      if (h) f = true, b.flags &= -129;
      else if (null === a || null !== a.memoizedState) e |= 1;
      G(L, e & 1);
      if (null === a) {
        Eg(b);
        a = b.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
        g = d.children;
        a = d.fallback;
        return f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
      }
      e = a.memoizedState;
      if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
      if (f) {
        f = d.fallback;
        g = b.mode;
        e = a.child;
        h = e.sibling;
        var k = { mode: "hidden", children: d.children };
        0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = Pg(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
        null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
        f.return = b;
        d.return = b;
        d.sibling = f;
        b.child = d;
        d = f;
        f = b.child;
        g = a.child.memoizedState;
        g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
        f.memoizedState = g;
        f.childLanes = a.childLanes & ~c;
        b.memoizedState = mj;
        return d;
      }
      f = a.child;
      a = f.sibling;
      d = Pg(f, { mode: "visible", children: d.children });
      0 === (b.mode & 1) && (d.lanes = c);
      d.return = b;
      d.sibling = null;
      null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
      b.child = d;
      b.memoizedState = null;
      return d;
    }
    function qj(a, b) {
      b = pj({ mode: "visible", children: b }, a.mode, 0, null);
      b.return = a;
      return a.child = b;
    }
    function sj(a, b, c, d) {
      null !== d && Jg(d);
      Ug(b, a.child, null, c);
      a = qj(b, b.pendingProps.children);
      a.flags |= 2;
      b.memoizedState = null;
      return a;
    }
    function rj(a, b, c, d, e, f, g) {
      if (c) {
        if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
        if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
        f = d.fallback;
        e = b.mode;
        d = pj({ mode: "visible", children: d.children }, e, 0, null);
        f = Tg(f, e, g, null);
        f.flags |= 2;
        d.return = b;
        f.return = b;
        d.sibling = f;
        b.child = d;
        0 !== (b.mode & 1) && Ug(b, a.child, null, g);
        b.child.memoizedState = nj(g);
        b.memoizedState = mj;
        return f;
      }
      if (0 === (b.mode & 1)) return sj(a, b, g, null);
      if ("$!" === e.data) {
        d = e.nextSibling && e.nextSibling.dataset;
        if (d) var h = d.dgst;
        d = h;
        f = Error(p(419));
        d = Ki(f, d, void 0);
        return sj(a, b, g, d);
      }
      h = 0 !== (g & a.childLanes);
      if (dh || h) {
        d = Q;
        if (null !== d) {
          switch (g & -g) {
            case 4:
              e = 2;
              break;
            case 16:
              e = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e = 32;
              break;
            case 536870912:
              e = 268435456;
              break;
            default:
              e = 0;
          }
          e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
          0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
        }
        tj();
        d = Ki(Error(p(421)));
        return sj(a, b, g, d);
      }
      if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
      a = f.treeContext;
      yg = Lf(e.nextSibling);
      xg = b;
      I = true;
      zg = null;
      null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
      b = qj(b, d.children);
      b.flags |= 4096;
      return b;
    }
    function vj(a, b, c) {
      a.lanes |= b;
      var d = a.alternate;
      null !== d && (d.lanes |= b);
      bh(a.return, b, c);
    }
    function wj(a, b, c, d, e) {
      var f = a.memoizedState;
      null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
    }
    function xj(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f = d.tail;
      Xi(a, b, d.children, c);
      d = L.current;
      if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
      else {
        if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
          if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
          else if (19 === a.tag) vj(a, c, b);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b) break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b) break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
        d &= 1;
      }
      G(L, d);
      if (0 === (b.mode & 1)) b.memoizedState = null;
      else switch (e) {
        case "forwards":
          c = b.child;
          for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
          c = e;
          null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
          wj(b, false, e, c, f);
          break;
        case "backwards":
          c = null;
          e = b.child;
          for (b.child = null; null !== e; ) {
            a = e.alternate;
            if (null !== a && null === Ch(a)) {
              b.child = e;
              break;
            }
            a = e.sibling;
            e.sibling = c;
            c = e;
            e = a;
          }
          wj(b, true, c, null, f);
          break;
        case "together":
          wj(b, false, null, null, void 0);
          break;
        default:
          b.memoizedState = null;
      }
      return b.child;
    }
    function ij(a, b) {
      0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
    }
    function Zi(a, b, c) {
      null !== a && (b.dependencies = a.dependencies);
      rh |= b.lanes;
      if (0 === (c & b.childLanes)) return null;
      if (null !== a && b.child !== a.child) throw Error(p(153));
      if (null !== b.child) {
        a = b.child;
        c = Pg(a, a.pendingProps);
        b.child = c;
        for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    function yj(a, b, c) {
      switch (b.tag) {
        case 3:
          kj(b);
          Ig();
          break;
        case 5:
          Ah(b);
          break;
        case 1:
          Zf(b.type) && cg(b);
          break;
        case 4:
          yh(b, b.stateNode.containerInfo);
          break;
        case 10:
          var d = b.type._context, e = b.memoizedProps.value;
          G(Wg, d._currentValue);
          d._currentValue = e;
          break;
        case 13:
          d = b.memoizedState;
          if (null !== d) {
            if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
            if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
            G(L, L.current & 1);
            a = Zi(a, b, c);
            return null !== a ? a.sibling : null;
          }
          G(L, L.current & 1);
          break;
        case 19:
          d = 0 !== (c & b.childLanes);
          if (0 !== (a.flags & 128)) {
            if (d) return xj(a, b, c);
            b.flags |= 128;
          }
          e = b.memoizedState;
          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
          G(L, L.current);
          if (d) break;
          else return null;
        case 22:
        case 23:
          return b.lanes = 0, dj(a, b, c);
      }
      return Zi(a, b, c);
    }
    var zj;
    var Aj;
    var Bj;
    var Cj;
    zj = function(a, b) {
      for (var c = b.child; null !== c; ) {
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b) break;
        for (; null === c.sibling; ) {
          if (null === c.return || c.return === b) return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    };
    Aj = function() {
    };
    Bj = function(a, b, c, d) {
      var e = a.memoizedProps;
      if (e !== d) {
        a = b.stateNode;
        xh(uh.current);
        var f = null;
        switch (c) {
          case "input":
            e = Ya(a, e);
            d = Ya(a, d);
            f = [];
            break;
          case "select":
            e = A({}, e, { value: void 0 });
            d = A({}, d, { value: void 0 });
            f = [];
            break;
          case "textarea":
            e = gb(a, e);
            d = gb(a, d);
            f = [];
            break;
          default:
            "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
        }
        ub(c, d);
        var g;
        c = null;
        for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
          var h = e[l];
          for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
        } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        for (l in d) {
          var k = d[l];
          h = null != e ? e[l] : void 0;
          if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) if (h) {
            for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
            for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
          } else c || (f || (f = []), f.push(
            l,
            c
          )), c = k;
          else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
        }
        c && (f = f || []).push("style", c);
        var l = f;
        if (b.updateQueue = l) b.flags |= 4;
      }
    };
    Cj = function(a, b, c, d) {
      c !== d && (b.flags |= 4);
    };
    function Dj(a, b) {
      if (!I) switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
          null === c ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
          null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
    }
    function S(a) {
      var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
      if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
      else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
      a.subtreeFlags |= d;
      a.childLanes = c;
      return b;
    }
    function Ej(a, b, c) {
      var d = b.pendingProps;
      wg(b);
      switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S(b), null;
        case 1:
          return Zf(b.type) && $f(), S(b), null;
        case 3:
          d = b.stateNode;
          zh();
          E(Wf);
          E(H);
          Eh();
          d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
          if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
          Aj(a, b);
          S(b);
          return null;
        case 5:
          Bh(b);
          var e = xh(wh.current);
          c = b.type;
          if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
          else {
            if (!d) {
              if (null === b.stateNode) throw Error(p(166));
              S(b);
              return null;
            }
            a = xh(uh.current);
            if (Gg(b)) {
              d = b.stateNode;
              c = b.type;
              var f = b.memoizedProps;
              d[Of] = b;
              d[Pf] = f;
              a = 0 !== (b.mode & 1);
              switch (c) {
                case "dialog":
                  D("cancel", d);
                  D("close", d);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", d);
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++) D(lf[e], d);
                  break;
                case "source":
                  D("error", d);
                  break;
                case "img":
                case "image":
                case "link":
                  D(
                    "error",
                    d
                  );
                  D("load", d);
                  break;
                case "details":
                  D("toggle", d);
                  break;
                case "input":
                  Za(d, f);
                  D("invalid", d);
                  break;
                case "select":
                  d._wrapperState = { wasMultiple: !!f.multiple };
                  D("invalid", d);
                  break;
                case "textarea":
                  hb(d, f), D("invalid", d);
              }
              ub(c, f);
              e = null;
              for (var g in f) if (f.hasOwnProperty(g)) {
                var h = f[g];
                "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(
                  d.textContent,
                  h,
                  a
                ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
              }
              switch (c) {
                case "input":
                  Va(d);
                  db(d, f, true);
                  break;
                case "textarea":
                  Va(d);
                  jb(d);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f.onClick && (d.onclick = Bf);
              }
              d = e;
              b.updateQueue = d;
              null !== d && (b.flags |= 4);
            } else {
              g = 9 === e.nodeType ? e : e.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
              "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script></script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
              a[Of] = b;
              a[Pf] = d;
              zj(a, b, false, false);
              b.stateNode = a;
              a: {
                g = vb(c, d);
                switch (c) {
                  case "dialog":
                    D("cancel", a);
                    D("close", a);
                    e = d;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", a);
                    e = d;
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++) D(lf[e], a);
                    e = d;
                    break;
                  case "source":
                    D("error", a);
                    e = d;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D(
                      "error",
                      a
                    );
                    D("load", a);
                    e = d;
                    break;
                  case "details":
                    D("toggle", a);
                    e = d;
                    break;
                  case "input":
                    Za(a, d);
                    e = Ya(a, d);
                    D("invalid", a);
                    break;
                  case "option":
                    e = d;
                    break;
                  case "select":
                    a._wrapperState = { wasMultiple: !!d.multiple };
                    e = A({}, d, { value: void 0 });
                    D("invalid", a);
                    break;
                  case "textarea":
                    hb(a, d);
                    e = gb(a, d);
                    D("invalid", a);
                    break;
                  default:
                    e = d;
                }
                ub(c, e);
                h = e;
                for (f in h) if (h.hasOwnProperty(f)) {
                  var k = h[f];
                  "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
                }
                switch (c) {
                  case "input":
                    Va(a);
                    db(a, d, false);
                    break;
                  case "textarea":
                    Va(a);
                    jb(a);
                    break;
                  case "option":
                    null != d.value && a.setAttribute("value", "" + Sa(d.value));
                    break;
                  case "select":
                    a.multiple = !!d.multiple;
                    f = d.value;
                    null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(
                      a,
                      !!d.multiple,
                      d.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e.onClick && (a.onclick = Bf);
                }
                switch (c) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d = !!d.autoFocus;
                    break a;
                  case "img":
                    d = true;
                    break a;
                  default:
                    d = false;
                }
              }
              d && (b.flags |= 4);
            }
            null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
          }
          S(b);
          return null;
        case 6:
          if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
          else {
            if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
            c = xh(wh.current);
            xh(uh.current);
            if (Gg(b)) {
              d = b.stateNode;
              c = b.memoizedProps;
              d[Of] = b;
              if (f = d.nodeValue !== c) {
                if (a = xg, null !== a) switch (a.tag) {
                  case 3:
                    Af(d.nodeValue, c, 0 !== (a.mode & 1));
                    break;
                  case 5:
                    true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                }
              }
              f && (b.flags |= 4);
            } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
          }
          S(b);
          return null;
        case 13:
          E(L);
          d = b.memoizedState;
          if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
            if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = false;
            else if (f = Gg(b), null !== d && null !== d.dehydrated) {
              if (null === a) {
                if (!f) throw Error(p(318));
                f = b.memoizedState;
                f = null !== f ? f.dehydrated : null;
                if (!f) throw Error(p(317));
                f[Of] = b;
              } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
              S(b);
              f = false;
            } else null !== zg && (Fj(zg), zg = null), f = true;
            if (!f) return b.flags & 65536 ? b : null;
          }
          if (0 !== (b.flags & 128)) return b.lanes = c, b;
          d = null !== d;
          d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
          null !== b.updateQueue && (b.flags |= 4);
          S(b);
          return null;
        case 4:
          return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
        case 10:
          return ah(b.type._context), S(b), null;
        case 17:
          return Zf(b.type) && $f(), S(b), null;
        case 19:
          E(L);
          f = b.memoizedState;
          if (null === f) return S(b), null;
          d = 0 !== (b.flags & 128);
          g = f.rendering;
          if (null === g) if (d) Dj(f, false);
          else {
            if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
              g = Ch(a);
              if (null !== g) {
                b.flags |= 128;
                Dj(f, false);
                d = g.updateQueue;
                null !== d && (b.updateQueue = d, b.flags |= 4);
                b.subtreeFlags = 0;
                d = c;
                for (c = b.child; null !== c; ) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                G(L, L.current & 1 | 2);
                return b.child;
              }
              a = a.sibling;
            }
            null !== f.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
          }
          else {
            if (!d) if (a = Ch(g), null !== a) {
              if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
            } else 2 * B() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
            f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
          }
          if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
          S(b);
          return null;
        case 22:
        case 23:
          return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p(156, b.tag));
    }
    function Ij(a, b) {
      wg(b);
      switch (b.tag) {
        case 1:
          return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
          return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 5:
          return Bh(b), null;
        case 13:
          E(L);
          a = b.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            if (null === b.alternate) throw Error(p(340));
            Ig();
          }
          a = b.flags;
          return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
          return E(L), null;
        case 4:
          return zh(), null;
        case 10:
          return ah(b.type._context), null;
        case 22:
        case 23:
          return Hj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Jj = false;
    var U = false;
    var Kj = "function" === typeof WeakSet ? WeakSet : Set;
    var V = null;
    function Lj(a, b) {
      var c = a.ref;
      if (null !== c) if ("function" === typeof c) try {
        c(null);
      } catch (d) {
        W(a, b, d);
      }
      else c.current = null;
    }
    function Mj(a, b, c) {
      try {
        c();
      } catch (d) {
        W(a, b, d);
      }
    }
    var Nj = false;
    function Oj(a, b) {
      Cf = dd;
      a = Me();
      if (Ne(a)) {
        if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
        else a: {
          c = (c = a.ownerDocument) && c.defaultView || window;
          var d = c.getSelection && c.getSelection();
          if (d && 0 !== d.rangeCount) {
            c = d.anchorNode;
            var e = d.anchorOffset, f = d.focusNode;
            d = d.focusOffset;
            try {
              c.nodeType, f.nodeType;
            } catch (F) {
              c = null;
              break a;
            }
            var g = 0, h = -1, k = -1, l = 0, m = 0, q = a, r = null;
            b: for (; ; ) {
              for (var y; ; ) {
                q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
                3 === q.nodeType && (g += q.nodeValue.length);
                if (null === (y = q.firstChild)) break;
                r = q;
                q = y;
              }
              for (; ; ) {
                if (q === a) break b;
                r === c && ++l === e && (h = g);
                r === f && ++m === d && (k = g);
                if (null !== (y = q.nextSibling)) break;
                q = r;
                r = q.parentNode;
              }
              q = y;
            }
            c = -1 === h || -1 === k ? null : { start: h, end: k };
          } else c = null;
        }
        c = c || { start: 0, end: 0 };
      } else c = null;
      Df = { focusedElem: a, selectionRange: c };
      dd = false;
      for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
      else for (; null !== V; ) {
        b = V;
        try {
          var n = b.alternate;
          if (0 !== (b.flags & 1024)) switch (b.tag) {
            case 0:
            case 11:
            case 15:
              break;
            case 1:
              if (null !== n) {
                var t = n.memoizedProps, J = n.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Ci(b.type, t), J);
                x.__reactInternalSnapshotBeforeUpdate = w;
              }
              break;
            case 3:
              var u = b.stateNode.containerInfo;
              1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
              break;
            case 5:
            case 6:
            case 4:
            case 17:
              break;
            default:
              throw Error(p(163));
          }
        } catch (F) {
          W(b, b.return, F);
        }
        a = b.sibling;
        if (null !== a) {
          a.return = b.return;
          V = a;
          break;
        }
        V = b.return;
      }
      n = Nj;
      Nj = false;
      return n;
    }
    function Pj(a, b, c) {
      var d = b.updateQueue;
      d = null !== d ? d.lastEffect : null;
      if (null !== d) {
        var e = d = d.next;
        do {
          if ((e.tag & a) === a) {
            var f = e.destroy;
            e.destroy = void 0;
            void 0 !== f && Mj(b, c, f);
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Qj(a, b) {
      b = b.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create;
            c.destroy = d();
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Rj(a) {
      var b = a.ref;
      if (null !== b) {
        var c = a.stateNode;
        switch (a.tag) {
          case 5:
            a = c;
            break;
          default:
            a = c;
        }
        "function" === typeof b ? b(a) : b.current = a;
      }
    }
    function Sj(a) {
      var b = a.alternate;
      null !== b && (a.alternate = null, Sj(b));
      a.child = null;
      a.deletions = null;
      a.sibling = null;
      5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
      a.stateNode = null;
      a.return = null;
      a.dependencies = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.stateNode = null;
      a.updateQueue = null;
    }
    function Tj(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Uj(a) {
      a: for (; ; ) {
        for (; null === a.sibling; ) {
          if (null === a.return || Tj(a.return)) return null;
          a = a.return;
        }
        a.sibling.return = a.return;
        for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
          if (a.flags & 2) continue a;
          if (null === a.child || 4 === a.tag) continue a;
          else a.child.return = a, a = a.child;
        }
        if (!(a.flags & 2)) return a.stateNode;
      }
    }
    function Vj(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
      else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
    }
    function Wj(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
      else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
    }
    var X = null;
    var Xj = false;
    function Yj(a, b, c) {
      for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
    }
    function Zj(a, b, c) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
        lc.onCommitFiberUnmount(kc, c);
      } catch (h) {
      }
      switch (c.tag) {
        case 5:
          U || Lj(c, b);
        case 6:
          var d = X, e = Xj;
          X = null;
          Yj(a, b, c);
          X = d;
          Xj = e;
          null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
          break;
        case 18:
          null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
          break;
        case 4:
          d = X;
          e = Xj;
          X = c.stateNode.containerInfo;
          Xj = true;
          Yj(a, b, c);
          X = d;
          Xj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
            e = d = d.next;
            do {
              var f = e, g = f.destroy;
              f = f.tag;
              void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
              e = e.next;
            } while (e !== d);
          }
          Yj(a, b, c);
          break;
        case 1:
          if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
            d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
          } catch (h) {
            W(c, b, h);
          }
          Yj(a, b, c);
          break;
        case 21:
          Yj(a, b, c);
          break;
        case 22:
          c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
          break;
        default:
          Yj(a, b, c);
      }
    }
    function ak(a) {
      var b = a.updateQueue;
      if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Kj());
        b.forEach(function(b2) {
          var d = bk.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d, d));
        });
      }
    }
    function ck(a, b) {
      var c = b.deletions;
      if (null !== c) for (var d = 0; d < c.length; d++) {
        var e = c[d];
        try {
          var f = a, g = b, h = g;
          a: for (; null !== h; ) {
            switch (h.tag) {
              case 5:
                X = h.stateNode;
                Xj = false;
                break a;
              case 3:
                X = h.stateNode.containerInfo;
                Xj = true;
                break a;
              case 4:
                X = h.stateNode.containerInfo;
                Xj = true;
                break a;
            }
            h = h.return;
          }
          if (null === X) throw Error(p(160));
          Zj(f, g, e);
          X = null;
          Xj = false;
          var k = e.alternate;
          null !== k && (k.return = null);
          e.return = null;
        } catch (l) {
          W(e, b, l);
        }
      }
      if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
    }
    function dk(a, b) {
      var c = a.alternate, d = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ck(b, a);
          ek(a);
          if (d & 4) {
            try {
              Pj(3, a, a.return), Qj(3, a);
            } catch (t) {
              W(a, a.return, t);
            }
            try {
              Pj(5, a, a.return);
            } catch (t) {
              W(a, a.return, t);
            }
          }
          break;
        case 1:
          ck(b, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          break;
        case 5:
          ck(b, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          if (a.flags & 32) {
            var e = a.stateNode;
            try {
              ob(e, "");
            } catch (t) {
              W(a, a.return, t);
            }
          }
          if (d & 4 && (e = a.stateNode, null != e)) {
            var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k = a.updateQueue;
            a.updateQueue = null;
            if (null !== k) try {
              "input" === h && "radio" === f.type && null != f.name && ab(e, f);
              vb(h, g);
              var l = vb(h, f);
              for (g = 0; g < k.length; g += 2) {
                var m = k[g], q = k[g + 1];
                "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
              }
              switch (h) {
                case "input":
                  bb(e, f);
                  break;
                case "textarea":
                  ib(e, f);
                  break;
                case "select":
                  var r = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f.multiple;
                  var y = f.value;
                  null != y ? fb(e, !!f.multiple, y, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(
                    e,
                    !!f.multiple,
                    f.defaultValue,
                    true
                  ) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
              }
              e[Pf] = f;
            } catch (t) {
              W(a, a.return, t);
            }
          }
          break;
        case 6:
          ck(b, a);
          ek(a);
          if (d & 4) {
            if (null === a.stateNode) throw Error(p(162));
            e = a.stateNode;
            f = a.memoizedProps;
            try {
              e.nodeValue = f;
            } catch (t) {
              W(a, a.return, t);
            }
          }
          break;
        case 3:
          ck(b, a);
          ek(a);
          if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
            bd(b.containerInfo);
          } catch (t) {
            W(a, a.return, t);
          }
          break;
        case 4:
          ck(b, a);
          ek(a);
          break;
        case 13:
          ck(b, a);
          ek(a);
          e = a.child;
          e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
          d & 4 && ak(a);
          break;
        case 22:
          m = null !== c && null !== c.memoizedState;
          a.mode & 1 ? (U = (l = U) || m, ck(b, a), U = l) : ck(b, a);
          ek(a);
          if (d & 8192) {
            l = null !== a.memoizedState;
            if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m; ) {
              for (q = V = m; null !== V; ) {
                r = V;
                y = r.child;
                switch (r.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Pj(4, r, r.return);
                    break;
                  case 1:
                    Lj(r, r.return);
                    var n = r.stateNode;
                    if ("function" === typeof n.componentWillUnmount) {
                      d = r;
                      c = r.return;
                      try {
                        b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                      } catch (t) {
                        W(d, c, t);
                      }
                    }
                    break;
                  case 5:
                    Lj(r, r.return);
                    break;
                  case 22:
                    if (null !== r.memoizedState) {
                      gk(q);
                      continue;
                    }
                }
                null !== y ? (y.return = r, V = y) : gk(q);
              }
              m = m.sibling;
            }
            a: for (m = null, q = a; ; ) {
              if (5 === q.tag) {
                if (null === m) {
                  m = q;
                  try {
                    e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                  } catch (t) {
                    W(a, a.return, t);
                  }
                }
              } else if (6 === q.tag) {
                if (null === m) try {
                  q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                } catch (t) {
                  W(a, a.return, t);
                }
              } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                q.child.return = q;
                q = q.child;
                continue;
              }
              if (q === a) break a;
              for (; null === q.sibling; ) {
                if (null === q.return || q.return === a) break a;
                m === q && (m = null);
                q = q.return;
              }
              m === q && (m = null);
              q.sibling.return = q.return;
              q = q.sibling;
            }
          }
          break;
        case 19:
          ck(b, a);
          ek(a);
          d & 4 && ak(a);
          break;
        case 21:
          break;
        default:
          ck(
            b,
            a
          ), ek(a);
      }
    }
    function ek(a) {
      var b = a.flags;
      if (b & 2) {
        try {
          a: {
            for (var c = a.return; null !== c; ) {
              if (Tj(c)) {
                var d = c;
                break a;
              }
              c = c.return;
            }
            throw Error(p(160));
          }
          switch (d.tag) {
            case 5:
              var e = d.stateNode;
              d.flags & 32 && (ob(e, ""), d.flags &= -33);
              var f = Uj(a);
              Wj(a, f, e);
              break;
            case 3:
            case 4:
              var g = d.stateNode.containerInfo, h = Uj(a);
              Vj(a, h, g);
              break;
            default:
              throw Error(p(161));
          }
        } catch (k) {
          W(a, a.return, k);
        }
        a.flags &= -3;
      }
      b & 4096 && (a.flags &= -4097);
    }
    function hk(a, b, c) {
      V = a;
      ik(a, b, c);
    }
    function ik(a, b, c) {
      for (var d = 0 !== (a.mode & 1); null !== V; ) {
        var e = V, f = e.child;
        if (22 === e.tag && d) {
          var g = null !== e.memoizedState || Jj;
          if (!g) {
            var h = e.alternate, k = null !== h && null !== h.memoizedState || U;
            h = Jj;
            var l = U;
            Jj = g;
            if ((U = k) && !l) for (V = e; null !== V; ) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k ? (k.return = g, V = k) : jk(e);
            for (; null !== f; ) V = f, ik(f, b, c), f = f.sibling;
            V = e;
            Jj = h;
            U = l;
          }
          kk(a, b, c);
        } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a, b, c);
      }
    }
    function kk(a) {
      for (; null !== V; ) {
        var b = V;
        if (0 !== (b.flags & 8772)) {
          var c = b.alternate;
          try {
            if (0 !== (b.flags & 8772)) switch (b.tag) {
              case 0:
              case 11:
              case 15:
                U || Qj(5, b);
                break;
              case 1:
                var d = b.stateNode;
                if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
                else {
                  var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                  d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                }
                var f = b.updateQueue;
                null !== f && sh(b, f, d);
                break;
              case 3:
                var g = b.updateQueue;
                if (null !== g) {
                  c = null;
                  if (null !== b.child) switch (b.child.tag) {
                    case 5:
                      c = b.child.stateNode;
                      break;
                    case 1:
                      c = b.child.stateNode;
                  }
                  sh(b, g, c);
                }
                break;
              case 5:
                var h = b.stateNode;
                if (null === c && b.flags & 4) {
                  c = h;
                  var k = b.memoizedProps;
                  switch (b.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k.autoFocus && c.focus();
                      break;
                    case "img":
                      k.src && (c.src = k.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b.memoizedState) {
                  var l = b.alternate;
                  if (null !== l) {
                    var m = l.memoizedState;
                    if (null !== m) {
                      var q = m.dehydrated;
                      null !== q && bd(q);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p(163));
            }
            U || b.flags & 512 && Rj(b);
          } catch (r) {
            W(b, b.return, r);
          }
        }
        if (b === a) {
          V = null;
          break;
        }
        c = b.sibling;
        if (null !== c) {
          c.return = b.return;
          V = c;
          break;
        }
        V = b.return;
      }
    }
    function gk(a) {
      for (; null !== V; ) {
        var b = V;
        if (b === a) {
          V = null;
          break;
        }
        var c = b.sibling;
        if (null !== c) {
          c.return = b.return;
          V = c;
          break;
        }
        V = b.return;
      }
    }
    function jk(a) {
      for (; null !== V; ) {
        var b = V;
        try {
          switch (b.tag) {
            case 0:
            case 11:
            case 15:
              var c = b.return;
              try {
                Qj(4, b);
              } catch (k) {
                W(b, c, k);
              }
              break;
            case 1:
              var d = b.stateNode;
              if ("function" === typeof d.componentDidMount) {
                var e = b.return;
                try {
                  d.componentDidMount();
                } catch (k) {
                  W(b, e, k);
                }
              }
              var f = b.return;
              try {
                Rj(b);
              } catch (k) {
                W(b, f, k);
              }
              break;
            case 5:
              var g = b.return;
              try {
                Rj(b);
              } catch (k) {
                W(b, g, k);
              }
          }
        } catch (k) {
          W(b, b.return, k);
        }
        if (b === a) {
          V = null;
          break;
        }
        var h = b.sibling;
        if (null !== h) {
          h.return = b.return;
          V = h;
          break;
        }
        V = b.return;
      }
    }
    var lk = Math.ceil;
    var mk = ua.ReactCurrentDispatcher;
    var nk = ua.ReactCurrentOwner;
    var ok = ua.ReactCurrentBatchConfig;
    var K = 0;
    var Q = null;
    var Y = null;
    var Z = 0;
    var fj = 0;
    var ej = Uf(0);
    var T = 0;
    var pk = null;
    var rh = 0;
    var qk = 0;
    var rk = 0;
    var sk = null;
    var tk = null;
    var fk = 0;
    var Gj = Infinity;
    var uk = null;
    var Oi = false;
    var Pi = null;
    var Ri = null;
    var vk = false;
    var wk = null;
    var xk = 0;
    var yk = 0;
    var zk = null;
    var Ak = -1;
    var Bk = 0;
    function R() {
      return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
    }
    function yi(a) {
      if (0 === (a.mode & 1)) return 1;
      if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
      if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
      a = C;
      if (0 !== a) return a;
      a = window.event;
      a = void 0 === a ? 16 : jd(a.type);
      return a;
    }
    function gi(a, b, c, d) {
      if (50 < yk) throw yk = 0, zk = null, Error(p(185));
      Ac(a, c, d);
      if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
    }
    function Dk(a, b) {
      var c = a.callbackNode;
      wc(a, b);
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
      else if (b = d & -d, a.callbackPriority !== b) {
        null != c && bc(c);
        if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
          0 === (K & 6) && jg();
        }), c = null;
        else {
          switch (Dc(d)) {
            case 1:
              c = fc;
              break;
            case 4:
              c = gc;
              break;
            case 16:
              c = hc;
              break;
            case 536870912:
              c = jc;
              break;
            default:
              c = hc;
          }
          c = Fk(c, Gk.bind(null, a));
        }
        a.callbackPriority = b;
        a.callbackNode = c;
      }
    }
    function Gk(a, b) {
      Ak = -1;
      Bk = 0;
      if (0 !== (K & 6)) throw Error(p(327));
      var c = a.callbackNode;
      if (Hk() && a.callbackNode !== c) return null;
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) return null;
      if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
      else {
        b = d;
        var e = K;
        K |= 2;
        var f = Jk();
        if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
        do
          try {
            Lk();
            break;
          } catch (h) {
            Mk(a, h);
          }
        while (1);
        $g();
        mk.current = f;
        K = e;
        null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
      }
      if (0 !== b) {
        2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
        if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
        if (6 === b) Ck(a, d);
        else {
          e = a.current.alternate;
          if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
          a.finishedWork = e;
          a.finishedLanes = d;
          switch (b) {
            case 0:
            case 1:
              throw Error(p(345));
            case 2:
              Pk(a, tk, uk);
              break;
            case 3:
              Ck(a, d);
              if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
                if (0 !== uc(a, 0)) break;
                e = a.suspendedLanes;
                if ((e & d) !== d) {
                  R();
                  a.pingedLanes |= a.suspendedLanes & e;
                  break;
                }
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 4:
              Ck(a, d);
              if ((d & 4194240) === d) break;
              b = a.eventTimes;
              for (e = -1; 0 < d; ) {
                var g = 31 - oc(d);
                f = 1 << g;
                g = b[g];
                g > e && (e = g);
                d &= ~f;
              }
              d = e;
              d = B() - d;
              d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
              if (10 < d) {
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 5:
              Pk(a, tk, uk);
              break;
            default:
              throw Error(p(329));
          }
        }
      }
      Dk(a, B());
      return a.callbackNode === c ? Gk.bind(null, a) : null;
    }
    function Nk(a, b) {
      var c = sk;
      a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
      a = Ik(a, b);
      2 !== a && (b = tk, tk = c, null !== b && Fj(b));
      return a;
    }
    function Fj(a) {
      null === tk ? tk = a : tk.push.apply(tk, a);
    }
    function Ok(a) {
      for (var b = a; ; ) {
        if (b.flags & 16384) {
          var c = b.updateQueue;
          if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
            var e = c[d], f = e.getSnapshot;
            e = e.value;
            try {
              if (!He(f(), e)) return false;
            } catch (g) {
              return false;
            }
          }
        }
        c = b.child;
        if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
        else {
          if (b === a) break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a) return true;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return true;
    }
    function Ck(a, b) {
      b &= ~rk;
      b &= ~qk;
      a.suspendedLanes |= b;
      a.pingedLanes &= ~b;
      for (a = a.expirationTimes; 0 < b; ) {
        var c = 31 - oc(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
      }
    }
    function Ek(a) {
      if (0 !== (K & 6)) throw Error(p(327));
      Hk();
      var b = uc(a, 0);
      if (0 === (b & 1)) return Dk(a, B()), null;
      var c = Ik(a, b);
      if (0 !== a.tag && 2 === c) {
        var d = xc(a);
        0 !== d && (b = d, c = Nk(a, d));
      }
      if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
      if (6 === c) throw Error(p(345));
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b;
      Pk(a, tk, uk);
      Dk(a, B());
      return null;
    }
    function Qk(a, b) {
      var c = K;
      K |= 1;
      try {
        return a(b);
      } finally {
        K = c, 0 === K && (Gj = B() + 500, fg && jg());
      }
    }
    function Rk(a) {
      null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
      var b = K;
      K |= 1;
      var c = ok.transition, d = C;
      try {
        if (ok.transition = null, C = 1, a) return a();
      } finally {
        C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
      }
    }
    function Hj() {
      fj = ej.current;
      E(ej);
    }
    function Kk(a, b) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c = a.timeoutHandle;
      -1 !== c && (a.timeoutHandle = -1, Gf(c));
      if (null !== Y) for (c = Y.return; null !== c; ) {
        var d = c;
        wg(d);
        switch (d.tag) {
          case 1:
            d = d.type.childContextTypes;
            null !== d && void 0 !== d && $f();
            break;
          case 3:
            zh();
            E(Wf);
            E(H);
            Eh();
            break;
          case 5:
            Bh(d);
            break;
          case 4:
            zh();
            break;
          case 13:
            E(L);
            break;
          case 19:
            E(L);
            break;
          case 10:
            ah(d.type._context);
            break;
          case 22:
          case 23:
            Hj();
        }
        c = c.return;
      }
      Q = a;
      Y = a = Pg(a.current, null);
      Z = fj = b;
      T = 0;
      pk = null;
      rk = qk = rh = 0;
      tk = sk = null;
      if (null !== fh) {
        for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
          c.interleaved = null;
          var e = d.next, f = c.pending;
          if (null !== f) {
            var g = f.next;
            f.next = e;
            d.next = g;
          }
          c.pending = d;
        }
        fh = null;
      }
      return a;
    }
    function Mk(a, b) {
      do {
        var c = Y;
        try {
          $g();
          Fh.current = Rh;
          if (Ih) {
            for (var d = M.memoizedState; null !== d; ) {
              var e = d.queue;
              null !== e && (e.pending = null);
              d = d.next;
            }
            Ih = false;
          }
          Hh = 0;
          O = N = M = null;
          Jh = false;
          Kh = 0;
          nk.current = null;
          if (null === c || null === c.return) {
            T = 1;
            pk = b;
            Y = null;
            break;
          }
          a: {
            var f = a, g = c.return, h = c, k = b;
            b = Z;
            h.flags |= 32768;
            if (null !== k && "object" === typeof k && "function" === typeof k.then) {
              var l = k, m = h, q = m.tag;
              if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                var r = m.alternate;
                r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
              }
              var y = Ui(g);
              if (null !== y) {
                y.flags &= -257;
                Vi(y, g, h, f, b);
                y.mode & 1 && Si(f, l, b);
                b = y;
                k = l;
                var n = b.updateQueue;
                if (null === n) {
                  var t = /* @__PURE__ */ new Set();
                  t.add(k);
                  b.updateQueue = t;
                } else n.add(k);
                break a;
              } else {
                if (0 === (b & 1)) {
                  Si(f, l, b);
                  tj();
                  break a;
                }
                k = Error(p(426));
              }
            } else if (I && h.mode & 1) {
              var J = Ui(g);
              if (null !== J) {
                0 === (J.flags & 65536) && (J.flags |= 256);
                Vi(J, g, h, f, b);
                Jg(Ji(k, h));
                break a;
              }
            }
            f = k = Ji(k, h);
            4 !== T && (T = 2);
            null === sk ? sk = [f] : sk.push(f);
            f = g;
            do {
              switch (f.tag) {
                case 3:
                  f.flags |= 65536;
                  b &= -b;
                  f.lanes |= b;
                  var x = Ni(f, k, b);
                  ph(f, x);
                  break a;
                case 1:
                  h = k;
                  var w = f.type, u = f.stateNode;
                  if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Ri || !Ri.has(u)))) {
                    f.flags |= 65536;
                    b &= -b;
                    f.lanes |= b;
                    var F = Qi(f, h, b);
                    ph(f, F);
                    break a;
                  }
              }
              f = f.return;
            } while (null !== f);
          }
          Sk(c);
        } catch (na) {
          b = na;
          Y === c && null !== c && (Y = c = c.return);
          continue;
        }
        break;
      } while (1);
    }
    function Jk() {
      var a = mk.current;
      mk.current = Rh;
      return null === a ? Rh : a;
    }
    function tj() {
      if (0 === T || 3 === T || 2 === T) T = 4;
      null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
    }
    function Ik(a, b) {
      var c = K;
      K |= 2;
      var d = Jk();
      if (Q !== a || Z !== b) uk = null, Kk(a, b);
      do
        try {
          Tk();
          break;
        } catch (e) {
          Mk(a, e);
        }
      while (1);
      $g();
      K = c;
      mk.current = d;
      if (null !== Y) throw Error(p(261));
      Q = null;
      Z = 0;
      return T;
    }
    function Tk() {
      for (; null !== Y; ) Uk(Y);
    }
    function Lk() {
      for (; null !== Y && !cc(); ) Uk(Y);
    }
    function Uk(a) {
      var b = Vk(a.alternate, a, fj);
      a.memoizedProps = a.pendingProps;
      null === b ? Sk(a) : Y = b;
      nk.current = null;
    }
    function Sk(a) {
      var b = a;
      do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 32768)) {
          if (c = Ej(c, b, fj), null !== c) {
            Y = c;
            return;
          }
        } else {
          c = Ij(c, b);
          if (null !== c) {
            c.flags &= 32767;
            Y = c;
            return;
          }
          if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
          else {
            T = 6;
            Y = null;
            return;
          }
        }
        b = b.sibling;
        if (null !== b) {
          Y = b;
          return;
        }
        Y = b = a;
      } while (null !== b);
      0 === T && (T = 5);
    }
    function Pk(a, b, c) {
      var d = C, e = ok.transition;
      try {
        ok.transition = null, C = 1, Wk(a, b, c, d);
      } finally {
        ok.transition = e, C = d;
      }
      return null;
    }
    function Wk(a, b, c, d) {
      do
        Hk();
      while (null !== wk);
      if (0 !== (K & 6)) throw Error(p(327));
      c = a.finishedWork;
      var e = a.finishedLanes;
      if (null === c) return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c === a.current) throw Error(p(177));
      a.callbackNode = null;
      a.callbackPriority = 0;
      var f = c.lanes | c.childLanes;
      Bc(a, f);
      a === Q && (Y = Q = null, Z = 0);
      0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
        Hk();
        return null;
      }));
      f = 0 !== (c.flags & 15990);
      if (0 !== (c.subtreeFlags & 15990) || f) {
        f = ok.transition;
        ok.transition = null;
        var g = C;
        C = 1;
        var h = K;
        K |= 4;
        nk.current = null;
        Oj(a, c);
        dk(c, a);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a.current = c;
        hk(c, a, e);
        dc();
        K = h;
        C = g;
        ok.transition = f;
      } else a.current = c;
      vk && (vk = false, wk = a, xk = e);
      f = a.pendingLanes;
      0 === f && (Ri = null);
      mc(c.stateNode, d);
      Dk(a, B());
      if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
      if (Oi) throw Oi = false, a = Pi, Pi = null, a;
      0 !== (xk & 1) && 0 !== a.tag && Hk();
      f = a.pendingLanes;
      0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
      jg();
      return null;
    }
    function Hk() {
      if (null !== wk) {
        var a = Dc(xk), b = ok.transition, c = C;
        try {
          ok.transition = null;
          C = 16 > a ? 16 : a;
          if (null === wk) var d = false;
          else {
            a = wk;
            wk = null;
            xk = 0;
            if (0 !== (K & 6)) throw Error(p(331));
            var e = K;
            K |= 4;
            for (V = a.current; null !== V; ) {
              var f = V, g = f.child;
              if (0 !== (V.flags & 16)) {
                var h = f.deletions;
                if (null !== h) {
                  for (var k = 0; k < h.length; k++) {
                    var l = h[k];
                    for (V = l; null !== V; ) {
                      var m = V;
                      switch (m.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(8, m, f);
                      }
                      var q = m.child;
                      if (null !== q) q.return = m, V = q;
                      else for (; null !== V; ) {
                        m = V;
                        var r = m.sibling, y = m.return;
                        Sj(m);
                        if (m === l) {
                          V = null;
                          break;
                        }
                        if (null !== r) {
                          r.return = y;
                          V = r;
                          break;
                        }
                        V = y;
                      }
                    }
                  }
                  var n = f.alternate;
                  if (null !== n) {
                    var t = n.child;
                    if (null !== t) {
                      n.child = null;
                      do {
                        var J = t.sibling;
                        t.sibling = null;
                        t = J;
                      } while (null !== t);
                    }
                  }
                  V = f;
                }
              }
              if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;
              else b: for (; null !== V; ) {
                f = V;
                if (0 !== (f.flags & 2048)) switch (f.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Pj(9, f, f.return);
                }
                var x = f.sibling;
                if (null !== x) {
                  x.return = f.return;
                  V = x;
                  break b;
                }
                V = f.return;
              }
            }
            var w = a.current;
            for (V = w; null !== V; ) {
              g = V;
              var u = g.child;
              if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;
              else b: for (g = w; null !== V; ) {
                h = V;
                if (0 !== (h.flags & 2048)) try {
                  switch (h.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, h);
                  }
                } catch (na) {
                  W(h, h.return, na);
                }
                if (h === g) {
                  V = null;
                  break b;
                }
                var F = h.sibling;
                if (null !== F) {
                  F.return = h.return;
                  V = F;
                  break b;
                }
                V = h.return;
              }
            }
            K = e;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
              lc.onPostCommitFiberRoot(kc, a);
            } catch (na) {
            }
            d = true;
          }
          return d;
        } finally {
          C = c, ok.transition = b;
        }
      }
      return false;
    }
    function Xk(a, b, c) {
      b = Ji(c, b);
      b = Ni(a, b, 1);
      a = nh(a, b, 1);
      b = R();
      null !== a && (Ac(a, 1, b), Dk(a, b));
    }
    function W(a, b, c) {
      if (3 === a.tag) Xk(a, a, c);
      else for (; null !== b; ) {
        if (3 === b.tag) {
          Xk(b, a, c);
          break;
        } else if (1 === b.tag) {
          var d = b.stateNode;
          if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
            a = Ji(c, a);
            a = Qi(b, a, 1);
            b = nh(b, a, 1);
            a = R();
            null !== b && (Ac(b, 1, a), Dk(b, a));
            break;
          }
        }
        b = b.return;
      }
    }
    function Ti(a, b, c) {
      var d = a.pingCache;
      null !== d && d.delete(b);
      b = R();
      a.pingedLanes |= a.suspendedLanes & c;
      Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
      Dk(a, b);
    }
    function Yk(a, b) {
      0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c = R();
      a = ih(a, b);
      null !== a && (Ac(a, b, c), Dk(a, c));
    }
    function uj(a) {
      var b = a.memoizedState, c = 0;
      null !== b && (c = b.retryLane);
      Yk(a, c);
    }
    function bk(a, b) {
      var c = 0;
      switch (a.tag) {
        case 13:
          var d = a.stateNode;
          var e = a.memoizedState;
          null !== e && (c = e.retryLane);
          break;
        case 19:
          d = a.stateNode;
          break;
        default:
          throw Error(p(314));
      }
      null !== d && d.delete(b);
      Yk(a, c);
    }
    var Vk;
    Vk = function(a, b, c) {
      if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
      else {
        if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
        dh = 0 !== (a.flags & 131072) ? true : false;
      }
      else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
      b.lanes = 0;
      switch (b.tag) {
        case 2:
          var d = b.type;
          ij(a, b);
          a = b.pendingProps;
          var e = Yf(b, H.current);
          ch(b, c);
          e = Nh(null, b, d, a, e, c);
          var f = Sh();
          b.flags |= 1;
          "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
          return b;
        case 16:
          d = b.elementType;
          a: {
            ij(a, b);
            a = b.pendingProps;
            e = d._init;
            d = e(d._payload);
            b.type = d;
            e = b.tag = Zk(d);
            a = Ci(d, a);
            switch (e) {
              case 0:
                b = cj(null, b, d, a, c);
                break a;
              case 1:
                b = hj(null, b, d, a, c);
                break a;
              case 11:
                b = Yi(null, b, d, a, c);
                break a;
              case 14:
                b = $i(null, b, d, Ci(d.type, a), c);
                break a;
            }
            throw Error(p(
              306,
              d,
              ""
            ));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
        case 3:
          a: {
            kj(b);
            if (null === a) throw Error(p(387));
            d = b.pendingProps;
            f = b.memoizedState;
            e = f.element;
            lh(a, b);
            qh(b, d, null, c);
            var g = b.memoizedState;
            d = g.element;
            if (f.isDehydrated) if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
              e = Ji(Error(p(423)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else if (d !== e) {
              e = Ji(Error(p(424)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
            else {
              Ig();
              if (d === e) {
                b = Zi(a, b, c);
                break a;
              }
              Xi(a, b, d, c);
            }
            b = b.child;
          }
          return b;
        case 5:
          return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
        case 6:
          return null === a && Eg(b), null;
        case 13:
          return oj(a, b, c);
        case 4:
          return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
        case 7:
          return Xi(a, b, b.pendingProps, c), b.child;
        case 8:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d = b.type._context;
            e = b.pendingProps;
            f = b.memoizedProps;
            g = e.value;
            G(Wg, d._currentValue);
            d._currentValue = g;
            if (null !== f) if (He(f.value, g)) {
              if (f.children === e.children && !Wf.current) {
                b = Zi(a, b, c);
                break a;
              }
            } else for (f = b.child, null !== f && (f.return = b); null !== f; ) {
              var h = f.dependencies;
              if (null !== h) {
                g = f.child;
                for (var k = h.firstContext; null !== k; ) {
                  if (k.context === d) {
                    if (1 === f.tag) {
                      k = mh(-1, c & -c);
                      k.tag = 2;
                      var l = f.updateQueue;
                      if (null !== l) {
                        l = l.shared;
                        var m = l.pending;
                        null === m ? k.next = k : (k.next = m.next, m.next = k);
                        l.pending = k;
                      }
                    }
                    f.lanes |= c;
                    k = f.alternate;
                    null !== k && (k.lanes |= c);
                    bh(
                      f.return,
                      c,
                      b
                    );
                    h.lanes |= c;
                    break;
                  }
                  k = k.next;
                }
              } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
              else if (18 === f.tag) {
                g = f.return;
                if (null === g) throw Error(p(341));
                g.lanes |= c;
                h = g.alternate;
                null !== h && (h.lanes |= c);
                bh(g, c, b);
                g = f.sibling;
              } else g = f.child;
              if (null !== g) g.return = f;
              else for (g = f; null !== g; ) {
                if (g === b) {
                  g = null;
                  break;
                }
                f = g.sibling;
                if (null !== f) {
                  f.return = g.return;
                  g = f;
                  break;
                }
                g = g.return;
              }
              f = g;
            }
            Xi(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
        case 14:
          return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
        case 15:
          return bj(a, b, b.type, b.pendingProps, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
        case 19:
          return xj(a, b, c);
        case 22:
          return dj(a, b, c);
      }
      throw Error(p(156, b.tag));
    };
    function Fk(a, b) {
      return ac(a, b);
    }
    function $k(a, b, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a, b, c, d) {
      return new $k(a, b, c, d);
    }
    function aj(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Zk(a) {
      if ("function" === typeof a) return aj(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Da) return 11;
        if (a === Ga) return 14;
      }
      return 2;
    }
    function Pg(a, b) {
      var c = a.alternate;
      null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
      c.flags = a.flags & 14680064;
      c.childLanes = a.childLanes;
      c.lanes = a.lanes;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function Rg(a, b, c, d, e, f) {
      var g = 2;
      d = a;
      if ("function" === typeof a) aj(a) && (g = 1);
      else if ("string" === typeof a) g = 5;
      else a: switch (a) {
        case ya:
          return Tg(c.children, e, f, b);
        case za:
          g = 8;
          e |= 8;
          break;
        case Aa:
          return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
        case Ea:
          return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
        case Fa:
          return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
        case Ia:
          return pj(c, e, f, b);
        default:
          if ("object" === typeof a && null !== a) switch (a.$$typeof) {
            case Ba:
              g = 10;
              break a;
            case Ca:
              g = 9;
              break a;
            case Da:
              g = 11;
              break a;
            case Ga:
              g = 14;
              break a;
            case Ha:
              g = 16;
              d = null;
              break a;
          }
          throw Error(p(130, null == a ? a : typeof a, ""));
      }
      b = Bg(g, c, b, e);
      b.elementType = a;
      b.type = d;
      b.lanes = f;
      return b;
    }
    function Tg(a, b, c, d) {
      a = Bg(7, a, d, b);
      a.lanes = c;
      return a;
    }
    function pj(a, b, c, d) {
      a = Bg(22, a, d, b);
      a.elementType = Ia;
      a.lanes = c;
      a.stateNode = { isHidden: false };
      return a;
    }
    function Qg(a, b, c) {
      a = Bg(6, a, null, b);
      a.lanes = c;
      return a;
    }
    function Sg(a, b, c) {
      b = Bg(4, null !== a.children ? a.children : [], a.key, b);
      b.lanes = c;
      b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b;
    }
    function al(a, b, c, d, e) {
      this.tag = b;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d;
      this.onRecoverableError = e;
      this.mutableSourceEagerHydrationData = null;
    }
    function bl(a, b, c, d, e, f, g, h, k) {
      a = new al(a, b, c, h, k);
      1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
      f = Bg(3, null, null, b);
      a.current = f;
      f.stateNode = a;
      f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      kh(f);
      return a;
    }
    function cl(a, b, c) {
      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
    }
    function dl(a) {
      if (!a) return Vf;
      a = a._reactInternals;
      a: {
        if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
        var b = a;
        do {
          switch (b.tag) {
            case 3:
              b = b.stateNode.context;
              break a;
            case 1:
              if (Zf(b.type)) {
                b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b = b.return;
        } while (null !== b);
        throw Error(p(171));
      }
      if (1 === a.tag) {
        var c = a.type;
        if (Zf(c)) return bg(a, c, b);
      }
      return b;
    }
    function el(a, b, c, d, e, f, g, h, k) {
      a = bl(c, d, true, a, e, f, g, h, k);
      a.context = dl(null);
      c = a.current;
      d = R();
      e = yi(c);
      f = mh(d, e);
      f.callback = void 0 !== b && null !== b ? b : null;
      nh(c, f, e);
      a.current.lanes = e;
      Ac(a, e, d);
      Dk(a, d);
      return a;
    }
    function fl(a, b, c, d) {
      var e = b.current, f = R(), g = yi(e);
      c = dl(c);
      null === b.context ? b.context = c : b.pendingContext = c;
      b = mh(f, g);
      b.payload = { element: a };
      d = void 0 === d ? null : d;
      null !== d && (b.callback = d);
      a = nh(e, b, g);
      null !== a && (gi(a, e, g, f), oh(a, e, g));
      return g;
    }
    function gl(a) {
      a = a.current;
      if (!a.child) return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function hl(a, b) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
      }
    }
    function il(a, b) {
      hl(a, b);
      (a = a.alternate) && hl(a, b);
    }
    function jl() {
      return null;
    }
    var kl = "function" === typeof reportError ? reportError : function(a) {
      console.error(a);
    };
    function ll(a) {
      this._internalRoot = a;
    }
    ml.prototype.render = ll.prototype.render = function(a) {
      var b = this._internalRoot;
      if (null === b) throw Error(p(409));
      fl(a, b, null, null);
    };
    ml.prototype.unmount = ll.prototype.unmount = function() {
      var a = this._internalRoot;
      if (null !== a) {
        this._internalRoot = null;
        var b = a.containerInfo;
        Rk(function() {
          fl(null, a, null, null);
        });
        b[uf] = null;
      }
    };
    function ml(a) {
      this._internalRoot = a;
    }
    ml.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b = Hc();
        a = { blockedOn: null, target: a, priority: b };
        for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
        Qc.splice(c, 0, a);
        0 === c && Vc(a);
      }
    };
    function nl(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
    }
    function ol(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function pl() {
    }
    function ql(a, b, c, d, e) {
      if (e) {
        if ("function" === typeof d) {
          var f = d;
          d = function() {
            var a2 = gl(g);
            f.call(a2);
          };
        }
        var g = el(b, d, a, 0, null, false, false, "", pl);
        a._reactRootContainer = g;
        a[uf] = g.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Rk();
        return g;
      }
      for (; e = a.lastChild; ) a.removeChild(e);
      if ("function" === typeof d) {
        var h = d;
        d = function() {
          var a2 = gl(k);
          h.call(a2);
        };
      }
      var k = bl(a, 0, false, null, null, false, false, "", pl);
      a._reactRootContainer = k;
      a[uf] = k.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Rk(function() {
        fl(b, k, c, d);
      });
      return k;
    }
    function rl(a, b, c, d, e) {
      var f = c._reactRootContainer;
      if (f) {
        var g = f;
        if ("function" === typeof e) {
          var h = e;
          e = function() {
            var a2 = gl(g);
            h.call(a2);
          };
        }
        fl(b, g, a, e);
      } else g = ql(c, b, a, e, d);
      return gl(g);
    }
    Ec = function(a) {
      switch (a.tag) {
        case 3:
          var b = a.stateNode;
          if (b.current.memoizedState.isDehydrated) {
            var c = tc(b.pendingLanes);
            0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
          }
          break;
        case 13:
          Rk(function() {
            var b2 = ih(a, 1);
            if (null !== b2) {
              var c2 = R();
              gi(b2, a, 1, c2);
            }
          }), il(a, 1);
      }
    };
    Fc = function(a) {
      if (13 === a.tag) {
        var b = ih(a, 134217728);
        if (null !== b) {
          var c = R();
          gi(b, a, 134217728, c);
        }
        il(a, 134217728);
      }
    };
    Gc = function(a) {
      if (13 === a.tag) {
        var b = yi(a), c = ih(a, b);
        if (null !== c) {
          var d = R();
          gi(c, a, b, d);
        }
        il(a, b);
      }
    };
    Hc = function() {
      return C;
    };
    Ic = function(a, b) {
      var c = C;
      try {
        return C = a, b();
      } finally {
        C = c;
      }
    };
    yb = function(a, b, c) {
      switch (b) {
        case "input":
          bb(a, c);
          b = c.name;
          if ("radio" === c.type && null != b) {
            for (c = a; c.parentNode; ) c = c.parentNode;
            c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
            for (b = 0; b < c.length; b++) {
              var d = c[b];
              if (d !== a && d.form === a.form) {
                var e = Db(d);
                if (!e) throw Error(p(90));
                Wa(d);
                bb(d, e);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c);
          break;
        case "select":
          b = c.value, null != b && fb(a, !!c.multiple, b, false);
      }
    };
    Gb = Qk;
    Hb = Rk;
    var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] };
    var tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
    var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = Zb(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!vl.isDisabled && vl.supportsFiber) try {
        kc = vl.inject(ul), lc = vl;
      } catch (a) {
      }
    }
    var vl;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
    exports.createPortal = function(a, b) {
      var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!nl(b)) throw Error(p(200));
      return cl(a, b, null, c);
    };
    exports.createRoot = function(a, b) {
      if (!nl(a)) throw Error(p(299));
      var c = false, d = "", e = kl;
      null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
      b = bl(a, 1, false, null, null, c, false, d, e);
      a[uf] = b.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      return new ll(b);
    };
    exports.findDOMNode = function(a) {
      if (null == a) return null;
      if (1 === a.nodeType) return a;
      var b = a._reactInternals;
      if (void 0 === b) {
        if ("function" === typeof a.render) throw Error(p(188));
        a = Object.keys(a).join(",");
        throw Error(p(268, a));
      }
      a = Zb(b);
      a = null === a ? null : a.stateNode;
      return a;
    };
    exports.flushSync = function(a) {
      return Rk(a);
    };
    exports.hydrate = function(a, b, c) {
      if (!ol(b)) throw Error(p(200));
      return rl(null, a, b, true, c);
    };
    exports.hydrateRoot = function(a, b, c) {
      if (!nl(a)) throw Error(p(405));
      var d = null != c && c.hydratedSources || null, e = false, f = "", g = kl;
      null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
      b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
      a[uf] = b.current;
      sf(a);
      if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
        c,
        e
      );
      return new ml(b);
    };
    exports.render = function(a, b, c) {
      if (!ol(b)) throw Error(p(200));
      return rl(null, a, b, false, c);
    };
    exports.unmountComponentAtNode = function(a) {
      if (!ol(a)) throw Error(p(40));
      return a._reactRootContainer ? (Rk(function() {
        rl(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[uf] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = Qk;
    exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
      if (!ol(c)) throw Error(p(200));
      if (null == a || void 0 === a._reactInternals) throw Error(p(38));
      return rl(a, b, c, false, d);
    };
    exports.version = "18.3.1-next-f1338f8080-20240426";
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React3 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            // $FlowIssue symbol is perfectly valid here
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                c--;
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React3.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a, b) {
          if (isInsideEventHandler) {
            return fn(a, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a = fiber;
          var b = alternate;
          while (true) {
            var parentA = a.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
              a = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.stateNode.current === a) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a, b) {
          return (a & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a, b) {
          return a | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a, b) {
          return a & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a, b) {
          return a !== NoLane && a < b ? a : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a, b) {
          return a !== 0 && a < b ? a : b;
        }
        function lowerEventPriority(a, b) {
          return a === 0 || a > b ? a : b;
        }
        function isHigherEventPriority(a, b) {
          return a !== 0 && a < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            // Used by SimpleEventPlugin:
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            // Used by polyfills:
            // eslint-disable-next-line no-fallthrough
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            // Only enableCreateEventHandleAPI:
            // eslint-disable-next-line no-fallthrough
            case "beforeblur":
            case "afterblur":
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            // Track the input node that has focus.
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            // falls through
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            /* falls through */
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            /* falls through */
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            // TODO: Disabled elements should not respond to mouse events
            /* falls through */
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected") ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
              // but
              case "option":
                return tag === "#text";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
              // No special behavior since these rules fall back to "in body" mode for
              // all except special table nodes which cause bad parsing behavior anyway.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
              case "colgroup":
                return tag === "col" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
              !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context) ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            // Intentional fallthrough
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            // eslint-disable-next-line-no-fallthrough
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            // eslint-disable-next-line-no-fallthrough
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root2,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_SCOPE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_CACHE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_TRACING_MARKER_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_DEBUG_TRACING_MODE_TYPE:
              // eslint-disable-next-line no-fallthrough
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.3.1";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    init_react_inject();
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (process.env.NODE_ENV === "production") {
      checkDCE();
      module.exports = require_react_dom_production_min();
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/@remix-run/router/dist/router.cjs.js
var require_router_cjs = __commonJS({
  "node_modules/@remix-run/router/dist/router.cjs.js"(exports) {
    "use strict";
    init_react_inject();
    Object.defineProperty(exports, "__esModule", { value: true });
    function _extends() {
      _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends.apply(this, arguments);
    }
    var Action = /* @__PURE__ */ function(Action2) {
      Action2["Pop"] = "POP";
      Action2["Push"] = "PUSH";
      Action2["Replace"] = "REPLACE";
      return Action2;
    }({});
    var PopStateEventType = "popstate";
    function createMemoryHistory(options) {
      if (options === void 0) {
        options = {};
      }
      let {
        initialEntries = ["/"],
        initialIndex,
        v5Compat = false
      } = options;
      let entries;
      entries = initialEntries.map((entry, index2) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index2 === 0 ? "default" : void 0));
      let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
      let action = Action.Pop;
      let listener = null;
      function clampIndex(n) {
        return Math.min(Math.max(n, 0), entries.length - 1);
      }
      function getCurrentLocation() {
        return entries[index];
      }
      function createMemoryLocation(to, state, key) {
        if (state === void 0) {
          state = null;
        }
        let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
        warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
        return location;
      }
      function createHref(to) {
        return typeof to === "string" ? to : createPath(to);
      }
      let history = {
        get index() {
          return index;
        },
        get action() {
          return action;
        },
        get location() {
          return getCurrentLocation();
        },
        createHref,
        createURL(to) {
          return new URL(createHref(to), "http://localhost");
        },
        encodeLocation(to) {
          let path = typeof to === "string" ? parsePath(to) : to;
          return {
            pathname: path.pathname || "",
            search: path.search || "",
            hash: path.hash || ""
          };
        },
        push(to, state) {
          action = Action.Push;
          let nextLocation = createMemoryLocation(to, state);
          index += 1;
          entries.splice(index, entries.length, nextLocation);
          if (v5Compat && listener) {
            listener({
              action,
              location: nextLocation,
              delta: 1
            });
          }
        },
        replace(to, state) {
          action = Action.Replace;
          let nextLocation = createMemoryLocation(to, state);
          entries[index] = nextLocation;
          if (v5Compat && listener) {
            listener({
              action,
              location: nextLocation,
              delta: 0
            });
          }
        },
        go(delta) {
          action = Action.Pop;
          let nextIndex = clampIndex(index + delta);
          let nextLocation = entries[nextIndex];
          index = nextIndex;
          if (listener) {
            listener({
              action,
              location: nextLocation,
              delta
            });
          }
        },
        listen(fn) {
          listener = fn;
          return () => {
            listener = null;
          };
        }
      };
      return history;
    }
    function createBrowserHistory(options) {
      if (options === void 0) {
        options = {};
      }
      function createBrowserLocation(window2, globalHistory) {
        let {
          pathname,
          search,
          hash
        } = window2.location;
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createBrowserHref(window2, to) {
        return typeof to === "string" ? to : createPath(to);
      }
      return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
    }
    function createHashHistory(options) {
      if (options === void 0) {
        options = {};
      }
      function createHashLocation(window2, globalHistory) {
        let {
          pathname = "/",
          search = "",
          hash = ""
        } = parsePath(window2.location.hash.substr(1));
        if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
          pathname = "/" + pathname;
        }
        return createLocation(
          "",
          {
            pathname,
            search,
            hash
          },
          // state defaults to `null` because `window.history.state` does
          globalHistory.state && globalHistory.state.usr || null,
          globalHistory.state && globalHistory.state.key || "default"
        );
      }
      function createHashHref(window2, to) {
        let base = window2.document.querySelector("base");
        let href = "";
        if (base && base.getAttribute("href")) {
          let url = window2.location.href;
          let hashIndex = url.indexOf("#");
          href = hashIndex === -1 ? url : url.slice(0, hashIndex);
        }
        return href + "#" + (typeof to === "string" ? to : createPath(to));
      }
      function validateHashLocation(location, to) {
        warning(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
      }
      return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
    }
    function invariant(value, message) {
      if (value === false || value === null || typeof value === "undefined") {
        throw new Error(message);
      }
    }
    function warning(cond, message) {
      if (!cond) {
        if (typeof console !== "undefined") console.warn(message);
        try {
          throw new Error(message);
        } catch (e) {
        }
      }
    }
    function createKey() {
      return Math.random().toString(36).substr(2, 8);
    }
    function getHistoryState(location, index) {
      return {
        usr: location.state,
        key: location.key,
        idx: index
      };
    }
    function createLocation(current, to, state, key) {
      if (state === void 0) {
        state = null;
      }
      let location = _extends({
        pathname: typeof current === "string" ? current : current.pathname,
        search: "",
        hash: ""
      }, typeof to === "string" ? parsePath(to) : to, {
        state,
        // TODO: This could be cleaned up.  push/replace should probably just take
        // full Locations now and avoid the need to run through this flow at all
        // But that's a pretty big refactor to the current test suite so going to
        // keep as is for the time being and just let any incoming keys take precedence
        key: to && to.key || key || createKey()
      });
      return location;
    }
    function createPath(_ref) {
      let {
        pathname = "/",
        search = "",
        hash = ""
      } = _ref;
      if (search && search !== "?") pathname += search.charAt(0) === "?" ? search : "?" + search;
      if (hash && hash !== "#") pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
      return pathname;
    }
    function parsePath(path) {
      let parsedPath = {};
      if (path) {
        let hashIndex = path.indexOf("#");
        if (hashIndex >= 0) {
          parsedPath.hash = path.substr(hashIndex);
          path = path.substr(0, hashIndex);
        }
        let searchIndex = path.indexOf("?");
        if (searchIndex >= 0) {
          parsedPath.search = path.substr(searchIndex);
          path = path.substr(0, searchIndex);
        }
        if (path) {
          parsedPath.pathname = path;
        }
      }
      return parsedPath;
    }
    function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
      if (options === void 0) {
        options = {};
      }
      let {
        window: window2 = document.defaultView,
        v5Compat = false
      } = options;
      let globalHistory = window2.history;
      let action = Action.Pop;
      let listener = null;
      let index = getIndex();
      if (index == null) {
        index = 0;
        globalHistory.replaceState(_extends({}, globalHistory.state, {
          idx: index
        }), "");
      }
      function getIndex() {
        let state = globalHistory.state || {
          idx: null
        };
        return state.idx;
      }
      function handlePop() {
        action = Action.Pop;
        let nextIndex = getIndex();
        let delta = nextIndex == null ? null : nextIndex - index;
        index = nextIndex;
        if (listener) {
          listener({
            action,
            location: history.location,
            delta
          });
        }
      }
      function push(to, state) {
        action = Action.Push;
        let location = createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex() + 1;
        let historyState = getHistoryState(location, index);
        let url = history.createHref(location);
        try {
          globalHistory.pushState(historyState, "", url);
        } catch (error) {
          if (error instanceof DOMException && error.name === "DataCloneError") {
            throw error;
          }
          window2.location.assign(url);
        }
        if (v5Compat && listener) {
          listener({
            action,
            location: history.location,
            delta: 1
          });
        }
      }
      function replace2(to, state) {
        action = Action.Replace;
        let location = createLocation(history.location, to, state);
        if (validateLocation) validateLocation(location, to);
        index = getIndex();
        let historyState = getHistoryState(location, index);
        let url = history.createHref(location);
        globalHistory.replaceState(historyState, "", url);
        if (v5Compat && listener) {
          listener({
            action,
            location: history.location,
            delta: 0
          });
        }
      }
      function createURL(to) {
        let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
        let href = typeof to === "string" ? to : createPath(to);
        href = href.replace(/ $/, "%20");
        invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
        return new URL(href, base);
      }
      let history = {
        get action() {
          return action;
        },
        get location() {
          return getLocation(window2, globalHistory);
        },
        listen(fn) {
          if (listener) {
            throw new Error("A history only accepts one active listener");
          }
          window2.addEventListener(PopStateEventType, handlePop);
          listener = fn;
          return () => {
            window2.removeEventListener(PopStateEventType, handlePop);
            listener = null;
          };
        },
        createHref(to) {
          return createHref(window2, to);
        },
        createURL,
        encodeLocation(to) {
          let url = createURL(to);
          return {
            pathname: url.pathname,
            search: url.search,
            hash: url.hash
          };
        },
        push,
        replace: replace2,
        go(n) {
          return globalHistory.go(n);
        }
      };
      return history;
    }
    var ResultType = /* @__PURE__ */ function(ResultType2) {
      ResultType2["data"] = "data";
      ResultType2["deferred"] = "deferred";
      ResultType2["redirect"] = "redirect";
      ResultType2["error"] = "error";
      return ResultType2;
    }({});
    var immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
    function isIndexRoute(route) {
      return route.index === true;
    }
    function convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {
      if (parentPath === void 0) {
        parentPath = [];
      }
      if (manifest === void 0) {
        manifest = {};
      }
      return routes.map((route, index) => {
        let treePath = [...parentPath, String(index)];
        let id = typeof route.id === "string" ? route.id : treePath.join("-");
        invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
        invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
        if (isIndexRoute(route)) {
          let indexRoute = _extends({}, route, mapRouteProperties(route), {
            id
          });
          manifest[id] = indexRoute;
          return indexRoute;
        } else {
          let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {
            id,
            children: void 0
          });
          manifest[id] = pathOrLayoutRoute;
          if (route.children) {
            pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);
          }
          return pathOrLayoutRoute;
        }
      });
    }
    function matchRoutes(routes, locationArg, basename) {
      if (basename === void 0) {
        basename = "/";
      }
      return matchRoutesImpl(routes, locationArg, basename, false);
    }
    function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
      let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      let pathname = stripBasename(location.pathname || "/", basename);
      if (pathname == null) {
        return null;
      }
      let branches = flattenRoutes(routes);
      rankRouteBranches(branches);
      let matches = null;
      for (let i = 0; matches == null && i < branches.length; ++i) {
        let decoded = decodePath(pathname);
        matches = matchRouteBranch(branches[i], decoded, allowPartial);
      }
      return matches;
    }
    function convertRouteMatchToUiMatch(match, loaderData) {
      let {
        route,
        pathname,
        params
      } = match;
      return {
        id: route.id,
        pathname,
        params,
        data: loaderData[route.id],
        handle: route.handle
      };
    }
    function flattenRoutes(routes, branches, parentsMeta, parentPath) {
      if (branches === void 0) {
        branches = [];
      }
      if (parentsMeta === void 0) {
        parentsMeta = [];
      }
      if (parentPath === void 0) {
        parentPath = "";
      }
      let flattenRoute = (route, index, relativePath) => {
        let meta = {
          relativePath: relativePath === void 0 ? route.path || "" : relativePath,
          caseSensitive: route.caseSensitive === true,
          childrenIndex: index,
          route
        };
        if (meta.relativePath.startsWith("/")) {
          invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
          meta.relativePath = meta.relativePath.slice(parentPath.length);
        }
        let path = joinPaths([parentPath, meta.relativePath]);
        let routesMeta = parentsMeta.concat(meta);
        if (route.children && route.children.length > 0) {
          invariant(
            // Our types know better, but runtime JS may not!
            // @ts-expect-error
            route.index !== true,
            "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
          );
          flattenRoutes(route.children, branches, routesMeta, path);
        }
        if (route.path == null && !route.index) {
          return;
        }
        branches.push({
          path,
          score: computeScore(path, route.index),
          routesMeta
        });
      };
      routes.forEach((route, index) => {
        var _route$path;
        if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
          flattenRoute(route, index);
        } else {
          for (let exploded of explodeOptionalSegments(route.path)) {
            flattenRoute(route, index, exploded);
          }
        }
      });
      return branches;
    }
    function explodeOptionalSegments(path) {
      let segments = path.split("/");
      if (segments.length === 0) return [];
      let [first, ...rest] = segments;
      let isOptional = first.endsWith("?");
      let required = first.replace(/\?$/, "");
      if (rest.length === 0) {
        return isOptional ? [required, ""] : [required];
      }
      let restExploded = explodeOptionalSegments(rest.join("/"));
      let result = [];
      result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
      if (isOptional) {
        result.push(...restExploded);
      }
      return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
    }
    function rankRouteBranches(branches) {
      branches.sort((a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b.routesMeta.map((meta) => meta.childrenIndex)));
    }
    var paramRe = /^:[\w-]+$/;
    var dynamicSegmentValue = 3;
    var indexRouteValue = 2;
    var emptySegmentValue = 1;
    var staticSegmentValue = 10;
    var splatPenalty = -2;
    var isSplat = (s) => s === "*";
    function computeScore(path, index) {
      let segments = path.split("/");
      let initialScore = segments.length;
      if (segments.some(isSplat)) {
        initialScore += splatPenalty;
      }
      if (index) {
        initialScore += indexRouteValue;
      }
      return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
    }
    function compareIndexes(a, b) {
      let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
      return siblings ? (
        // If two routes are siblings, we should try to match the earlier sibling
        // first. This allows people to have fine-grained control over the matching
        // behavior by simply putting routes with identical paths in the order they
        // want them tried.
        a[a.length - 1] - b[b.length - 1]
      ) : (
        // Otherwise, it doesn't really make sense to rank non-siblings by index,
        // so they sort equally.
        0
      );
    }
    function matchRouteBranch(branch, pathname, allowPartial) {
      if (allowPartial === void 0) {
        allowPartial = false;
      }
      let {
        routesMeta
      } = branch;
      let matchedParams = {};
      let matchedPathname = "/";
      let matches = [];
      for (let i = 0; i < routesMeta.length; ++i) {
        let meta = routesMeta[i];
        let end = i === routesMeta.length - 1;
        let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
        let match = matchPath({
          path: meta.relativePath,
          caseSensitive: meta.caseSensitive,
          end
        }, remainingPathname);
        let route = meta.route;
        if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
          match = matchPath({
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
          }, remainingPathname);
        }
        if (!match) {
          return null;
        }
        Object.assign(matchedParams, match.params);
        matches.push({
          // TODO: Can this as be avoided?
          params: matchedParams,
          pathname: joinPaths([matchedPathname, match.pathname]),
          pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),
          route
        });
        if (match.pathnameBase !== "/") {
          matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
        }
      }
      return matches;
    }
    function generatePath(originalPath, params) {
      if (params === void 0) {
        params = {};
      }
      let path = originalPath;
      if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
        warning(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
        path = path.replace(/\*$/, "/*");
      }
      const prefix = path.startsWith("/") ? "/" : "";
      const stringify = (p) => p == null ? "" : typeof p === "string" ? p : String(p);
      const segments = path.split(/\/+/).map((segment, index, array) => {
        const isLastSegment = index === array.length - 1;
        if (isLastSegment && segment === "*") {
          const star = "*";
          return stringify(params[star]);
        }
        const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
        if (keyMatch) {
          const [, key, optional] = keyMatch;
          let param = params[key];
          invariant(optional === "?" || param != null, 'Missing ":' + key + '" param');
          return stringify(param);
        }
        return segment.replace(/\?$/g, "");
      }).filter((segment) => !!segment);
      return prefix + segments.join("/");
    }
    function matchPath(pattern, pathname) {
      if (typeof pattern === "string") {
        pattern = {
          path: pattern,
          caseSensitive: false,
          end: true
        };
      }
      let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
      let match = pathname.match(matcher);
      if (!match) return null;
      let matchedPathname = match[0];
      let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
      let captureGroups = match.slice(1);
      let params = compiledParams.reduce((memo, _ref, index) => {
        let {
          paramName,
          isOptional
        } = _ref;
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) {
          memo[paramName] = void 0;
        } else {
          memo[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo;
      }, {});
      return {
        params,
        pathname: matchedPathname,
        pathnameBase,
        pattern
      };
    }
    function compilePath(path, caseSensitive, end) {
      if (caseSensitive === void 0) {
        caseSensitive = false;
      }
      if (end === void 0) {
        end = true;
      }
      warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
      let params = [];
      let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
        params.push({
          paramName,
          isOptional: isOptional != null
        });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      });
      if (path.endsWith("*")) {
        params.push({
          paramName: "*"
        });
        regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
      } else if (end) {
        regexpSource += "\\/*$";
      } else if (path !== "" && path !== "/") {
        regexpSource += "(?:(?=\\/|$))";
      } else ;
      let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
      return [matcher, params];
    }
    function decodePath(value) {
      try {
        return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
      } catch (error) {
        warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
        return value;
      }
    }
    function stripBasename(pathname, basename) {
      if (basename === "/") return pathname;
      if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
        return null;
      }
      let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
      let nextChar = pathname.charAt(startIndex);
      if (nextChar && nextChar !== "/") {
        return null;
      }
      return pathname.slice(startIndex) || "/";
    }
    function resolvePath(to, fromPathname) {
      if (fromPathname === void 0) {
        fromPathname = "/";
      }
      let {
        pathname: toPathname,
        search = "",
        hash = ""
      } = typeof to === "string" ? parsePath(to) : to;
      let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
      return {
        pathname,
        search: normalizeSearch(search),
        hash: normalizeHash(hash)
      };
    }
    function resolvePathname(relativePath, fromPathname) {
      let segments = fromPathname.replace(/\/+$/, "").split("/");
      let relativeSegments = relativePath.split("/");
      relativeSegments.forEach((segment) => {
        if (segment === "..") {
          if (segments.length > 1) segments.pop();
        } else if (segment !== ".") {
          segments.push(segment);
        }
      });
      return segments.length > 1 ? segments.join("/") : "/";
    }
    function getInvalidPathError(char, field, dest, path) {
      return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
    }
    function getPathContributingMatches(matches) {
      return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);
    }
    function getResolveToMatches(matches, v7_relativeSplatPath) {
      let pathMatches = getPathContributingMatches(matches);
      if (v7_relativeSplatPath) {
        return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);
      }
      return pathMatches.map((match) => match.pathnameBase);
    }
    function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
      if (isPathRelative === void 0) {
        isPathRelative = false;
      }
      let to;
      if (typeof toArg === "string") {
        to = parsePath(toArg);
      } else {
        to = _extends({}, toArg);
        invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
        invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
        invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
      }
      let isEmptyPath = toArg === "" || to.pathname === "";
      let toPathname = isEmptyPath ? "/" : to.pathname;
      let from;
      if (toPathname == null) {
        from = locationPathname;
      } else {
        let routePathnameIndex = routePathnames.length - 1;
        if (!isPathRelative && toPathname.startsWith("..")) {
          let toSegments = toPathname.split("/");
          while (toSegments[0] === "..") {
            toSegments.shift();
            routePathnameIndex -= 1;
          }
          to.pathname = toSegments.join("/");
        }
        from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
      }
      let path = resolvePath(to, from);
      let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
      let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
      if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
        path.pathname += "/";
      }
      return path;
    }
    function getToPathname(to) {
      return to === "" || to.pathname === "" ? "/" : typeof to === "string" ? parsePath(to).pathname : to.pathname;
    }
    var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
    var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    var json = function json2(data2, init) {
      if (init === void 0) {
        init = {};
      }
      let responseInit = typeof init === "number" ? {
        status: init
      } : init;
      let headers = new Headers(responseInit.headers);
      if (!headers.has("Content-Type")) {
        headers.set("Content-Type", "application/json; charset=utf-8");
      }
      return new Response(JSON.stringify(data2), _extends({}, responseInit, {
        headers
      }));
    };
    var DataWithResponseInit = class {
      constructor(data2, init) {
        this.type = "DataWithResponseInit";
        this.data = data2;
        this.init = init || null;
      }
    };
    function data(data2, init) {
      return new DataWithResponseInit(data2, typeof init === "number" ? {
        status: init
      } : init);
    }
    var AbortedDeferredError = class extends Error {
    };
    var DeferredData = class {
      constructor(data2, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set();
        this.subscribers = /* @__PURE__ */ new Set();
        this.deferredKeys = [];
        invariant(data2 && typeof data2 === "object" && !Array.isArray(data2), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_, r) => reject = r);
        this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);
        this.controller.signal.addEventListener("abort", onAbort);
        this.data = Object.entries(data2).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {});
        if (this.done) {
          this.unlistenAbortSignal();
        }
        this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise)) {
          return value;
        }
        this.deferredKeys.push(key);
        this.pendingKeysSet.add(key);
        let promise = Promise.race([value, this.abortPromise]).then((data2) => this.onSettle(promise, key, void 0, data2), (error) => this.onSettle(promise, key, error));
        promise.catch(() => {
        });
        Object.defineProperty(promise, "_tracked", {
          get: () => true
        });
        return promise;
      }
      onSettle(promise, key, error, data2) {
        if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {
          this.unlistenAbortSignal();
          Object.defineProperty(promise, "_error", {
            get: () => error
          });
          return Promise.reject(error);
        }
        this.pendingKeysSet.delete(key);
        if (this.done) {
          this.unlistenAbortSignal();
        }
        if (error === void 0 && data2 === void 0) {
          let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');
          Object.defineProperty(promise, "_error", {
            get: () => undefinedError
          });
          this.emit(false, key);
          return Promise.reject(undefinedError);
        }
        if (data2 === void 0) {
          Object.defineProperty(promise, "_error", {
            get: () => error
          });
          this.emit(false, key);
          return Promise.reject(error);
        }
        Object.defineProperty(promise, "_data", {
          get: () => data2
        });
        this.emit(false, key);
        return data2;
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn) {
        this.subscribers.add(fn);
        return () => this.subscribers.delete(fn);
      }
      cancel() {
        this.controller.abort();
        this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));
        this.emit(true);
      }
      async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort);
          aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort);
              if (aborted2 || this.done) {
                resolve(aborted2);
              }
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
        return Object.entries(this.data).reduce((acc, _ref3) => {
          let [key, value] = _ref3;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    function isTrackedPromise(value) {
      return value instanceof Promise && value._tracked === true;
    }
    function unwrapTrackedPromise(value) {
      if (!isTrackedPromise(value)) {
        return value;
      }
      if (value._error) {
        throw value._error;
      }
      return value._data;
    }
    var defer = function defer2(data2, init) {
      if (init === void 0) {
        init = {};
      }
      let responseInit = typeof init === "number" ? {
        status: init
      } : init;
      return new DeferredData(data2, responseInit);
    };
    var redirect = function redirect2(url, init) {
      if (init === void 0) {
        init = 302;
      }
      let responseInit = init;
      if (typeof responseInit === "number") {
        responseInit = {
          status: responseInit
        };
      } else if (typeof responseInit.status === "undefined") {
        responseInit.status = 302;
      }
      let headers = new Headers(responseInit.headers);
      headers.set("Location", url);
      return new Response(null, _extends({}, responseInit, {
        headers
      }));
    };
    var redirectDocument = (url, init) => {
      let response = redirect(url, init);
      response.headers.set("X-Remix-Reload-Document", "true");
      return response;
    };
    var replace = (url, init) => {
      let response = redirect(url, init);
      response.headers.set("X-Remix-Replace", "true");
      return response;
    };
    var ErrorResponseImpl = class {
      constructor(status, statusText, data2, internal) {
        if (internal === void 0) {
          internal = false;
        }
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data2 instanceof Error) {
          this.data = data2.toString();
          this.error = data2;
        } else {
          this.data = data2;
        }
      }
    };
    function isRouteErrorResponse(error) {
      return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
    }
    var validMutationMethodsArr = ["post", "put", "patch", "delete"];
    var validMutationMethods = new Set(validMutationMethodsArr);
    var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
    var validRequestMethods = new Set(validRequestMethodsArr);
    var redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    var redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
    var IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    var IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    var IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    };
    var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    var defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
    var TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
    function createRouter(init) {
      const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
      const isBrowser = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
      const isServer = !isBrowser;
      invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
      let mapRouteProperties;
      if (init.mapRouteProperties) {
        mapRouteProperties = init.mapRouteProperties;
      } else if (init.detectErrorBoundary) {
        let detectErrorBoundary = init.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else {
        mapRouteProperties = defaultMapRouteProperties;
      }
      let manifest = {};
      let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, void 0, manifest);
      let inFlightDataRoutes;
      let basename = init.basename || "/";
      let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;
      let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;
      let future = _extends({
        v7_fetcherPersist: false,
        v7_normalizeFormMethod: false,
        v7_partialHydration: false,
        v7_prependBasename: false,
        v7_relativeSplatPath: false,
        v7_skipActionErrorRevalidation: false
      }, init.future);
      let unlistenHistory = null;
      let subscribers = /* @__PURE__ */ new Set();
      let savedScrollPositions = null;
      let getScrollRestorationKey = null;
      let getScrollPosition = null;
      let initialScrollRestored = init.hydrationData != null;
      let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
      let initialErrors = null;
      if (initialMatches == null && !patchRoutesOnNavigationImpl) {
        let error = getInternalRouterError(404, {
          pathname: init.history.location.pathname
        });
        let {
          matches,
          route
        } = getShortCircuitMatches(dataRoutes);
        initialMatches = matches;
        initialErrors = {
          [route.id]: error
        };
      }
      if (initialMatches && !init.hydrationData) {
        let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);
        if (fogOfWar.active) {
          initialMatches = null;
        }
      }
      let initialized;
      if (!initialMatches) {
        initialized = false;
        initialMatches = [];
        if (future.v7_partialHydration) {
          let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);
          if (fogOfWar.active && fogOfWar.matches) {
            initialMatches = fogOfWar.matches;
          }
        }
      } else if (initialMatches.some((m) => m.route.lazy)) {
        initialized = false;
      } else if (!initialMatches.some((m) => m.route.loader)) {
        initialized = true;
      } else if (future.v7_partialHydration) {
        let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
        let errors = init.hydrationData ? init.hydrationData.errors : null;
        if (errors) {
          let idx = initialMatches.findIndex((m) => errors[m.route.id] !== void 0);
          initialized = initialMatches.slice(0, idx + 1).every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));
        } else {
          initialized = initialMatches.every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));
        }
      } else {
        initialized = init.hydrationData != null;
      }
      let router;
      let state = {
        historyAction: init.history.action,
        location: init.history.location,
        matches: initialMatches,
        initialized,
        navigation: IDLE_NAVIGATION,
        // Don't restore on initial updateState() if we were SSR'd
        restoreScrollPosition: init.hydrationData != null ? false : null,
        preventScrollReset: false,
        revalidation: "idle",
        loaderData: init.hydrationData && init.hydrationData.loaderData || {},
        actionData: init.hydrationData && init.hydrationData.actionData || null,
        errors: init.hydrationData && init.hydrationData.errors || initialErrors,
        fetchers: /* @__PURE__ */ new Map(),
        blockers: /* @__PURE__ */ new Map()
      };
      let pendingAction = Action.Pop;
      let pendingPreventScrollReset = false;
      let pendingNavigationController;
      let pendingViewTransitionEnabled = false;
      let appliedViewTransitions = /* @__PURE__ */ new Map();
      let removePageHideEventListener = null;
      let isUninterruptedRevalidation = false;
      let isRevalidationRequired = false;
      let cancelledDeferredRoutes = [];
      let cancelledFetcherLoads = /* @__PURE__ */ new Set();
      let fetchControllers = /* @__PURE__ */ new Map();
      let incrementingLoadId = 0;
      let pendingNavigationLoadId = -1;
      let fetchReloadIds = /* @__PURE__ */ new Map();
      let fetchRedirectIds = /* @__PURE__ */ new Set();
      let fetchLoadMatches = /* @__PURE__ */ new Map();
      let activeFetchers = /* @__PURE__ */ new Map();
      let deletedFetchers = /* @__PURE__ */ new Set();
      let activeDeferreds = /* @__PURE__ */ new Map();
      let blockerFunctions = /* @__PURE__ */ new Map();
      let unblockBlockerHistoryUpdate = void 0;
      function initialize() {
        unlistenHistory = init.history.listen((_ref) => {
          let {
            action: historyAction,
            location,
            delta
          } = _ref;
          if (unblockBlockerHistoryUpdate) {
            unblockBlockerHistoryUpdate();
            unblockBlockerHistoryUpdate = void 0;
            return;
          }
          warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
          let blockerKey = shouldBlockNavigation({
            currentLocation: state.location,
            nextLocation: location,
            historyAction
          });
          if (blockerKey && delta != null) {
            let nextHistoryUpdatePromise = new Promise((resolve) => {
              unblockBlockerHistoryUpdate = resolve;
            });
            init.history.go(delta * -1);
            updateBlocker(blockerKey, {
              state: "blocked",
              location,
              proceed() {
                updateBlocker(blockerKey, {
                  state: "proceeding",
                  proceed: void 0,
                  reset: void 0,
                  location
                });
                nextHistoryUpdatePromise.then(() => init.history.go(delta));
              },
              reset() {
                let blockers = new Map(state.blockers);
                blockers.set(blockerKey, IDLE_BLOCKER);
                updateState({
                  blockers
                });
              }
            });
            return;
          }
          return startNavigation(historyAction, location);
        });
        if (isBrowser) {
          restoreAppliedTransitions(routerWindow, appliedViewTransitions);
          let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
          routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
          removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
        }
        if (!state.initialized) {
          startNavigation(Action.Pop, state.location, {
            initialHydration: true
          });
        }
        return router;
      }
      function dispose() {
        if (unlistenHistory) {
          unlistenHistory();
        }
        if (removePageHideEventListener) {
          removePageHideEventListener();
        }
        subscribers.clear();
        pendingNavigationController && pendingNavigationController.abort();
        state.fetchers.forEach((_, key) => deleteFetcher(key));
        state.blockers.forEach((_, key) => deleteBlocker(key));
      }
      function subscribe(fn) {
        subscribers.add(fn);
        return () => subscribers.delete(fn);
      }
      function updateState(newState, opts) {
        if (opts === void 0) {
          opts = {};
        }
        state = _extends({}, state, newState);
        let completedFetchers = [];
        let deletedFetchersKeys = [];
        if (future.v7_fetcherPersist) {
          state.fetchers.forEach((fetcher, key) => {
            if (fetcher.state === "idle") {
              if (deletedFetchers.has(key)) {
                deletedFetchersKeys.push(key);
              } else {
                completedFetchers.push(key);
              }
            }
          });
        }
        [...subscribers].forEach((subscriber) => subscriber(state, {
          deletedFetchers: deletedFetchersKeys,
          viewTransitionOpts: opts.viewTransitionOpts,
          flushSync: opts.flushSync === true
        }));
        if (future.v7_fetcherPersist) {
          completedFetchers.forEach((key) => state.fetchers.delete(key));
          deletedFetchersKeys.forEach((key) => deleteFetcher(key));
        }
      }
      function completeNavigation(location, newState, _temp) {
        var _location$state, _location$state2;
        let {
          flushSync
        } = _temp === void 0 ? {} : _temp;
        let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
        let actionData;
        if (newState.actionData) {
          if (Object.keys(newState.actionData).length > 0) {
            actionData = newState.actionData;
          } else {
            actionData = null;
          }
        } else if (isActionReload) {
          actionData = state.actionData;
        } else {
          actionData = null;
        }
        let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
        let blockers = state.blockers;
        if (blockers.size > 0) {
          blockers = new Map(blockers);
          blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));
        }
        let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
        if (inFlightDataRoutes) {
          dataRoutes = inFlightDataRoutes;
          inFlightDataRoutes = void 0;
        }
        if (isUninterruptedRevalidation) ;
        else if (pendingAction === Action.Pop) ;
        else if (pendingAction === Action.Push) {
          init.history.push(location, location.state);
        } else if (pendingAction === Action.Replace) {
          init.history.replace(location, location.state);
        }
        let viewTransitionOpts;
        if (pendingAction === Action.Pop) {
          let priorPaths = appliedViewTransitions.get(state.location.pathname);
          if (priorPaths && priorPaths.has(location.pathname)) {
            viewTransitionOpts = {
              currentLocation: state.location,
              nextLocation: location
            };
          } else if (appliedViewTransitions.has(location.pathname)) {
            viewTransitionOpts = {
              currentLocation: location,
              nextLocation: state.location
            };
          }
        } else if (pendingViewTransitionEnabled) {
          let toPaths = appliedViewTransitions.get(state.location.pathname);
          if (toPaths) {
            toPaths.add(location.pathname);
          } else {
            toPaths = /* @__PURE__ */ new Set([location.pathname]);
            appliedViewTransitions.set(state.location.pathname, toPaths);
          }
          viewTransitionOpts = {
            currentLocation: state.location,
            nextLocation: location
          };
        }
        updateState(_extends({}, newState, {
          // matches, errors, fetchers go through as-is
          actionData,
          loaderData,
          historyAction: pendingAction,
          location,
          initialized: true,
          navigation: IDLE_NAVIGATION,
          revalidation: "idle",
          restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
          preventScrollReset,
          blockers
        }), {
          viewTransitionOpts,
          flushSync: flushSync === true
        });
        pendingAction = Action.Pop;
        pendingPreventScrollReset = false;
        pendingViewTransitionEnabled = false;
        isUninterruptedRevalidation = false;
        isRevalidationRequired = false;
        cancelledDeferredRoutes = [];
      }
      async function navigate(to, opts) {
        if (typeof to === "number") {
          init.history.go(to);
          return;
        }
        let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
        let {
          path,
          submission,
          error
        } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
        let currentLocation = state.location;
        let nextLocation = createLocation(state.location, path, opts && opts.state);
        nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));
        let userReplace = opts && opts.replace != null ? opts.replace : void 0;
        let historyAction = Action.Push;
        if (userReplace === true) {
          historyAction = Action.Replace;
        } else if (userReplace === false) ;
        else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
          historyAction = Action.Replace;
        }
        let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
        let flushSync = (opts && opts.flushSync) === true;
        let blockerKey = shouldBlockNavigation({
          currentLocation,
          nextLocation,
          historyAction
        });
        if (blockerKey) {
          updateBlocker(blockerKey, {
            state: "blocked",
            location: nextLocation,
            proceed() {
              updateBlocker(blockerKey, {
                state: "proceeding",
                proceed: void 0,
                reset: void 0,
                location: nextLocation
              });
              navigate(to, opts);
            },
            reset() {
              let blockers = new Map(state.blockers);
              blockers.set(blockerKey, IDLE_BLOCKER);
              updateState({
                blockers
              });
            }
          });
          return;
        }
        return await startNavigation(historyAction, nextLocation, {
          submission,
          // Send through the formData serialization error if we have one so we can
          // render at the right error boundary after we match routes
          pendingError: error,
          preventScrollReset,
          replace: opts && opts.replace,
          enableViewTransition: opts && opts.viewTransition,
          flushSync
        });
      }
      function revalidate() {
        interruptActiveLoads();
        updateState({
          revalidation: "loading"
        });
        if (state.navigation.state === "submitting") {
          return;
        }
        if (state.navigation.state === "idle") {
          startNavigation(state.historyAction, state.location, {
            startUninterruptedRevalidation: true
          });
          return;
        }
        startNavigation(pendingAction || state.historyAction, state.navigation.location, {
          overrideNavigation: state.navigation,
          // Proxy through any rending view transition
          enableViewTransition: pendingViewTransitionEnabled === true
        });
      }
      async function startNavigation(historyAction, location, opts) {
        pendingNavigationController && pendingNavigationController.abort();
        pendingNavigationController = null;
        pendingAction = historyAction;
        isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
        saveScrollPosition(state.location, state.matches);
        pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
        pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let loadingNavigation = opts && opts.overrideNavigation;
        let matches = matchRoutes(routesToUse, location, basename);
        let flushSync = (opts && opts.flushSync) === true;
        let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);
        if (fogOfWar.active && fogOfWar.matches) {
          matches = fogOfWar.matches;
        }
        if (!matches) {
          let {
            error,
            notFoundMatches,
            route
          } = handleNavigational404(location.pathname);
          completeNavigation(location, {
            matches: notFoundMatches,
            loaderData: {},
            errors: {
              [route.id]: error
            }
          }, {
            flushSync
          });
          return;
        }
        if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
          completeNavigation(location, {
            matches
          }, {
            flushSync
          });
          return;
        }
        pendingNavigationController = new AbortController();
        let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
        let pendingActionResult;
        if (opts && opts.pendingError) {
          pendingActionResult = [findNearestBoundary(matches).route.id, {
            type: ResultType.error,
            error: opts.pendingError
          }];
        } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
          let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {
            replace: opts.replace,
            flushSync
          });
          if (actionResult.shortCircuited) {
            return;
          }
          if (actionResult.pendingActionResult) {
            let [routeId, result] = actionResult.pendingActionResult;
            if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {
              pendingNavigationController = null;
              completeNavigation(location, {
                matches: actionResult.matches,
                loaderData: {},
                errors: {
                  [routeId]: result.error
                }
              });
              return;
            }
          }
          matches = actionResult.matches || matches;
          pendingActionResult = actionResult.pendingActionResult;
          loadingNavigation = getLoadingNavigation(location, opts.submission);
          flushSync = false;
          fogOfWar.active = false;
          request = createClientSideRequest(init.history, request.url, request.signal);
        }
        let {
          shortCircuited,
          matches: updatedMatches,
          loaderData,
          errors
        } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);
        if (shortCircuited) {
          return;
        }
        pendingNavigationController = null;
        completeNavigation(location, _extends({
          matches: updatedMatches || matches
        }, getActionDataForCommit(pendingActionResult), {
          loaderData,
          errors
        }));
      }
      async function handleAction(request, location, submission, matches, isFogOfWar, opts) {
        if (opts === void 0) {
          opts = {};
        }
        interruptActiveLoads();
        let navigation = getSubmittingNavigation(location, submission);
        updateState({
          navigation
        }, {
          flushSync: opts.flushSync === true
        });
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
          if (discoverResult.type === "aborted") {
            return {
              shortCircuited: true
            };
          } else if (discoverResult.type === "error") {
            let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
            return {
              matches: discoverResult.partialMatches,
              pendingActionResult: [boundaryId, {
                type: ResultType.error,
                error: discoverResult.error
              }]
            };
          } else if (!discoverResult.matches) {
            let {
              notFoundMatches,
              error,
              route
            } = handleNavigational404(location.pathname);
            return {
              matches: notFoundMatches,
              pendingActionResult: [route.id, {
                type: ResultType.error,
                error
              }]
            };
          } else {
            matches = discoverResult.matches;
          }
        }
        let result;
        let actionMatch = getTargetMatch(matches, location);
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          result = {
            type: ResultType.error,
            error: getInternalRouterError(405, {
              method: request.method,
              pathname: location.pathname,
              routeId: actionMatch.route.id
            })
          };
        } else {
          let results = await callDataStrategy("action", state, request, [actionMatch], matches, null);
          result = results[actionMatch.route.id];
          if (request.signal.aborted) {
            return {
              shortCircuited: true
            };
          }
        }
        if (isRedirectResult(result)) {
          let replace2;
          if (opts && opts.replace != null) {
            replace2 = opts.replace;
          } else {
            let location2 = normalizeRedirectLocation(result.response.headers.get("Location"), new URL(request.url), basename);
            replace2 = location2 === state.location.pathname + state.location.search;
          }
          await startRedirectNavigation(request, result, true, {
            submission,
            replace: replace2
          });
          return {
            shortCircuited: true
          };
        }
        if (isDeferredResult(result)) {
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        }
        if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
          if ((opts && opts.replace) !== true) {
            pendingAction = Action.Push;
          }
          return {
            matches,
            pendingActionResult: [boundaryMatch.route.id, result]
          };
        }
        return {
          matches,
          pendingActionResult: [actionMatch.route.id, result]
        };
      }
      async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionResult) {
        let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);
        let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
        let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);
        if (isFogOfWar) {
          if (shouldUpdateNavigationState) {
            let actionData = getUpdatedActionData(pendingActionResult);
            updateState(_extends({
              navigation: loadingNavigation
            }, actionData !== void 0 ? {
              actionData
            } : {}), {
              flushSync
            });
          }
          let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);
          if (discoverResult.type === "aborted") {
            return {
              shortCircuited: true
            };
          } else if (discoverResult.type === "error") {
            let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
            return {
              matches: discoverResult.partialMatches,
              loaderData: {},
              errors: {
                [boundaryId]: discoverResult.error
              }
            };
          } else if (!discoverResult.matches) {
            let {
              error,
              notFoundMatches,
              route
            } = handleNavigational404(location.pathname);
            return {
              matches: notFoundMatches,
              loaderData: {},
              errors: {
                [route.id]: error
              }
            };
          } else {
            matches = discoverResult.matches;
          }
        }
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);
        cancelActiveDeferreds((routeId) => !(matches && matches.some((m) => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId));
        pendingNavigationLoadId = ++incrementingLoadId;
        if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
          let updatedFetchers2 = markFetchRedirectsDone();
          completeNavigation(location, _extends({
            matches,
            loaderData: {},
            // Commit pending error if we're short circuiting
            errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {
              [pendingActionResult[0]]: pendingActionResult[1].error
            } : null
          }, getActionDataForCommit(pendingActionResult), updatedFetchers2 ? {
            fetchers: new Map(state.fetchers)
          } : {}), {
            flushSync
          });
          return {
            shortCircuited: true
          };
        }
        if (shouldUpdateNavigationState) {
          let updates = {};
          if (!isFogOfWar) {
            updates.navigation = loadingNavigation;
            let actionData = getUpdatedActionData(pendingActionResult);
            if (actionData !== void 0) {
              updates.actionData = actionData;
            }
          }
          if (revalidatingFetchers.length > 0) {
            updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);
          }
          updateState(updates, {
            flushSync
          });
        }
        revalidatingFetchers.forEach((rf) => {
          abortFetcher(rf.key);
          if (rf.controller) {
            fetchControllers.set(rf.key, rf.controller);
          }
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f) => abortFetcher(f.key));
        if (pendingNavigationController) {
          pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        }
        let {
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);
        if (request.signal.aborted) {
          return {
            shortCircuited: true
          };
        }
        if (pendingNavigationController) {
          pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        }
        revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
        let redirect2 = findRedirect(loaderResults);
        if (redirect2) {
          await startRedirectNavigation(request, redirect2.result, true, {
            replace: replace2
          });
          return {
            shortCircuited: true
          };
        }
        redirect2 = findRedirect(fetcherResults);
        if (redirect2) {
          fetchRedirectIds.add(redirect2.key);
          await startRedirectNavigation(request, redirect2.result, true, {
            replace: replace2
          });
          return {
            shortCircuited: true
          };
        }
        let {
          loaderData,
          errors
        } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);
        activeDeferreds.forEach((deferredData, routeId) => {
          deferredData.subscribe((aborted) => {
            if (aborted || deferredData.done) {
              activeDeferreds.delete(routeId);
            }
          });
        });
        if (future.v7_partialHydration && initialHydration && state.errors) {
          errors = _extends({}, state.errors, errors);
        }
        let updatedFetchers = markFetchRedirectsDone();
        let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
        let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
        return _extends({
          matches,
          loaderData,
          errors
        }, shouldUpdateFetchers ? {
          fetchers: new Map(state.fetchers)
        } : {});
      }
      function getUpdatedActionData(pendingActionResult) {
        if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {
          return {
            [pendingActionResult[0]]: pendingActionResult[1].data
          };
        } else if (state.actionData) {
          if (Object.keys(state.actionData).length === 0) {
            return null;
          } else {
            return state.actionData;
          }
        }
      }
      function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
        revalidatingFetchers.forEach((rf) => {
          let fetcher = state.fetchers.get(rf.key);
          let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
          state.fetchers.set(rf.key, revalidatingFetcher);
        });
        return new Map(state.fetchers);
      }
      function fetch(key, routeId, href, opts) {
        if (isServer) {
          throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
        }
        abortFetcher(key);
        let flushSync = (opts && opts.flushSync) === true;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
        let matches = matchRoutes(routesToUse, normalizedPath, basename);
        let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
        if (fogOfWar.active && fogOfWar.matches) {
          matches = fogOfWar.matches;
        }
        if (!matches) {
          setFetcherError(key, routeId, getInternalRouterError(404, {
            pathname: normalizedPath
          }), {
            flushSync
          });
          return;
        }
        let {
          path,
          submission,
          error
        } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
        if (error) {
          setFetcherError(key, routeId, error, {
            flushSync
          });
          return;
        }
        let match = getTargetMatch(matches, path);
        let preventScrollReset = (opts && opts.preventScrollReset) === true;
        if (submission && isMutationMethod(submission.formMethod)) {
          handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
          return;
        }
        fetchLoadMatches.set(key, {
          routeId,
          path
        });
        handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
      }
      async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {
        interruptActiveLoads();
        fetchLoadMatches.delete(key);
        function detectAndHandle405Error(m) {
          if (!m.route.action && !m.route.lazy) {
            let error = getInternalRouterError(405, {
              method: submission.formMethod,
              pathname: path,
              routeId
            });
            setFetcherError(key, routeId, error, {
              flushSync
            });
            return true;
          }
          return false;
        }
        if (!isFogOfWar && detectAndHandle405Error(match)) {
          return;
        }
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
          flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);
          if (discoverResult.type === "aborted") {
            return;
          } else if (discoverResult.type === "error") {
            setFetcherError(key, routeId, discoverResult.error, {
              flushSync
            });
            return;
          } else if (!discoverResult.matches) {
            setFetcherError(key, routeId, getInternalRouterError(404, {
              pathname: path
            }), {
              flushSync
            });
            return;
          } else {
            requestMatches = discoverResult.matches;
            match = getTargetMatch(requestMatches, path);
            if (detectAndHandle405Error(match)) {
              return;
            }
          }
        }
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let actionResults = await callDataStrategy("action", state, fetchRequest, [match], requestMatches, key);
        let actionResult = actionResults[match.route.id];
        if (fetchRequest.signal.aborted) {
          if (fetchControllers.get(key) === abortController) {
            fetchControllers.delete(key);
          }
          return;
        }
        if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
          if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          }
        } else {
          if (isRedirectResult(actionResult)) {
            fetchControllers.delete(key);
            if (pendingNavigationLoadId > originatingLoadId) {
              updateFetcherState(key, getDoneFetcher(void 0));
              return;
            } else {
              fetchRedirectIds.add(key);
              updateFetcherState(key, getLoadingFetcher(submission));
              return startRedirectNavigation(fetchRequest, actionResult, false, {
                fetcherSubmission: submission,
                preventScrollReset
              });
            }
          }
          if (isErrorResult(actionResult)) {
            setFetcherError(key, routeId, actionResult.error);
            return;
          }
        }
        if (isDeferredResult(actionResult)) {
          throw getInternalRouterError(400, {
            type: "defer-action"
          });
        }
        let nextLocation = state.navigation.location || state.location;
        let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
        invariant(matches, "Didn't find any matches after fetcher action");
        let loadId = ++incrementingLoadId;
        fetchReloadIds.set(key, loadId);
        let loadFetcher = getLoadingFetcher(submission, actionResult.data);
        state.fetchers.set(key, loadFetcher);
        let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);
        revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
          let staleKey = rf.key;
          let existingFetcher2 = state.fetchers.get(staleKey);
          let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
          state.fetchers.set(staleKey, revalidatingFetcher);
          abortFetcher(staleKey);
          if (rf.controller) {
            fetchControllers.set(staleKey, rf.controller);
          }
        });
        updateState({
          fetchers: new Map(state.fetchers)
        });
        let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
        abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
        let {
          loaderResults,
          fetcherResults
        } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
        if (abortController.signal.aborted) {
          return;
        }
        abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
        fetchReloadIds.delete(key);
        fetchControllers.delete(key);
        revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));
        let redirect2 = findRedirect(loaderResults);
        if (redirect2) {
          return startRedirectNavigation(revalidationRequest, redirect2.result, false, {
            preventScrollReset
          });
        }
        redirect2 = findRedirect(fetcherResults);
        if (redirect2) {
          fetchRedirectIds.add(redirect2.key);
          return startRedirectNavigation(revalidationRequest, redirect2.result, false, {
            preventScrollReset
          });
        }
        let {
          loaderData,
          errors
        } = processLoaderData(state, matches, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
        if (state.fetchers.has(key)) {
          let doneFetcher = getDoneFetcher(actionResult.data);
          state.fetchers.set(key, doneFetcher);
        }
        abortStaleFetchLoads(loadId);
        if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
          invariant(pendingAction, "Expected pending action");
          pendingNavigationController && pendingNavigationController.abort();
          completeNavigation(state.navigation.location, {
            matches,
            loaderData,
            errors,
            fetchers: new Map(state.fetchers)
          });
        } else {
          updateState({
            errors,
            loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),
            fetchers: new Map(state.fetchers)
          });
          isRevalidationRequired = false;
        }
      }
      async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {
        let existingFetcher = state.fetchers.get(key);
        updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
          flushSync
        });
        let abortController = new AbortController();
        let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
        if (isFogOfWar) {
          let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);
          if (discoverResult.type === "aborted") {
            return;
          } else if (discoverResult.type === "error") {
            setFetcherError(key, routeId, discoverResult.error, {
              flushSync
            });
            return;
          } else if (!discoverResult.matches) {
            setFetcherError(key, routeId, getInternalRouterError(404, {
              pathname: path
            }), {
              flushSync
            });
            return;
          } else {
            matches = discoverResult.matches;
            match = getTargetMatch(matches, path);
          }
        }
        fetchControllers.set(key, abortController);
        let originatingLoadId = incrementingLoadId;
        let results = await callDataStrategy("loader", state, fetchRequest, [match], matches, key);
        let result = results[match.route.id];
        if (isDeferredResult(result)) {
          result = await resolveDeferredData(result, fetchRequest.signal, true) || result;
        }
        if (fetchControllers.get(key) === abortController) {
          fetchControllers.delete(key);
        }
        if (fetchRequest.signal.aborted) {
          return;
        }
        if (deletedFetchers.has(key)) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        }
        if (isRedirectResult(result)) {
          if (pendingNavigationLoadId > originatingLoadId) {
            updateFetcherState(key, getDoneFetcher(void 0));
            return;
          } else {
            fetchRedirectIds.add(key);
            await startRedirectNavigation(fetchRequest, result, false, {
              preventScrollReset
            });
            return;
          }
        }
        if (isErrorResult(result)) {
          setFetcherError(key, routeId, result.error);
          return;
        }
        invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
        updateFetcherState(key, getDoneFetcher(result.data));
      }
      async function startRedirectNavigation(request, redirect2, isNavigation, _temp2) {
        let {
          submission,
          fetcherSubmission,
          preventScrollReset,
          replace: replace2
        } = _temp2 === void 0 ? {} : _temp2;
        if (redirect2.response.headers.has("X-Remix-Revalidate")) {
          isRevalidationRequired = true;
        }
        let location = redirect2.response.headers.get("Location");
        invariant(location, "Expected a Location header on the redirect Response");
        location = normalizeRedirectLocation(location, new URL(request.url), basename);
        let redirectLocation = createLocation(state.location, location, {
          _isRedirect: true
        });
        if (isBrowser) {
          let isDocumentReload = false;
          if (redirect2.response.headers.has("X-Remix-Reload-Document")) {
            isDocumentReload = true;
          } else if (ABSOLUTE_URL_REGEX.test(location)) {
            const url = init.history.createURL(location);
            isDocumentReload = // Hard reload if it's an absolute URL to a new origin
            url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
            stripBasename(url.pathname, basename) == null;
          }
          if (isDocumentReload) {
            if (replace2) {
              routerWindow.location.replace(location);
            } else {
              routerWindow.location.assign(location);
            }
            return;
          }
        }
        pendingNavigationController = null;
        let redirectHistoryAction = replace2 === true || redirect2.response.headers.has("X-Remix-Replace") ? Action.Replace : Action.Push;
        let {
          formMethod,
          formAction,
          formEncType
        } = state.navigation;
        if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
          submission = getSubmissionFromNavigation(state.navigation);
        }
        let activeSubmission = submission || fetcherSubmission;
        if (redirectPreserveMethodStatusCodes.has(redirect2.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
          await startNavigation(redirectHistoryAction, redirectLocation, {
            submission: _extends({}, activeSubmission, {
              formAction: location
            }),
            // Preserve these flags across redirects
            preventScrollReset: preventScrollReset || pendingPreventScrollReset,
            enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
          });
        } else {
          let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
          await startNavigation(redirectHistoryAction, redirectLocation, {
            overrideNavigation,
            // Send fetcher submissions through for shouldRevalidate
            fetcherSubmission,
            // Preserve these flags across redirects
            preventScrollReset: preventScrollReset || pendingPreventScrollReset,
            enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
          });
        }
      }
      async function callDataStrategy(type, state2, request, matchesToLoad, matches, fetcherKey) {
        let results;
        let dataResults = {};
        try {
          results = await callDataStrategyImpl(dataStrategyImpl, type, state2, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);
        } catch (e) {
          matchesToLoad.forEach((m) => {
            dataResults[m.route.id] = {
              type: ResultType.error,
              error: e
            };
          });
          return dataResults;
        }
        for (let [routeId, result] of Object.entries(results)) {
          if (isRedirectDataStrategyResultResult(result)) {
            let response = result.result;
            dataResults[routeId] = {
              type: ResultType.redirect,
              response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)
            };
          } else {
            dataResults[routeId] = await convertDataStrategyResultToDataResult(result);
          }
        }
        return dataResults;
      }
      async function callLoadersAndMaybeResolveData(state2, matches, matchesToLoad, fetchersToLoad, request) {
        let currentMatches = state2.matches;
        let loaderResultsPromise = callDataStrategy("loader", state2, request, matchesToLoad, matches, null);
        let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async (f) => {
          if (f.matches && f.match && f.controller) {
            let results = await callDataStrategy("loader", state2, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);
            let result = results[f.match.route.id];
            return {
              [f.key]: result
            };
          } else {
            return Promise.resolve({
              [f.key]: {
                type: ResultType.error,
                error: getInternalRouterError(404, {
                  pathname: f.path
                })
              }
            });
          }
        }));
        let loaderResults = await loaderResultsPromise;
        let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});
        await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state2.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);
        return {
          loaderResults,
          fetcherResults
        };
      }
      function interruptActiveLoads() {
        isRevalidationRequired = true;
        cancelledDeferredRoutes.push(...cancelActiveDeferreds());
        fetchLoadMatches.forEach((_, key) => {
          if (fetchControllers.has(key)) {
            cancelledFetcherLoads.add(key);
          }
          abortFetcher(key);
        });
      }
      function updateFetcherState(key, fetcher, opts) {
        if (opts === void 0) {
          opts = {};
        }
        state.fetchers.set(key, fetcher);
        updateState({
          fetchers: new Map(state.fetchers)
        }, {
          flushSync: (opts && opts.flushSync) === true
        });
      }
      function setFetcherError(key, routeId, error, opts) {
        if (opts === void 0) {
          opts = {};
        }
        let boundaryMatch = findNearestBoundary(state.matches, routeId);
        deleteFetcher(key);
        updateState({
          errors: {
            [boundaryMatch.route.id]: error
          },
          fetchers: new Map(state.fetchers)
        }, {
          flushSync: (opts && opts.flushSync) === true
        });
      }
      function getFetcher(key) {
        if (future.v7_fetcherPersist) {
          activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
          if (deletedFetchers.has(key)) {
            deletedFetchers.delete(key);
          }
        }
        return state.fetchers.get(key) || IDLE_FETCHER;
      }
      function deleteFetcher(key) {
        let fetcher = state.fetchers.get(key);
        if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
          abortFetcher(key);
        }
        fetchLoadMatches.delete(key);
        fetchReloadIds.delete(key);
        fetchRedirectIds.delete(key);
        deletedFetchers.delete(key);
        cancelledFetcherLoads.delete(key);
        state.fetchers.delete(key);
      }
      function deleteFetcherAndUpdateState(key) {
        if (future.v7_fetcherPersist) {
          let count = (activeFetchers.get(key) || 0) - 1;
          if (count <= 0) {
            activeFetchers.delete(key);
            deletedFetchers.add(key);
          } else {
            activeFetchers.set(key, count);
          }
        } else {
          deleteFetcher(key);
        }
        updateState({
          fetchers: new Map(state.fetchers)
        });
      }
      function abortFetcher(key) {
        let controller = fetchControllers.get(key);
        if (controller) {
          controller.abort();
          fetchControllers.delete(key);
        }
      }
      function markFetchersDone(keys) {
        for (let key of keys) {
          let fetcher = getFetcher(key);
          let doneFetcher = getDoneFetcher(fetcher.data);
          state.fetchers.set(key, doneFetcher);
        }
      }
      function markFetchRedirectsDone() {
        let doneKeys = [];
        let updatedFetchers = false;
        for (let key of fetchRedirectIds) {
          let fetcher = state.fetchers.get(key);
          invariant(fetcher, "Expected fetcher: " + key);
          if (fetcher.state === "loading") {
            fetchRedirectIds.delete(key);
            doneKeys.push(key);
            updatedFetchers = true;
          }
        }
        markFetchersDone(doneKeys);
        return updatedFetchers;
      }
      function abortStaleFetchLoads(landedId) {
        let yeetedKeys = [];
        for (let [key, id] of fetchReloadIds) {
          if (id < landedId) {
            let fetcher = state.fetchers.get(key);
            invariant(fetcher, "Expected fetcher: " + key);
            if (fetcher.state === "loading") {
              abortFetcher(key);
              fetchReloadIds.delete(key);
              yeetedKeys.push(key);
            }
          }
        }
        markFetchersDone(yeetedKeys);
        return yeetedKeys.length > 0;
      }
      function getBlocker(key, fn) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        if (blockerFunctions.get(key) !== fn) {
          blockerFunctions.set(key, fn);
        }
        return blocker;
      }
      function deleteBlocker(key) {
        state.blockers.delete(key);
        blockerFunctions.delete(key);
      }
      function updateBlocker(key, newBlocker) {
        let blocker = state.blockers.get(key) || IDLE_BLOCKER;
        invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
        let blockers = new Map(state.blockers);
        blockers.set(key, newBlocker);
        updateState({
          blockers
        });
      }
      function shouldBlockNavigation(_ref2) {
        let {
          currentLocation,
          nextLocation,
          historyAction
        } = _ref2;
        if (blockerFunctions.size === 0) {
          return;
        }
        if (blockerFunctions.size > 1) {
          warning(false, "A router only supports one blocker at a time");
        }
        let entries = Array.from(blockerFunctions.entries());
        let [blockerKey, blockerFunction] = entries[entries.length - 1];
        let blocker = state.blockers.get(blockerKey);
        if (blocker && blocker.state === "proceeding") {
          return;
        }
        if (blockerFunction({
          currentLocation,
          nextLocation,
          historyAction
        })) {
          return blockerKey;
        }
      }
      function handleNavigational404(pathname) {
        let error = getInternalRouterError(404, {
          pathname
        });
        let routesToUse = inFlightDataRoutes || dataRoutes;
        let {
          matches,
          route
        } = getShortCircuitMatches(routesToUse);
        cancelActiveDeferreds();
        return {
          notFoundMatches: matches,
          route,
          error
        };
      }
      function cancelActiveDeferreds(predicate) {
        let cancelledRouteIds = [];
        activeDeferreds.forEach((dfd, routeId) => {
          if (!predicate || predicate(routeId)) {
            dfd.cancel();
            cancelledRouteIds.push(routeId);
            activeDeferreds.delete(routeId);
          }
        });
        return cancelledRouteIds;
      }
      function enableScrollRestoration(positions, getPosition, getKey) {
        savedScrollPositions = positions;
        getScrollPosition = getPosition;
        getScrollRestorationKey = getKey || null;
        if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
          initialScrollRestored = true;
          let y = getSavedScrollPosition(state.location, state.matches);
          if (y != null) {
            updateState({
              restoreScrollPosition: y
            });
          }
        }
        return () => {
          savedScrollPositions = null;
          getScrollPosition = null;
          getScrollRestorationKey = null;
        };
      }
      function getScrollKey(location, matches) {
        if (getScrollRestorationKey) {
          let key = getScrollRestorationKey(location, matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData)));
          return key || location.key;
        }
        return location.key;
      }
      function saveScrollPosition(location, matches) {
        if (savedScrollPositions && getScrollPosition) {
          let key = getScrollKey(location, matches);
          savedScrollPositions[key] = getScrollPosition();
        }
      }
      function getSavedScrollPosition(location, matches) {
        if (savedScrollPositions) {
          let key = getScrollKey(location, matches);
          let y = savedScrollPositions[key];
          if (typeof y === "number") {
            return y;
          }
        }
        return null;
      }
      function checkFogOfWar(matches, routesToUse, pathname) {
        if (patchRoutesOnNavigationImpl) {
          if (!matches) {
            let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
            return {
              active: true,
              matches: fogMatches || []
            };
          } else {
            if (Object.keys(matches[0].params).length > 0) {
              let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
              return {
                active: true,
                matches: partialMatches
              };
            }
          }
        }
        return {
          active: false,
          matches: null
        };
      }
      async function discoverRoutes(matches, pathname, signal) {
        if (!patchRoutesOnNavigationImpl) {
          return {
            type: "success",
            matches
          };
        }
        let partialMatches = matches;
        while (true) {
          let isNonHMR = inFlightDataRoutes == null;
          let routesToUse = inFlightDataRoutes || dataRoutes;
          let localManifest = manifest;
          try {
            await patchRoutesOnNavigationImpl({
              path: pathname,
              matches: partialMatches,
              patch: (routeId, children) => {
                if (signal.aborted) return;
                patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);
              }
            });
          } catch (e) {
            return {
              type: "error",
              error: e,
              partialMatches
            };
          } finally {
            if (isNonHMR && !signal.aborted) {
              dataRoutes = [...dataRoutes];
            }
          }
          if (signal.aborted) {
            return {
              type: "aborted"
            };
          }
          let newMatches = matchRoutes(routesToUse, pathname, basename);
          if (newMatches) {
            return {
              type: "success",
              matches: newMatches
            };
          }
          let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
          if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {
            return {
              type: "success",
              matches: null
            };
          }
          partialMatches = newPartialMatches;
        }
      }
      function _internalSetRoutes(newRoutes) {
        manifest = {};
        inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, void 0, manifest);
      }
      function patchRoutes(routeId, children) {
        let isNonHMR = inFlightDataRoutes == null;
        let routesToUse = inFlightDataRoutes || dataRoutes;
        patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);
        if (isNonHMR) {
          dataRoutes = [...dataRoutes];
          updateState({});
        }
      }
      router = {
        get basename() {
          return basename;
        },
        get future() {
          return future;
        },
        get state() {
          return state;
        },
        get routes() {
          return dataRoutes;
        },
        get window() {
          return routerWindow;
        },
        initialize,
        subscribe,
        enableScrollRestoration,
        navigate,
        fetch,
        revalidate,
        // Passthrough to history-aware createHref used by useHref so we get proper
        // hash-aware URLs in DOM paths
        createHref: (to) => init.history.createHref(to),
        encodeLocation: (to) => init.history.encodeLocation(to),
        getFetcher,
        deleteFetcher: deleteFetcherAndUpdateState,
        dispose,
        getBlocker,
        deleteBlocker,
        patchRoutes,
        _internalFetchControllers: fetchControllers,
        _internalActiveDeferreds: activeDeferreds,
        // TODO: Remove setRoutes, it's temporary to avoid dealing with
        // updating the tree while validating the update algorithm.
        _internalSetRoutes
      };
      return router;
    }
    var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
    function createStaticHandler(routes, opts) {
      invariant(routes.length > 0, "You must provide a non-empty routes array to createStaticHandler");
      let manifest = {};
      let basename = (opts ? opts.basename : null) || "/";
      let mapRouteProperties;
      if (opts != null && opts.mapRouteProperties) {
        mapRouteProperties = opts.mapRouteProperties;
      } else if (opts != null && opts.detectErrorBoundary) {
        let detectErrorBoundary = opts.detectErrorBoundary;
        mapRouteProperties = (route) => ({
          hasErrorBoundary: detectErrorBoundary(route)
        });
      } else {
        mapRouteProperties = defaultMapRouteProperties;
      }
      let future = _extends({
        v7_relativeSplatPath: false,
        v7_throwAbortReason: false
      }, opts ? opts.future : null);
      let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, void 0, manifest);
      async function query(request, _temp3) {
        let {
          requestContext,
          skipLoaderErrorBubbling,
          dataStrategy
        } = _temp3 === void 0 ? {} : _temp3;
        let url = new URL(request.url);
        let method = request.method;
        let location = createLocation("", createPath(url), null, "default");
        let matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD") {
          let error = getInternalRouterError(405, {
            method
          });
          let {
            matches: methodNotAllowedMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: methodNotAllowedMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error
            },
            statusCode: error.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        } else if (!matches) {
          let error = getInternalRouterError(404, {
            pathname: location.pathname
          });
          let {
            matches: notFoundMatches,
            route
          } = getShortCircuitMatches(dataRoutes);
          return {
            basename,
            location,
            matches: notFoundMatches,
            loaderData: {},
            actionData: null,
            errors: {
              [route.id]: error
            },
            statusCode: error.status,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);
        if (isResponse(result)) {
          return result;
        }
        return _extends({
          location,
          basename
        }, result);
      }
      async function queryRoute(request, _temp4) {
        let {
          routeId,
          requestContext,
          dataStrategy
        } = _temp4 === void 0 ? {} : _temp4;
        let url = new URL(request.url);
        let method = request.method;
        let location = createLocation("", createPath(url), null, "default");
        let matches = matchRoutes(dataRoutes, location, basename);
        if (!isValidMethod(method) && method !== "HEAD" && method !== "OPTIONS") {
          throw getInternalRouterError(405, {
            method
          });
        } else if (!matches) {
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        }
        let match = routeId ? matches.find((m) => m.route.id === routeId) : getTargetMatch(matches, location);
        if (routeId && !match) {
          throw getInternalRouterError(403, {
            pathname: location.pathname,
            routeId
          });
        } else if (!match) {
          throw getInternalRouterError(404, {
            pathname: location.pathname
          });
        }
        let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);
        if (isResponse(result)) {
          return result;
        }
        let error = result.errors ? Object.values(result.errors)[0] : void 0;
        if (error !== void 0) {
          throw error;
        }
        if (result.actionData) {
          return Object.values(result.actionData)[0];
        }
        if (result.loaderData) {
          var _result$activeDeferre;
          let data2 = Object.values(result.loaderData)[0];
          if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {
            data2[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];
          }
          return data2;
        }
        return void 0;
      }
      async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {
        invariant(request.signal, "query()/queryRoute() requests must contain an AbortController signal");
        try {
          if (isMutationMethod(request.method.toLowerCase())) {
            let result2 = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);
            return result2;
          }
          let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);
          return isResponse(result) ? result : _extends({}, result, {
            actionData: null,
            actionHeaders: {}
          });
        } catch (e) {
          if (isDataStrategyResult(e) && isResponse(e.result)) {
            if (e.type === ResultType.error) {
              throw e.result;
            }
            return e.result;
          }
          if (isRedirectResponse(e)) {
            return e;
          }
          throw e;
        }
      }
      async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {
        let result;
        if (!actionMatch.route.action && !actionMatch.route.lazy) {
          let error = getInternalRouterError(405, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: actionMatch.route.id
          });
          if (isRouteRequest) {
            throw error;
          }
          result = {
            type: ResultType.error,
            error
          };
        } else {
          let results = await callDataStrategy("action", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);
          result = results[actionMatch.route.id];
          if (request.signal.aborted) {
            throwStaticHandlerAbortedError(request, isRouteRequest, future);
          }
        }
        if (isRedirectResult(result)) {
          throw new Response(null, {
            status: result.response.status,
            headers: {
              Location: result.response.headers.get("Location")
            }
          });
        }
        if (isDeferredResult(result)) {
          let error = getInternalRouterError(400, {
            type: "defer-action"
          });
          if (isRouteRequest) {
            throw error;
          }
          result = {
            type: ResultType.error,
            error
          };
        }
        if (isRouteRequest) {
          if (isErrorResult(result)) {
            throw result.error;
          }
          return {
            matches: [actionMatch],
            loaderData: {},
            actionData: {
              [actionMatch.route.id]: result.data
            },
            errors: null,
            // Note: statusCode + headers are unused here since queryRoute will
            // return the raw Response or value
            statusCode: 200,
            loaderHeaders: {},
            actionHeaders: {},
            activeDeferreds: null
          };
        }
        let loaderRequest = new Request(request.url, {
          headers: request.headers,
          redirect: request.redirect,
          signal: request.signal
        });
        if (isErrorResult(result)) {
          let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);
          let context2 = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);
          return _extends({}, context2, {
            statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,
            actionData: null,
            actionHeaders: _extends({}, result.headers ? {
              [actionMatch.route.id]: result.headers
            } : {})
          });
        }
        let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);
        return _extends({}, context, {
          actionData: {
            [actionMatch.route.id]: result.data
          }
        }, result.statusCode ? {
          statusCode: result.statusCode
        } : {}, {
          actionHeaders: result.headers ? {
            [actionMatch.route.id]: result.headers
          } : {}
        });
      }
      async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {
        let isRouteRequest = routeMatch != null;
        if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {
          throw getInternalRouterError(400, {
            method: request.method,
            pathname: new URL(request.url).pathname,
            routeId: routeMatch == null ? void 0 : routeMatch.route.id
          });
        }
        let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;
        let matchesToLoad = requestMatches.filter((m) => m.route.loader || m.route.lazy);
        if (matchesToLoad.length === 0) {
          return {
            matches,
            // Add a null for all matched routes for proper revalidation on the client
            loaderData: matches.reduce((acc, m) => Object.assign(acc, {
              [m.route.id]: null
            }), {}),
            errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {
              [pendingActionResult[0]]: pendingActionResult[1].error
            } : null,
            statusCode: 200,
            loaderHeaders: {},
            activeDeferreds: null
          };
        }
        let results = await callDataStrategy("loader", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);
        if (request.signal.aborted) {
          throwStaticHandlerAbortedError(request, isRouteRequest, future);
        }
        let activeDeferreds = /* @__PURE__ */ new Map();
        let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);
        let executedLoaders = new Set(matchesToLoad.map((match) => match.route.id));
        matches.forEach((match) => {
          if (!executedLoaders.has(match.route.id)) {
            context.loaderData[match.route.id] = null;
          }
        });
        return _extends({}, context, {
          matches,
          activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null
        });
      }
      async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {
        let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);
        let dataResults = {};
        await Promise.all(matches.map(async (match) => {
          if (!(match.route.id in results)) {
            return;
          }
          let result = results[match.route.id];
          if (isRedirectDataStrategyResultResult(result)) {
            let response = result.result;
            throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);
          }
          if (isResponse(result.result) && isRouteRequest) {
            throw result;
          }
          dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);
        }));
        return dataResults;
      }
      return {
        dataRoutes,
        query,
        queryRoute
      };
    }
    function getStaticContextFromError(routes, context, error) {
      let newContext = _extends({}, context, {
        statusCode: isRouteErrorResponse(error) ? error.status : 500,
        errors: {
          [context._deepestRenderedBoundaryId || routes[0].id]: error
        }
      });
      return newContext;
    }
    function throwStaticHandlerAbortedError(request, isRouteRequest, future) {
      if (future.v7_throwAbortReason && request.signal.reason !== void 0) {
        throw request.signal.reason;
      }
      let method = isRouteRequest ? "queryRoute" : "query";
      throw new Error(method + "() call aborted: " + request.method + " " + request.url);
    }
    function isSubmissionNavigation(opts) {
      return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
    }
    function normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
      let contextualMatches;
      let activeRouteMatch;
      if (fromRouteId) {
        contextualMatches = [];
        for (let match of matches) {
          contextualMatches.push(match);
          if (match.route.id === fromRouteId) {
            activeRouteMatch = match;
            break;
          }
        }
      } else {
        contextualMatches = matches;
        activeRouteMatch = matches[matches.length - 1];
      }
      let path = resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
      if (to == null) {
        path.search = location.search;
        path.hash = location.hash;
      }
      if ((to == null || to === "" || to === ".") && activeRouteMatch) {
        let nakedIndex = hasNakedIndexQuery(path.search);
        if (activeRouteMatch.route.index && !nakedIndex) {
          path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
        } else if (!activeRouteMatch.route.index && nakedIndex) {
          let params = new URLSearchParams(path.search);
          let indexValues = params.getAll("index");
          params.delete("index");
          indexValues.filter((v) => v).forEach((v) => params.append("index", v));
          let qs = params.toString();
          path.search = qs ? "?" + qs : "";
        }
      }
      if (prependBasename && basename !== "/") {
        path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
      }
      return createPath(path);
    }
    function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
      if (!opts || !isSubmissionNavigation(opts)) {
        return {
          path
        };
      }
      if (opts.formMethod && !isValidMethod(opts.formMethod)) {
        return {
          path,
          error: getInternalRouterError(405, {
            method: opts.formMethod
          })
        };
      }
      let getInvalidBodyError = () => ({
        path,
        error: getInternalRouterError(400, {
          type: "invalid-body"
        })
      });
      let rawFormMethod = opts.formMethod || "get";
      let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
      let formAction = stripHashFromPath(path);
      if (opts.body !== void 0) {
        if (opts.formEncType === "text/plain") {
          if (!isMutationMethod(formMethod)) {
            return getInvalidBodyError();
          }
          let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
            // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
            Array.from(opts.body.entries()).reduce((acc, _ref3) => {
              let [name, value] = _ref3;
              return "" + acc + name + "=" + value + "\n";
            }, "")
          ) : String(opts.body);
          return {
            path,
            submission: {
              formMethod,
              formAction,
              formEncType: opts.formEncType,
              formData: void 0,
              json: void 0,
              text
            }
          };
        } else if (opts.formEncType === "application/json") {
          if (!isMutationMethod(formMethod)) {
            return getInvalidBodyError();
          }
          try {
            let json2 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
            return {
              path,
              submission: {
                formMethod,
                formAction,
                formEncType: opts.formEncType,
                formData: void 0,
                json: json2,
                text: void 0
              }
            };
          } catch (e) {
            return getInvalidBodyError();
          }
        }
      }
      invariant(typeof FormData === "function", "FormData is not available in this environment");
      let searchParams;
      let formData;
      if (opts.formData) {
        searchParams = convertFormDataToSearchParams(opts.formData);
        formData = opts.formData;
      } else if (opts.body instanceof FormData) {
        searchParams = convertFormDataToSearchParams(opts.body);
        formData = opts.body;
      } else if (opts.body instanceof URLSearchParams) {
        searchParams = opts.body;
        formData = convertSearchParamsToFormData(searchParams);
      } else if (opts.body == null) {
        searchParams = new URLSearchParams();
        formData = new FormData();
      } else {
        try {
          searchParams = new URLSearchParams(opts.body);
          formData = convertSearchParamsToFormData(searchParams);
        } catch (e) {
          return getInvalidBodyError();
        }
      }
      let submission = {
        formMethod,
        formAction,
        formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
        formData,
        json: void 0,
        text: void 0
      };
      if (isMutationMethod(submission.formMethod)) {
        return {
          path,
          submission
        };
      }
      let parsedPath = parsePath(path);
      if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
        searchParams.append("index", "");
      }
      parsedPath.search = "?" + searchParams;
      return {
        path: createPath(parsedPath),
        submission
      };
    }
    function getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {
      if (includeBoundary === void 0) {
        includeBoundary = false;
      }
      let index = matches.findIndex((m) => m.route.id === boundaryId);
      if (index >= 0) {
        return matches.slice(0, includeBoundary ? index + 1 : index);
      }
      return matches;
    }
    function getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {
      let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;
      let currentUrl = history.createURL(state.location);
      let nextUrl = history.createURL(location);
      let boundaryMatches = matches;
      if (initialHydration && state.errors) {
        boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);
      } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {
        boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);
      }
      let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;
      let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
      let navigationMatches = boundaryMatches.filter((match, index) => {
        let {
          route
        } = match;
        if (route.lazy) {
          return true;
        }
        if (route.loader == null) {
          return false;
        }
        if (initialHydration) {
          return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);
        }
        if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some((id) => id === match.route.id)) {
          return true;
        }
        let currentRouteMatch = state.matches[index];
        let nextRouteMatch = match;
        return shouldRevalidateLoader(match, _extends({
          currentUrl,
          currentParams: currentRouteMatch.params,
          nextUrl,
          nextParams: nextRouteMatch.params
        }, submission, {
          actionResult,
          actionStatus,
          defaultShouldRevalidate: shouldSkipRevalidation ? false : (
            // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
            isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
            currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
          )
        }));
      });
      let revalidatingFetchers = [];
      fetchLoadMatches.forEach((f, key) => {
        if (initialHydration || !matches.some((m) => m.route.id === f.routeId) || deletedFetchers.has(key)) {
          return;
        }
        let fetcherMatches = matchRoutes(routesToUse, f.path, basename);
        if (!fetcherMatches) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: null,
            match: null,
            controller: null
          });
          return;
        }
        let fetcher = state.fetchers.get(key);
        let fetcherMatch = getTargetMatch(fetcherMatches, f.path);
        let shouldRevalidate = false;
        if (fetchRedirectIds.has(key)) {
          shouldRevalidate = false;
        } else if (cancelledFetcherLoads.has(key)) {
          cancelledFetcherLoads.delete(key);
          shouldRevalidate = true;
        } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
          shouldRevalidate = isRevalidationRequired;
        } else {
          shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({
            currentUrl,
            currentParams: state.matches[state.matches.length - 1].params,
            nextUrl,
            nextParams: matches[matches.length - 1].params
          }, submission, {
            actionResult,
            actionStatus,
            defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired
          }));
        }
        if (shouldRevalidate) {
          revalidatingFetchers.push({
            key,
            routeId: f.routeId,
            path: f.path,
            matches: fetcherMatches,
            match: fetcherMatch,
            controller: new AbortController()
          });
        }
      });
      return [navigationMatches, revalidatingFetchers];
    }
    function shouldLoadRouteOnHydration(route, loaderData, errors) {
      if (route.lazy) {
        return true;
      }
      if (!route.loader) {
        return false;
      }
      let hasData = loaderData != null && loaderData[route.id] !== void 0;
      let hasError = errors != null && errors[route.id] !== void 0;
      if (!hasData && hasError) {
        return false;
      }
      if (typeof route.loader === "function" && route.loader.hydrate === true) {
        return true;
      }
      return !hasData && !hasError;
    }
    function isNewLoader(currentLoaderData, currentMatch, match) {
      let isNew = (
        // [a] -> [a, b]
        !currentMatch || // [a, b] -> [a, c]
        match.route.id !== currentMatch.route.id
      );
      let isMissingData = currentLoaderData[match.route.id] === void 0;
      return isNew || isMissingData;
    }
    function isNewRouteInstance(currentMatch, match) {
      let currentPath = currentMatch.route.path;
      return (
        // param change for this match, /users/123 -> /users/456
        currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match.params["*"]
      );
    }
    function shouldRevalidateLoader(loaderMatch, arg) {
      if (loaderMatch.route.shouldRevalidate) {
        let routeChoice = loaderMatch.route.shouldRevalidate(arg);
        if (typeof routeChoice === "boolean") {
          return routeChoice;
        }
      }
      return arg.defaultShouldRevalidate;
    }
    function patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {
      var _childrenToPatch;
      let childrenToPatch;
      if (routeId) {
        let route = manifest[routeId];
        invariant(route, "No route found to patch children into: routeId = " + routeId);
        if (!route.children) {
          route.children = [];
        }
        childrenToPatch = route.children;
      } else {
        childrenToPatch = routesToUse;
      }
      let uniqueChildren = children.filter((newRoute) => !childrenToPatch.some((existingRoute) => isSameRoute(newRoute, existingRoute)));
      let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || "_", "patch", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || "0")], manifest);
      childrenToPatch.push(...newRoutes);
    }
    function isSameRoute(newRoute, existingRoute) {
      if ("id" in newRoute && "id" in existingRoute && newRoute.id === existingRoute.id) {
        return true;
      }
      if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {
        return false;
      }
      if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {
        return true;
      }
      return newRoute.children.every((aChild, i) => {
        var _existingRoute$childr;
        return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some((bChild) => isSameRoute(aChild, bChild));
      });
    }
    async function loadLazyRouteModule(route, mapRouteProperties, manifest) {
      if (!route.lazy) {
        return;
      }
      let lazyRoute = await route.lazy();
      if (!route.lazy) {
        return;
      }
      let routeToUpdate = manifest[route.id];
      invariant(routeToUpdate, "No route found in manifest");
      let routeUpdates = {};
      for (let lazyRouteProperty in lazyRoute) {
        let staticRouteValue = routeToUpdate[lazyRouteProperty];
        let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
        // on the route updates
        lazyRouteProperty !== "hasErrorBoundary";
        warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
        if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
          routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
        }
      }
      Object.assign(routeToUpdate, routeUpdates);
      Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {
        lazy: void 0
      }));
    }
    async function defaultDataStrategy(_ref4) {
      let {
        matches
      } = _ref4;
      let matchesToLoad = matches.filter((m) => m.shouldLoad);
      let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));
      return results.reduce((acc, result, i) => Object.assign(acc, {
        [matchesToLoad[i].route.id]: result
      }), {});
    }
    async function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {
      let loadRouteDefinitionsPromises = matches.map((m) => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : void 0);
      let dsMatches = matches.map((match, i) => {
        let loadRoutePromise = loadRouteDefinitionsPromises[i];
        let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);
        let resolve = async (handlerOverride) => {
          if (handlerOverride && request.method === "GET" && (match.route.lazy || match.route.loader)) {
            shouldLoad = true;
          }
          return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({
            type: ResultType.data,
            result: void 0
          });
        };
        return _extends({}, match, {
          shouldLoad,
          resolve
        });
      });
      let results = await dataStrategyImpl({
        matches: dsMatches,
        request,
        params: matches[0].params,
        fetcherKey,
        context: requestContext
      });
      try {
        await Promise.all(loadRouteDefinitionsPromises);
      } catch (e) {
      }
      return results;
    }
    async function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {
      let result;
      let onReject;
      let runHandler = (handler) => {
        let reject;
        let abortPromise = new Promise((_, r) => reject = r);
        onReject = () => reject();
        request.signal.addEventListener("abort", onReject);
        let actualHandler = (ctx) => {
          if (typeof handler !== "function") {
            return Promise.reject(new Error("You cannot call the handler for a route which defines a boolean " + ('"' + type + '" [routeId: ' + match.route.id + "]")));
          }
          return handler({
            request,
            params: match.params,
            context: staticContext
          }, ...ctx !== void 0 ? [ctx] : []);
        };
        let handlerPromise = (async () => {
          try {
            let val = await (handlerOverride ? handlerOverride((ctx) => actualHandler(ctx)) : actualHandler());
            return {
              type: "data",
              result: val
            };
          } catch (e) {
            return {
              type: "error",
              result: e
            };
          }
        })();
        return Promise.race([handlerPromise, abortPromise]);
      };
      try {
        let handler = match.route[type];
        if (loadRoutePromise) {
          if (handler) {
            let handlerError;
            let [value] = await Promise.all([
              // If the handler throws, don't let it immediately bubble out,
              // since we need to let the lazy() execution finish so we know if this
              // route has a boundary that can handle the error
              runHandler(handler).catch((e) => {
                handlerError = e;
              }),
              loadRoutePromise
            ]);
            if (handlerError !== void 0) {
              throw handlerError;
            }
            result = value;
          } else {
            await loadRoutePromise;
            handler = match.route[type];
            if (handler) {
              result = await runHandler(handler);
            } else if (type === "action") {
              let url = new URL(request.url);
              let pathname = url.pathname + url.search;
              throw getInternalRouterError(405, {
                method: request.method,
                pathname,
                routeId: match.route.id
              });
            } else {
              return {
                type: ResultType.data,
                result: void 0
              };
            }
          }
        } else if (!handler) {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(404, {
            pathname
          });
        } else {
          result = await runHandler(handler);
        }
        invariant(result.result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
      } catch (e) {
        return {
          type: ResultType.error,
          result: e
        };
      } finally {
        if (onReject) {
          request.signal.removeEventListener("abort", onReject);
        }
      }
      return result;
    }
    async function convertDataStrategyResultToDataResult(dataStrategyResult) {
      let {
        result,
        type
      } = dataStrategyResult;
      if (isResponse(result)) {
        let data2;
        try {
          let contentType = result.headers.get("Content-Type");
          if (contentType && /\bapplication\/json\b/.test(contentType)) {
            if (result.body == null) {
              data2 = null;
            } else {
              data2 = await result.json();
            }
          } else {
            data2 = await result.text();
          }
        } catch (e) {
          return {
            type: ResultType.error,
            error: e
          };
        }
        if (type === ResultType.error) {
          return {
            type: ResultType.error,
            error: new ErrorResponseImpl(result.status, result.statusText, data2),
            statusCode: result.status,
            headers: result.headers
          };
        }
        return {
          type: ResultType.data,
          data: data2,
          statusCode: result.status,
          headers: result.headers
        };
      }
      if (type === ResultType.error) {
        if (isDataWithResponseInit(result)) {
          var _result$init2;
          if (result.data instanceof Error) {
            var _result$init;
            return {
              type: ResultType.error,
              error: result.data,
              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status
            };
          }
          result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, void 0, result.data);
        }
        return {
          type: ResultType.error,
          error: result,
          statusCode: isRouteErrorResponse(result) ? result.status : void 0
        };
      }
      if (isDeferredData(result)) {
        var _result$init3, _result$init4;
        return {
          type: ResultType.deferred,
          deferredData: result,
          statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,
          headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)
        };
      }
      if (isDataWithResponseInit(result)) {
        var _result$init5, _result$init6;
        return {
          type: ResultType.data,
          data: result.data,
          statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,
          headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : void 0
        };
      }
      return {
        type: ResultType.data,
        data: result
      };
    }
    function normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {
      let location = response.headers.get("Location");
      invariant(location, "Redirects returned/thrown from loaders/actions must have a Location header");
      if (!ABSOLUTE_URL_REGEX.test(location)) {
        let trimmedMatches = matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1);
        location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);
        response.headers.set("Location", location);
      }
      return response;
    }
    function normalizeRedirectLocation(location, currentUrl, basename) {
      if (ABSOLUTE_URL_REGEX.test(location)) {
        let normalizedLocation = location;
        let url = normalizedLocation.startsWith("//") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);
        let isSameBasename = stripBasename(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) {
          return url.pathname + url.search + url.hash;
        }
      }
      return location;
    }
    function createClientSideRequest(history, location, signal, submission) {
      let url = history.createURL(stripHashFromPath(location)).toString();
      let init = {
        signal
      };
      if (submission && isMutationMethod(submission.formMethod)) {
        let {
          formMethod,
          formEncType
        } = submission;
        init.method = formMethod.toUpperCase();
        if (formEncType === "application/json") {
          init.headers = new Headers({
            "Content-Type": formEncType
          });
          init.body = JSON.stringify(submission.json);
        } else if (formEncType === "text/plain") {
          init.body = submission.text;
        } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
          init.body = convertFormDataToSearchParams(submission.formData);
        } else {
          init.body = submission.formData;
        }
      }
      return new Request(url, init);
    }
    function convertFormDataToSearchParams(formData) {
      let searchParams = new URLSearchParams();
      for (let [key, value] of formData.entries()) {
        searchParams.append(key, typeof value === "string" ? value : value.name);
      }
      return searchParams;
    }
    function convertSearchParamsToFormData(searchParams) {
      let formData = new FormData();
      for (let [key, value] of searchParams.entries()) {
        formData.append(key, value);
      }
      return formData;
    }
    function processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {
      let loaderData = {};
      let errors = null;
      let statusCode;
      let foundError = false;
      let loaderHeaders = {};
      let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;
      matches.forEach((match) => {
        if (!(match.route.id in results)) {
          return;
        }
        let id = match.route.id;
        let result = results[id];
        invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
        if (isErrorResult(result)) {
          let error = result.error;
          if (pendingError !== void 0) {
            error = pendingError;
            pendingError = void 0;
          }
          errors = errors || {};
          if (skipLoaderErrorBubbling) {
            errors[id] = error;
          } else {
            let boundaryMatch = findNearestBoundary(matches, id);
            if (errors[boundaryMatch.route.id] == null) {
              errors[boundaryMatch.route.id] = error;
            }
          }
          loaderData[id] = void 0;
          if (!foundError) {
            foundError = true;
            statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
          }
          if (result.headers) {
            loaderHeaders[id] = result.headers;
          }
        } else {
          if (isDeferredResult(result)) {
            activeDeferreds.set(id, result.deferredData);
            loaderData[id] = result.deferredData.data;
            if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
              statusCode = result.statusCode;
            }
            if (result.headers) {
              loaderHeaders[id] = result.headers;
            }
          } else {
            loaderData[id] = result.data;
            if (result.statusCode && result.statusCode !== 200 && !foundError) {
              statusCode = result.statusCode;
            }
            if (result.headers) {
              loaderHeaders[id] = result.headers;
            }
          }
        }
      });
      if (pendingError !== void 0 && pendingActionResult) {
        errors = {
          [pendingActionResult[0]]: pendingError
        };
        loaderData[pendingActionResult[0]] = void 0;
      }
      return {
        loaderData,
        errors,
        statusCode: statusCode || 200,
        loaderHeaders
      };
    }
    function processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {
      let {
        loaderData,
        errors
      } = processRouteLoaderData(
        matches,
        results,
        pendingActionResult,
        activeDeferreds,
        false
        // This method is only called client side so we always want to bubble
      );
      revalidatingFetchers.forEach((rf) => {
        let {
          key,
          match,
          controller
        } = rf;
        let result = fetcherResults[key];
        invariant(result, "Did not find corresponding fetcher result");
        if (controller && controller.signal.aborted) {
          return;
        } else if (isErrorResult(result)) {
          let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);
          if (!(errors && errors[boundaryMatch.route.id])) {
            errors = _extends({}, errors, {
              [boundaryMatch.route.id]: result.error
            });
          }
          state.fetchers.delete(key);
        } else if (isRedirectResult(result)) {
          invariant(false, "Unhandled fetcher revalidation redirect");
        } else if (isDeferredResult(result)) {
          invariant(false, "Unhandled fetcher deferred data");
        } else {
          let doneFetcher = getDoneFetcher(result.data);
          state.fetchers.set(key, doneFetcher);
        }
      });
      return {
        loaderData,
        errors
      };
    }
    function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
      let mergedLoaderData = _extends({}, newLoaderData);
      for (let match of matches) {
        let id = match.route.id;
        if (newLoaderData.hasOwnProperty(id)) {
          if (newLoaderData[id] !== void 0) {
            mergedLoaderData[id] = newLoaderData[id];
          }
        } else if (loaderData[id] !== void 0 && match.route.loader) {
          mergedLoaderData[id] = loaderData[id];
        }
        if (errors && errors.hasOwnProperty(id)) {
          break;
        }
      }
      return mergedLoaderData;
    }
    function getActionDataForCommit(pendingActionResult) {
      if (!pendingActionResult) {
        return {};
      }
      return isErrorResult(pendingActionResult[1]) ? {
        // Clear out prior actionData on errors
        actionData: {}
      } : {
        actionData: {
          [pendingActionResult[0]]: pendingActionResult[1].data
        }
      };
    }
    function findNearestBoundary(matches, routeId) {
      let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1) : [...matches];
      return eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) || matches[0];
    }
    function getShortCircuitMatches(routes) {
      let route = routes.length === 1 ? routes[0] : routes.find((r) => r.index || !r.path || r.path === "/") || {
        id: "__shim-error-route__"
      };
      return {
        matches: [{
          params: {},
          pathname: "",
          pathnameBase: "",
          route
        }],
        route
      };
    }
    function getInternalRouterError(status, _temp5) {
      let {
        pathname,
        routeId,
        method,
        type,
        message
      } = _temp5 === void 0 ? {} : _temp5;
      let statusText = "Unknown Server Error";
      let errorMessage = "Unknown @remix-run/router error";
      if (status === 400) {
        statusText = "Bad Request";
        if (method && pathname && routeId) {
          errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        } else if (type === "defer-action") {
          errorMessage = "defer() is not supported in actions";
        } else if (type === "invalid-body") {
          errorMessage = "Unable to encode submission body";
        }
      } else if (status === 403) {
        statusText = "Forbidden";
        errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
      } else if (status === 404) {
        statusText = "Not Found";
        errorMessage = 'No route matches URL "' + pathname + '"';
      } else if (status === 405) {
        statusText = "Method Not Allowed";
        if (method && pathname && routeId) {
          errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
        } else if (method) {
          errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
        }
      }
      return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
    }
    function findRedirect(results) {
      let entries = Object.entries(results);
      for (let i = entries.length - 1; i >= 0; i--) {
        let [key, result] = entries[i];
        if (isRedirectResult(result)) {
          return {
            key,
            result
          };
        }
      }
    }
    function stripHashFromPath(path) {
      let parsedPath = typeof path === "string" ? parsePath(path) : path;
      return createPath(_extends({}, parsedPath, {
        hash: ""
      }));
    }
    function isHashChangeOnly(a, b) {
      if (a.pathname !== b.pathname || a.search !== b.search) {
        return false;
      }
      if (a.hash === "") {
        return b.hash !== "";
      } else if (a.hash === b.hash) {
        return true;
      } else if (b.hash !== "") {
        return true;
      }
      return false;
    }
    function isDataStrategyResult(result) {
      return result != null && typeof result === "object" && "type" in result && "result" in result && (result.type === ResultType.data || result.type === ResultType.error);
    }
    function isRedirectDataStrategyResultResult(result) {
      return isResponse(result.result) && redirectStatusCodes.has(result.result.status);
    }
    function isDeferredResult(result) {
      return result.type === ResultType.deferred;
    }
    function isErrorResult(result) {
      return result.type === ResultType.error;
    }
    function isRedirectResult(result) {
      return (result && result.type) === ResultType.redirect;
    }
    function isDataWithResponseInit(value) {
      return typeof value === "object" && value != null && "type" in value && "data" in value && "init" in value && value.type === "DataWithResponseInit";
    }
    function isDeferredData(value) {
      let deferred = value;
      return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
    }
    function isResponse(value) {
      return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
    }
    function isRedirectResponse(result) {
      if (!isResponse(result)) {
        return false;
      }
      let status = result.status;
      let location = result.headers.get("Location");
      return status >= 300 && status <= 399 && location != null;
    }
    function isValidMethod(method) {
      return validRequestMethods.has(method.toLowerCase());
    }
    function isMutationMethod(method) {
      return validMutationMethods.has(method.toLowerCase());
    }
    async function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {
      let entries = Object.entries(results);
      for (let index = 0; index < entries.length; index++) {
        let [routeId, result] = entries[index];
        let match = matches.find((m) => (m == null ? void 0 : m.route.id) === routeId);
        if (!match) {
          continue;
        }
        let currentMatch = currentMatches.find((m) => m.route.id === match.route.id);
        let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== void 0;
        if (isDeferredResult(result) && isRevalidatingLoader) {
          await resolveDeferredData(result, signal, false).then((result2) => {
            if (result2) {
              results[routeId] = result2;
            }
          });
        }
      }
    }
    async function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {
      for (let index = 0; index < revalidatingFetchers.length; index++) {
        let {
          key,
          routeId,
          controller
        } = revalidatingFetchers[index];
        let result = results[key];
        let match = matches.find((m) => (m == null ? void 0 : m.route.id) === routeId);
        if (!match) {
          continue;
        }
        if (isDeferredResult(result)) {
          invariant(controller, "Expected an AbortController for revalidating fetcher deferred result");
          await resolveDeferredData(result, controller.signal, true).then((result2) => {
            if (result2) {
              results[key] = result2;
            }
          });
        }
      }
    }
    async function resolveDeferredData(result, signal, unwrap) {
      if (unwrap === void 0) {
        unwrap = false;
      }
      let aborted = await result.deferredData.resolveData(signal);
      if (aborted) {
        return;
      }
      if (unwrap) {
        try {
          return {
            type: ResultType.data,
            data: result.deferredData.unwrappedData
          };
        } catch (e) {
          return {
            type: ResultType.error,
            error: e
          };
        }
      }
      return {
        type: ResultType.data,
        data: result.deferredData.data
      };
    }
    function hasNakedIndexQuery(search) {
      return new URLSearchParams(search).getAll("index").some((v) => v === "");
    }
    function getTargetMatch(matches, location) {
      let search = typeof location === "string" ? parsePath(location).search : location.search;
      if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
        return matches[matches.length - 1];
      }
      let pathMatches = getPathContributingMatches(matches);
      return pathMatches[pathMatches.length - 1];
    }
    function getSubmissionFromNavigation(navigation) {
      let {
        formMethod,
        formAction,
        formEncType,
        text,
        formData,
        json: json2
      } = navigation;
      if (!formMethod || !formAction || !formEncType) {
        return;
      }
      if (text != null) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData: void 0,
          json: void 0,
          text
        };
      } else if (formData != null) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData,
          json: void 0,
          text: void 0
        };
      } else if (json2 !== void 0) {
        return {
          formMethod,
          formAction,
          formEncType,
          formData: void 0,
          json: json2,
          text: void 0
        };
      }
    }
    function getLoadingNavigation(location, submission) {
      if (submission) {
        let navigation = {
          state: "loading",
          location,
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text
        };
        return navigation;
      } else {
        let navigation = {
          state: "loading",
          location,
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0
        };
        return navigation;
      }
    }
    function getSubmittingNavigation(location, submission) {
      let navigation = {
        state: "submitting",
        location,
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text
      };
      return navigation;
    }
    function getLoadingFetcher(submission, data2) {
      if (submission) {
        let fetcher = {
          state: "loading",
          formMethod: submission.formMethod,
          formAction: submission.formAction,
          formEncType: submission.formEncType,
          formData: submission.formData,
          json: submission.json,
          text: submission.text,
          data: data2
        };
        return fetcher;
      } else {
        let fetcher = {
          state: "loading",
          formMethod: void 0,
          formAction: void 0,
          formEncType: void 0,
          formData: void 0,
          json: void 0,
          text: void 0,
          data: data2
        };
        return fetcher;
      }
    }
    function getSubmittingFetcher(submission, existingFetcher) {
      let fetcher = {
        state: "submitting",
        formMethod: submission.formMethod,
        formAction: submission.formAction,
        formEncType: submission.formEncType,
        formData: submission.formData,
        json: submission.json,
        text: submission.text,
        data: existingFetcher ? existingFetcher.data : void 0
      };
      return fetcher;
    }
    function getDoneFetcher(data2) {
      let fetcher = {
        state: "idle",
        formMethod: void 0,
        formAction: void 0,
        formEncType: void 0,
        formData: void 0,
        json: void 0,
        text: void 0,
        data: data2
      };
      return fetcher;
    }
    function restoreAppliedTransitions(_window, transitions) {
      try {
        let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
        if (sessionPositions) {
          let json2 = JSON.parse(sessionPositions);
          for (let [k, v] of Object.entries(json2 || {})) {
            if (v && Array.isArray(v)) {
              transitions.set(k, new Set(v || []));
            }
          }
        }
      } catch (e) {
      }
    }
    function persistAppliedTransitions(_window, transitions) {
      if (transitions.size > 0) {
        let json2 = {};
        for (let [k, v] of transitions) {
          json2[k] = [...v];
        }
        try {
          _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json2));
        } catch (error) {
          warning(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
        }
      }
    }
    exports.AbortedDeferredError = AbortedDeferredError;
    exports.Action = Action;
    exports.IDLE_BLOCKER = IDLE_BLOCKER;
    exports.IDLE_FETCHER = IDLE_FETCHER;
    exports.IDLE_NAVIGATION = IDLE_NAVIGATION;
    exports.UNSAFE_DEFERRED_SYMBOL = UNSAFE_DEFERRED_SYMBOL;
    exports.UNSAFE_DeferredData = DeferredData;
    exports.UNSAFE_ErrorResponseImpl = ErrorResponseImpl;
    exports.UNSAFE_convertRouteMatchToUiMatch = convertRouteMatchToUiMatch;
    exports.UNSAFE_convertRoutesToDataRoutes = convertRoutesToDataRoutes;
    exports.UNSAFE_decodePath = decodePath;
    exports.UNSAFE_getResolveToMatches = getResolveToMatches;
    exports.UNSAFE_invariant = invariant;
    exports.UNSAFE_warning = warning;
    exports.createBrowserHistory = createBrowserHistory;
    exports.createHashHistory = createHashHistory;
    exports.createMemoryHistory = createMemoryHistory;
    exports.createPath = createPath;
    exports.createRouter = createRouter;
    exports.createStaticHandler = createStaticHandler;
    exports.data = data;
    exports.defer = defer;
    exports.generatePath = generatePath;
    exports.getStaticContextFromError = getStaticContextFromError;
    exports.getToPathname = getToPathname;
    exports.isDataWithResponseInit = isDataWithResponseInit;
    exports.isDeferredData = isDeferredData;
    exports.isRouteErrorResponse = isRouteErrorResponse;
    exports.joinPaths = joinPaths;
    exports.json = json;
    exports.matchPath = matchPath;
    exports.matchRoutes = matchRoutes;
    exports.normalizePathname = normalizePathname;
    exports.parsePath = parsePath;
    exports.redirect = redirect;
    exports.redirectDocument = redirectDocument;
    exports.replace = replace;
    exports.resolvePath = resolvePath;
    exports.resolveTo = resolveTo;
    exports.stripBasename = stripBasename;
  }
});

// node_modules/react-router/dist/umd/react-router.production.min.js
var require_react_router_production_min = __commonJS({
  "node_modules/react-router/dist/umd/react-router.production.min.js"(exports, module) {
    init_react_inject();
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? t(exports, require_react(), require_router_cjs()) : "function" == typeof define && define.amd ? define(["exports", "react", "@remix-run/router"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).ReactRouter = {}, e.React, e.RemixRouter);
    }(exports, function(e, t, r) {
      "use strict";
      function n(e2) {
        if (e2 && e2.__esModule) return e2;
        var t2 = /* @__PURE__ */ Object.create(null);
        return e2 && Object.keys(e2).forEach(function(r2) {
          if ("default" !== r2) {
            var n2 = Object.getOwnPropertyDescriptor(e2, r2);
            Object.defineProperty(t2, r2, n2.get ? n2 : { enumerable: true, get: function() {
              return e2[r2];
            } });
          }
        }), t2.default = e2, Object.freeze(t2);
      }
      var a = n(t);
      function o() {
        return o = Object.assign ? Object.assign.bind() : function(e2) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var r2 = arguments[t2];
            for (var n2 in r2) Object.prototype.hasOwnProperty.call(r2, n2) && (e2[n2] = r2[n2]);
          }
          return e2;
        }, o.apply(this, arguments);
      }
      const i = a.createContext(null), u = a.createContext(null), l = a.createContext(null), s = a.createContext(null), c = a.createContext(null), d = a.createContext({ outlet: null, matches: [], isDataRoute: false }), p = a.createContext(null);
      function f() {
        return null != a.useContext(c);
      }
      function v() {
        return f() || r.UNSAFE_invariant(false), a.useContext(c).location;
      }
      function m(e2) {
        a.useContext(s).static || a.useLayoutEffect(e2);
      }
      function h() {
        let { isDataRoute: e2 } = a.useContext(d);
        return e2 ? function() {
          let { router: e3 } = O(U.UseNavigateStable), t2 = j(N.UseNavigateStable), r2 = a.useRef(false);
          return m(() => {
            r2.current = true;
          }), a.useCallback(function(n2, a2) {
            void 0 === a2 && (a2 = {}), r2.current && ("number" == typeof n2 ? e3.navigate(n2) : e3.navigate(n2, o({ fromRouteId: t2 }, a2)));
          }, [e3, t2]);
        }() : function() {
          f() || r.UNSAFE_invariant(false);
          let e3 = a.useContext(i), { basename: t2, future: n2, navigator: o2 } = a.useContext(s), { matches: u2 } = a.useContext(d), { pathname: l2 } = v(), c2 = JSON.stringify(r.UNSAFE_getResolveToMatches(u2, n2.v7_relativeSplatPath)), p2 = a.useRef(false);
          return m(() => {
            p2.current = true;
          }), a.useCallback(function(n3, a2) {
            if (void 0 === a2 && (a2 = {}), !p2.current) return;
            if ("number" == typeof n3) return void o2.go(n3);
            let i2 = r.resolveTo(n3, JSON.parse(c2), l2, "path" === a2.relative);
            null == e3 && "/" !== t2 && (i2.pathname = "/" === i2.pathname ? t2 : r.joinPaths([t2, i2.pathname])), (a2.replace ? o2.replace : o2.push)(i2, a2.state, a2);
          }, [t2, o2, c2, l2, e3]);
        }();
      }
      const g = a.createContext(null);
      function E(e2) {
        let t2 = a.useContext(d).outlet;
        return t2 ? a.createElement(g.Provider, { value: e2 }, t2) : t2;
      }
      function y(e2, t2) {
        let { relative: n2 } = void 0 === t2 ? {} : t2, { future: o2 } = a.useContext(s), { matches: i2 } = a.useContext(d), { pathname: u2 } = v(), l2 = JSON.stringify(r.UNSAFE_getResolveToMatches(i2, o2.v7_relativeSplatPath));
        return a.useMemo(() => r.resolveTo(e2, JSON.parse(l2), u2, "path" === n2), [e2, l2, u2, n2]);
      }
      function b(e2, t2) {
        return R(e2, t2);
      }
      function R(e2, t2, n2, i2) {
        f() || r.UNSAFE_invariant(false);
        let { navigator: u2 } = a.useContext(s), { matches: l2 } = a.useContext(d), p2 = l2[l2.length - 1], m2 = p2 ? p2.params : {};
        !p2 || p2.pathname;
        let h2 = p2 ? p2.pathnameBase : "/";
        p2 && p2.route;
        let g2, E2 = v();
        if (t2) {
          var y2;
          let e3 = "string" == typeof t2 ? r.parsePath(t2) : t2;
          "/" === h2 || (null == (y2 = e3.pathname) ? void 0 : y2.startsWith(h2)) || r.UNSAFE_invariant(false), g2 = e3;
        } else g2 = E2;
        let b2 = g2.pathname || "/", R2 = b2;
        if ("/" !== h2) {
          let e3 = h2.replace(/^\//, "").split("/");
          R2 = "/" + b2.replace(/^\//, "").split("/").slice(e3.length).join("/");
        }
        let P2 = r.matchRoutes(e2, { pathname: R2 }), x2 = _(P2 && P2.map((e3) => Object.assign({}, e3, { params: Object.assign({}, m2, e3.params), pathname: r.joinPaths([h2, u2.encodeLocation ? u2.encodeLocation(e3.pathname).pathname : e3.pathname]), pathnameBase: "/" === e3.pathnameBase ? h2 : r.joinPaths([h2, u2.encodeLocation ? u2.encodeLocation(e3.pathnameBase).pathname : e3.pathnameBase]) })), l2, n2, i2);
        return t2 && x2 ? a.createElement(c.Provider, { value: { location: o({ pathname: "/", search: "", hash: "", state: null, key: "default" }, g2), navigationType: r.Action.Pop } }, x2) : x2;
      }
      function P() {
        let e2 = F(), t2 = r.isRouteErrorResponse(e2) ? e2.status + " " + e2.statusText : e2 instanceof Error ? e2.message : JSON.stringify(e2), n2 = e2 instanceof Error ? e2.stack : null, o2 = { padding: "0.5rem", backgroundColor: "rgba(200,200,200, 0.5)" };
        return a.createElement(a.Fragment, null, a.createElement("h2", null, "Unexpected Application Error!"), a.createElement("h3", { style: { fontStyle: "italic" } }, t2), n2 ? a.createElement("pre", { style: o2 }, n2) : null, null);
      }
      const x = a.createElement(P, null);
      class C extends a.Component {
        constructor(e2) {
          super(e2), this.state = { location: e2.location, revalidation: e2.revalidation, error: e2.error };
        }
        static getDerivedStateFromError(e2) {
          return { error: e2 };
        }
        static getDerivedStateFromProps(e2, t2) {
          return t2.location !== e2.location || "idle" !== t2.revalidation && "idle" === e2.revalidation ? { error: e2.error, location: e2.location, revalidation: e2.revalidation } : { error: void 0 !== e2.error ? e2.error : t2.error, location: t2.location, revalidation: e2.revalidation || t2.revalidation };
        }
        componentDidCatch(e2, t2) {
          console.error("React Router caught the following error during render", e2, t2);
        }
        render() {
          return void 0 !== this.state.error ? a.createElement(d.Provider, { value: this.props.routeContext }, a.createElement(p.Provider, { value: this.state.error, children: this.props.component })) : this.props.children;
        }
      }
      function S(e2) {
        let { routeContext: t2, match: r2, children: n2 } = e2, o2 = a.useContext(i);
        return o2 && o2.static && o2.staticContext && (r2.route.errorElement || r2.route.ErrorBoundary) && (o2.staticContext._deepestRenderedBoundaryId = r2.route.id), a.createElement(d.Provider, { value: t2 }, n2);
      }
      function _(e2, t2, n2, o2) {
        var i2;
        if (void 0 === t2 && (t2 = []), void 0 === n2 && (n2 = null), void 0 === o2 && (o2 = null), null == e2) {
          var u2;
          if (!n2) return null;
          if (n2.errors) e2 = n2.matches;
          else {
            if (!(null != (u2 = o2) && u2.v7_partialHydration && 0 === t2.length && !n2.initialized && n2.matches.length > 0)) return null;
            e2 = n2.matches;
          }
        }
        let l2 = e2, s2 = null == (i2 = n2) ? void 0 : i2.errors;
        if (null != s2) {
          let e3 = l2.findIndex((e4) => e4.route.id && void 0 !== (null == s2 ? void 0 : s2[e4.route.id]));
          e3 >= 0 || r.UNSAFE_invariant(false), l2 = l2.slice(0, Math.min(l2.length, e3 + 1));
        }
        let c2 = false, d2 = -1;
        if (n2 && o2 && o2.v7_partialHydration) for (let e3 = 0; e3 < l2.length; e3++) {
          let t3 = l2[e3];
          if ((t3.route.HydrateFallback || t3.route.hydrateFallbackElement) && (d2 = e3), t3.route.id) {
            let { loaderData: e4, errors: r2 } = n2, a2 = t3.route.loader && void 0 === e4[t3.route.id] && (!r2 || void 0 === r2[t3.route.id]);
            if (t3.route.lazy || a2) {
              c2 = true, l2 = d2 >= 0 ? l2.slice(0, d2 + 1) : [l2[0]];
              break;
            }
          }
        }
        return l2.reduceRight((e3, r2, o3) => {
          let i3, u3 = false, p2 = null, f2 = null;
          var v2;
          n2 && (i3 = s2 && r2.route.id ? s2[r2.route.id] : void 0, p2 = r2.route.errorElement || x, c2 && (d2 < 0 && 0 === o3 ? (v2 = "route-fallback", B[v2] || (B[v2] = true), u3 = true, f2 = null) : d2 === o3 && (u3 = true, f2 = r2.route.hydrateFallbackElement || null)));
          let m2 = t2.concat(l2.slice(0, o3 + 1)), h2 = () => {
            let t3;
            return t3 = i3 ? p2 : u3 ? f2 : r2.route.Component ? a.createElement(r2.route.Component, null) : r2.route.element ? r2.route.element : e3, a.createElement(S, { match: r2, routeContext: { outlet: e3, matches: m2, isDataRoute: null != n2 }, children: t3 });
          };
          return n2 && (r2.route.ErrorBoundary || r2.route.errorElement || 0 === o3) ? a.createElement(C, { location: n2.location, revalidation: n2.revalidation, component: p2, error: i3, children: h2(), routeContext: { outlet: null, matches: m2, isDataRoute: true } }) : h2();
        }, null);
      }
      var U = function(e2) {
        return e2.UseBlocker = "useBlocker", e2.UseRevalidator = "useRevalidator", e2.UseNavigateStable = "useNavigate", e2;
      }(U || {}), N = function(e2) {
        return e2.UseBlocker = "useBlocker", e2.UseLoaderData = "useLoaderData", e2.UseActionData = "useActionData", e2.UseRouteError = "useRouteError", e2.UseNavigation = "useNavigation", e2.UseRouteLoaderData = "useRouteLoaderData", e2.UseMatches = "useMatches", e2.UseRevalidator = "useRevalidator", e2.UseNavigateStable = "useNavigate", e2.UseRouteId = "useRouteId", e2;
      }(N || {});
      function O(e2) {
        let t2 = a.useContext(i);
        return t2 || r.UNSAFE_invariant(false), t2;
      }
      function A(e2) {
        let t2 = a.useContext(u);
        return t2 || r.UNSAFE_invariant(false), t2;
      }
      function j(e2) {
        let t2 = function(e3) {
          let t3 = a.useContext(d);
          return t3 || r.UNSAFE_invariant(false), t3;
        }(), n2 = t2.matches[t2.matches.length - 1];
        return n2.route.id || r.UNSAFE_invariant(false), n2.route.id;
      }
      function F() {
        var e2;
        let t2 = a.useContext(p), r2 = A(N.UseRouteError), n2 = j(N.UseRouteError);
        return void 0 !== t2 ? t2 : null == (e2 = r2.errors) ? void 0 : e2[n2];
      }
      function D() {
        let e2 = a.useContext(l);
        return null == e2 ? void 0 : e2._data;
      }
      let k = 0;
      const B = {};
      const L = a.startTransition;
      function M(e2) {
        let { routes: t2, future: r2, state: n2 } = e2;
        return R(t2, void 0, n2, r2);
      }
      function T(e2) {
        r.UNSAFE_invariant(false);
      }
      function I(e2) {
        let { basename: t2 = "/", children: n2 = null, location: i2, navigationType: u2 = r.Action.Pop, navigator: l2, static: d2 = false, future: p2 } = e2;
        f() && r.UNSAFE_invariant(false);
        let v2 = t2.replace(/^\/*/, "/"), m2 = a.useMemo(() => ({ basename: v2, navigator: l2, static: d2, future: o({ v7_relativeSplatPath: false }, p2) }), [v2, p2, l2, d2]);
        "string" == typeof i2 && (i2 = r.parsePath(i2));
        let { pathname: h2 = "/", search: g2 = "", hash: E2 = "", state: y2 = null, key: b2 = "default" } = i2, R2 = a.useMemo(() => {
          let e3 = r.stripBasename(h2, v2);
          return null == e3 ? null : { location: { pathname: e3, search: g2, hash: E2, state: y2, key: b2 }, navigationType: u2 };
        }, [v2, h2, g2, E2, y2, b2, u2]);
        return null == R2 ? null : a.createElement(s.Provider, { value: m2 }, a.createElement(c.Provider, { children: n2, value: R2 }));
      }
      var H = function(e2) {
        return e2[e2.pending = 0] = "pending", e2[e2.success = 1] = "success", e2[e2.error = 2] = "error", e2;
      }(H || {});
      const w = new Promise(() => {
      });
      class z extends a.Component {
        constructor(e2) {
          super(e2), this.state = { error: null };
        }
        static getDerivedStateFromError(e2) {
          return { error: e2 };
        }
        componentDidCatch(e2, t2) {
          console.error("<Await> caught the following error during render", e2, t2);
        }
        render() {
          let { children: e2, errorElement: t2, resolve: n2 } = this.props, o2 = null, i2 = H.pending;
          if (n2 instanceof Promise) if (this.state.error) {
            i2 = H.error;
            let e3 = this.state.error;
            o2 = Promise.reject().catch(() => {
            }), Object.defineProperty(o2, "_tracked", { get: () => true }), Object.defineProperty(o2, "_error", { get: () => e3 });
          } else n2._tracked ? (o2 = n2, i2 = "_error" in o2 ? H.error : "_data" in o2 ? H.success : H.pending) : (i2 = H.pending, Object.defineProperty(n2, "_tracked", { get: () => true }), o2 = n2.then((e3) => Object.defineProperty(n2, "_data", { get: () => e3 }), (e3) => Object.defineProperty(n2, "_error", { get: () => e3 })));
          else i2 = H.success, o2 = Promise.resolve(), Object.defineProperty(o2, "_tracked", { get: () => true }), Object.defineProperty(o2, "_data", { get: () => n2 });
          if (i2 === H.error && o2._error instanceof r.AbortedDeferredError) throw w;
          if (i2 === H.error && !t2) throw o2._error;
          if (i2 === H.error) return a.createElement(l.Provider, { value: o2, children: t2 });
          if (i2 === H.success) return a.createElement(l.Provider, { value: o2, children: e2 });
          throw o2;
        }
      }
      function J(e2) {
        let { children: t2 } = e2, r2 = D(), n2 = "function" == typeof t2 ? t2(r2) : t2;
        return a.createElement(a.Fragment, null, n2);
      }
      function q(e2, t2) {
        void 0 === t2 && (t2 = []);
        let n2 = [];
        return a.Children.forEach(e2, (e3, o2) => {
          if (!a.isValidElement(e3)) return;
          let i2 = [...t2, o2];
          if (e3.type === a.Fragment) return void n2.push.apply(n2, q(e3.props.children, i2));
          e3.type !== T && r.UNSAFE_invariant(false), e3.props.index && e3.props.children && r.UNSAFE_invariant(false);
          let u2 = { id: e3.props.id || i2.join("-"), caseSensitive: e3.props.caseSensitive, element: e3.props.element, Component: e3.props.Component, index: e3.props.index, path: e3.props.path, loader: e3.props.loader, action: e3.props.action, errorElement: e3.props.errorElement, ErrorBoundary: e3.props.ErrorBoundary, hasErrorBoundary: null != e3.props.ErrorBoundary || null != e3.props.errorElement, shouldRevalidate: e3.props.shouldRevalidate, handle: e3.props.handle, lazy: e3.props.lazy };
          e3.props.children && (u2.children = q(e3.props.children, i2)), n2.push(u2);
        }), n2;
      }
      function V(e2) {
        let t2 = { hasErrorBoundary: null != e2.ErrorBoundary || null != e2.errorElement };
        return e2.Component && Object.assign(t2, { element: a.createElement(e2.Component), Component: void 0 }), e2.HydrateFallback && Object.assign(t2, { hydrateFallbackElement: a.createElement(e2.HydrateFallback), HydrateFallback: void 0 }), e2.ErrorBoundary && Object.assign(t2, { errorElement: a.createElement(e2.ErrorBoundary), ErrorBoundary: void 0 }), t2;
      }
      Object.defineProperty(e, "AbortedDeferredError", { enumerable: true, get: function() {
        return r.AbortedDeferredError;
      } }), Object.defineProperty(e, "NavigationType", { enumerable: true, get: function() {
        return r.Action;
      } }), Object.defineProperty(e, "createPath", { enumerable: true, get: function() {
        return r.createPath;
      } }), Object.defineProperty(e, "defer", { enumerable: true, get: function() {
        return r.defer;
      } }), Object.defineProperty(e, "generatePath", { enumerable: true, get: function() {
        return r.generatePath;
      } }), Object.defineProperty(e, "isRouteErrorResponse", { enumerable: true, get: function() {
        return r.isRouteErrorResponse;
      } }), Object.defineProperty(e, "json", { enumerable: true, get: function() {
        return r.json;
      } }), Object.defineProperty(e, "matchPath", { enumerable: true, get: function() {
        return r.matchPath;
      } }), Object.defineProperty(e, "matchRoutes", { enumerable: true, get: function() {
        return r.matchRoutes;
      } }), Object.defineProperty(e, "parsePath", { enumerable: true, get: function() {
        return r.parsePath;
      } }), Object.defineProperty(e, "redirect", { enumerable: true, get: function() {
        return r.redirect;
      } }), Object.defineProperty(e, "redirectDocument", { enumerable: true, get: function() {
        return r.redirectDocument;
      } }), Object.defineProperty(e, "replace", { enumerable: true, get: function() {
        return r.replace;
      } }), Object.defineProperty(e, "resolvePath", { enumerable: true, get: function() {
        return r.resolvePath;
      } }), e.Await = function(e2) {
        let { children: t2, errorElement: r2, resolve: n2 } = e2;
        return a.createElement(z, { resolve: n2, errorElement: r2 }, a.createElement(J, null, t2));
      }, e.MemoryRouter = function(e2) {
        let { basename: t2, children: n2, initialEntries: o2, initialIndex: i2, future: u2 } = e2, l2 = a.useRef();
        null == l2.current && (l2.current = r.createMemoryHistory({ initialEntries: o2, initialIndex: i2, v5Compat: true }));
        let s2 = l2.current, [c2, d2] = a.useState({ action: s2.action, location: s2.location }), { v7_startTransition: p2 } = u2 || {}, f2 = a.useCallback((e3) => {
          p2 && L ? L(() => d2(e3)) : d2(e3);
        }, [d2, p2]);
        return a.useLayoutEffect(() => s2.listen(f2), [s2, f2]), a.createElement(I, { basename: t2, children: n2, location: c2.location, navigationType: c2.action, navigator: s2, future: u2 });
      }, e.Navigate = function(e2) {
        let { to: t2, replace: n2, state: o2, relative: i2 } = e2;
        f() || r.UNSAFE_invariant(false);
        let { future: u2, static: l2 } = a.useContext(s), { matches: c2 } = a.useContext(d), { pathname: p2 } = v(), m2 = h(), g2 = r.resolveTo(t2, r.UNSAFE_getResolveToMatches(c2, u2.v7_relativeSplatPath), p2, "path" === i2), E2 = JSON.stringify(g2);
        return a.useEffect(() => m2(JSON.parse(E2), { replace: n2, state: o2, relative: i2 }), [m2, E2, i2, n2, o2]), null;
      }, e.Outlet = function(e2) {
        return E(e2.context);
      }, e.Route = T, e.Router = I, e.RouterProvider = function(e2) {
        let { fallbackElement: t2, router: r2, future: n2 } = e2, [o2, l2] = a.useState(r2.state), { v7_startTransition: s2 } = n2 || {}, c2 = a.useCallback((e3) => {
          s2 && L ? L(() => l2(e3)) : l2(e3);
        }, [l2, s2]);
        a.useLayoutEffect(() => r2.subscribe(c2), [r2, c2]), a.useEffect(() => {
        }, []);
        let d2 = a.useMemo(() => ({ createHref: r2.createHref, encodeLocation: r2.encodeLocation, go: (e3) => r2.navigate(e3), push: (e3, t3, n3) => r2.navigate(e3, { state: t3, preventScrollReset: null == n3 ? void 0 : n3.preventScrollReset }), replace: (e3, t3, n3) => r2.navigate(e3, { replace: true, state: t3, preventScrollReset: null == n3 ? void 0 : n3.preventScrollReset }) }), [r2]), p2 = r2.basename || "/", f2 = a.useMemo(() => ({ router: r2, navigator: d2, static: false, basename: p2 }), [r2, d2, p2]);
        return a.createElement(a.Fragment, null, a.createElement(i.Provider, { value: f2 }, a.createElement(u.Provider, { value: o2 }, a.createElement(I, { basename: p2, location: o2.location, navigationType: o2.historyAction, navigator: d2, future: { v7_relativeSplatPath: r2.future.v7_relativeSplatPath } }, o2.initialized || r2.future.v7_partialHydration ? a.createElement(M, { routes: r2.routes, future: r2.future, state: o2 }) : t2))), null);
      }, e.Routes = function(e2) {
        let { children: t2, location: r2 } = e2;
        return b(q(t2), r2);
      }, e.UNSAFE_DataRouterContext = i, e.UNSAFE_DataRouterStateContext = u, e.UNSAFE_LocationContext = c, e.UNSAFE_NavigationContext = s, e.UNSAFE_RouteContext = d, e.UNSAFE_mapRouteProperties = V, e.UNSAFE_useRouteId = function() {
        return j(N.UseRouteId);
      }, e.UNSAFE_useRoutesImpl = R, e.createMemoryRouter = function(e2, t2) {
        return r.createRouter({ basename: null == t2 ? void 0 : t2.basename, future: o({}, null == t2 ? void 0 : t2.future, { v7_prependBasename: true }), history: r.createMemoryHistory({ initialEntries: null == t2 ? void 0 : t2.initialEntries, initialIndex: null == t2 ? void 0 : t2.initialIndex }), hydrationData: null == t2 ? void 0 : t2.hydrationData, routes: e2, mapRouteProperties: V, dataStrategy: null == t2 ? void 0 : t2.dataStrategy, patchRoutesOnNavigation: null == t2 ? void 0 : t2.patchRoutesOnNavigation }).initialize();
      }, e.createRoutesFromChildren = q, e.createRoutesFromElements = q, e.renderMatches = function(e2) {
        return _(e2);
      }, e.useActionData = function() {
        let e2 = A(N.UseActionData), t2 = j(N.UseLoaderData);
        return e2.actionData ? e2.actionData[t2] : void 0;
      }, e.useAsyncError = function() {
        let e2 = a.useContext(l);
        return null == e2 ? void 0 : e2._error;
      }, e.useAsyncValue = D, e.useBlocker = function(e2) {
        let { router: t2, basename: n2 } = O(U.UseBlocker), i2 = A(N.UseBlocker), [u2, l2] = a.useState(""), s2 = a.useCallback((t3) => {
          if ("function" != typeof e2) return !!e2;
          if ("/" === n2) return e2(t3);
          let { currentLocation: a2, nextLocation: i3, historyAction: u3 } = t3;
          return e2({ currentLocation: o({}, a2, { pathname: r.stripBasename(a2.pathname, n2) || a2.pathname }), nextLocation: o({}, i3, { pathname: r.stripBasename(i3.pathname, n2) || i3.pathname }), historyAction: u3 });
        }, [n2, e2]);
        return a.useEffect(() => {
          let e3 = String(++k);
          return l2(e3), () => t2.deleteBlocker(e3);
        }, [t2]), a.useEffect(() => {
          "" !== u2 && t2.getBlocker(u2, s2);
        }, [t2, u2, s2]), u2 && i2.blockers.has(u2) ? i2.blockers.get(u2) : r.IDLE_BLOCKER;
      }, e.useHref = function(e2, t2) {
        let { relative: n2 } = void 0 === t2 ? {} : t2;
        f() || r.UNSAFE_invariant(false);
        let { basename: o2, navigator: i2 } = a.useContext(s), { hash: u2, pathname: l2, search: c2 } = y(e2, { relative: n2 }), d2 = l2;
        return "/" !== o2 && (d2 = "/" === l2 ? o2 : r.joinPaths([o2, l2])), i2.createHref({ pathname: d2, search: c2, hash: u2 });
      }, e.useInRouterContext = f, e.useLoaderData = function() {
        let e2 = A(N.UseLoaderData), t2 = j(N.UseLoaderData);
        if (!e2.errors || null == e2.errors[t2]) return e2.loaderData[t2];
        console.error("You cannot `useLoaderData` in an errorElement (routeId: " + t2 + ")");
      }, e.useLocation = v, e.useMatch = function(e2) {
        f() || r.UNSAFE_invariant(false);
        let { pathname: t2 } = v();
        return a.useMemo(() => r.matchPath(e2, r.UNSAFE_decodePath(t2)), [t2, e2]);
      }, e.useMatches = function() {
        let { matches: e2, loaderData: t2 } = A(N.UseMatches);
        return a.useMemo(() => e2.map((e3) => r.UNSAFE_convertRouteMatchToUiMatch(e3, t2)), [e2, t2]);
      }, e.useNavigate = h, e.useNavigation = function() {
        return A(N.UseNavigation).navigation;
      }, e.useNavigationType = function() {
        return a.useContext(c).navigationType;
      }, e.useOutlet = E, e.useOutletContext = function() {
        return a.useContext(g);
      }, e.useParams = function() {
        let { matches: e2 } = a.useContext(d), t2 = e2[e2.length - 1];
        return t2 ? t2.params : {};
      }, e.useResolvedPath = y, e.useRevalidator = function() {
        let e2 = O(U.UseRevalidator), t2 = A(N.UseRevalidator);
        return a.useMemo(() => ({ revalidate: e2.router.revalidate, state: t2.revalidation }), [e2.router.revalidate, t2.revalidation]);
      }, e.useRouteError = F, e.useRouteLoaderData = function(e2) {
        return A(N.UseRouteLoaderData).loaderData[e2];
      }, e.useRoutes = b, Object.defineProperty(e, "__esModule", { value: true });
    });
  }
});

// node_modules/react-router/dist/umd/react-router.development.js
var require_react_router_development = __commonJS({
  "node_modules/react-router/dist/umd/react-router.development.js"(exports, module) {
    init_react_inject();
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react(), require_router_cjs()) : typeof define === "function" && define.amd ? define(["exports", "react", "@remix-run/router"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.ReactRouter = {}, global.React, global.RemixRouter));
    })(exports, function(exports2, React3, router) {
      "use strict";
      function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React3);
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      const DataRouterContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        DataRouterContext.displayName = "DataRouter";
      }
      const DataRouterStateContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        DataRouterStateContext.displayName = "DataRouterState";
      }
      const AwaitContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        AwaitContext.displayName = "Await";
      }
      const NavigationContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        NavigationContext.displayName = "Navigation";
      }
      const LocationContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        LocationContext.displayName = "Location";
      }
      const RouteContext = /* @__PURE__ */ React__namespace.createContext({
        outlet: null,
        matches: [],
        isDataRoute: false
      });
      {
        RouteContext.displayName = "Route";
      }
      const RouteErrorContext = /* @__PURE__ */ React__namespace.createContext(null);
      {
        RouteErrorContext.displayName = "RouteError";
      }
      function useHref(to, _temp) {
        let {
          relative
        } = _temp === void 0 ? {} : _temp;
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useHref() may be used only in the context of a <Router> component."
        ) : void 0;
        let {
          basename,
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext);
        let {
          hash,
          pathname,
          search
        } = useResolvedPath(to, {
          relative
        });
        let joinedPathname = pathname;
        if (basename !== "/") {
          joinedPathname = pathname === "/" ? basename : router.joinPaths([basename, pathname]);
        }
        return navigator2.createHref({
          pathname: joinedPathname,
          search,
          hash
        });
      }
      function useInRouterContext() {
        return React__namespace.useContext(LocationContext) != null;
      }
      function useLocation() {
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useLocation() may be used only in the context of a <Router> component."
        ) : void 0;
        return React__namespace.useContext(LocationContext).location;
      }
      function useNavigationType() {
        return React__namespace.useContext(LocationContext).navigationType;
      }
      function useMatch(pattern) {
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useMatch() may be used only in the context of a <Router> component."
        ) : void 0;
        let {
          pathname
        } = useLocation();
        return React__namespace.useMemo(() => router.matchPath(pattern, router.UNSAFE_decodePath(pathname)), [pathname, pattern]);
      }
      const navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
      function useIsomorphicLayoutEffect(cb) {
        let isStatic = React__namespace.useContext(NavigationContext).static;
        if (!isStatic) {
          React__namespace.useLayoutEffect(cb);
        }
      }
      function useNavigate() {
        let {
          isDataRoute
        } = React__namespace.useContext(RouteContext);
        return isDataRoute ? useNavigateStable() : useNavigateUnstable();
      }
      function useNavigateUnstable() {
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useNavigate() may be used only in the context of a <Router> component."
        ) : void 0;
        let dataRouterContext = React__namespace.useContext(DataRouterContext);
        let {
          basename,
          future,
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext);
        let {
          matches
        } = React__namespace.useContext(RouteContext);
        let {
          pathname: locationPathname
        } = useLocation();
        let routePathnamesJson = JSON.stringify(router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));
        let activeRef = React__namespace.useRef(false);
        useIsomorphicLayoutEffect(() => {
          activeRef.current = true;
        });
        let navigate = React__namespace.useCallback(function(to, options) {
          if (options === void 0) {
            options = {};
          }
          router.UNSAFE_warning(activeRef.current, navigateEffectWarning);
          if (!activeRef.current) return;
          if (typeof to === "number") {
            navigator2.go(to);
            return;
          }
          let path = router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
          if (dataRouterContext == null && basename !== "/") {
            path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname]);
          }
          (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
        }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
        return navigate;
      }
      const OutletContext = /* @__PURE__ */ React__namespace.createContext(null);
      function useOutletContext() {
        return React__namespace.useContext(OutletContext);
      }
      function useOutlet(context) {
        let outlet = React__namespace.useContext(RouteContext).outlet;
        if (outlet) {
          return /* @__PURE__ */ React__namespace.createElement(OutletContext.Provider, {
            value: context
          }, outlet);
        }
        return outlet;
      }
      function useParams() {
        let {
          matches
        } = React__namespace.useContext(RouteContext);
        let routeMatch = matches[matches.length - 1];
        return routeMatch ? routeMatch.params : {};
      }
      function useResolvedPath(to, _temp2) {
        let {
          relative
        } = _temp2 === void 0 ? {} : _temp2;
        let {
          future
        } = React__namespace.useContext(NavigationContext);
        let {
          matches
        } = React__namespace.useContext(RouteContext);
        let {
          pathname: locationPathname
        } = useLocation();
        let routePathnamesJson = JSON.stringify(router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath));
        return React__namespace.useMemo(() => router.resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
      }
      function useRoutes(routes, locationArg) {
        return useRoutesImpl(routes, locationArg);
      }
      function useRoutesImpl(routes, locationArg, dataRouterState, future) {
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of the
          // router loaded. We can help them understand how to avoid that.
          "useRoutes() may be used only in the context of a <Router> component."
        ) : void 0;
        let {
          navigator: navigator2
        } = React__namespace.useContext(NavigationContext);
        let {
          matches: parentMatches
        } = React__namespace.useContext(RouteContext);
        let routeMatch = parentMatches[parentMatches.length - 1];
        let parentParams = routeMatch ? routeMatch.params : {};
        let parentPathname = routeMatch ? routeMatch.pathname : "/";
        let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
        let parentRoute = routeMatch && routeMatch.route;
        {
          let parentPath = parentRoute && parentRoute.path || "";
          warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
        }
        let locationFromContext = useLocation();
        let location;
        if (locationArg) {
          var _parsedLocationArg$pa;
          let parsedLocationArg = typeof locationArg === "string" ? router.parsePath(locationArg) : locationArg;
          !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? router.UNSAFE_invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : void 0;
          location = parsedLocationArg;
        } else {
          location = locationFromContext;
        }
        let pathname = location.pathname || "/";
        let remainingPathname = pathname;
        if (parentPathnameBase !== "/") {
          let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
          let segments = pathname.replace(/^\//, "").split("/");
          remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
        }
        let matches = router.matchRoutes(routes, {
          pathname: remainingPathname
        });
        {
          router.UNSAFE_warning(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ');
          router.UNSAFE_warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
        }
        let renderedMatches = _renderMatches(matches && matches.map((match) => Object.assign({}, match, {
          params: Object.assign({}, parentParams, match.params),
          pathname: router.joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
          ]),
          pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : router.joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
          ])
        })), parentMatches, dataRouterState, future);
        if (locationArg && renderedMatches) {
          return /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
            value: {
              location: _extends({
                pathname: "/",
                search: "",
                hash: "",
                state: null,
                key: "default"
              }, location),
              navigationType: router.Action.Pop
            }
          }, renderedMatches);
        }
        return renderedMatches;
      }
      function DefaultErrorComponent() {
        let error = useRouteError();
        let message = router.isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
        let stack = error instanceof Error ? error.stack : null;
        let lightgrey = "rgba(200,200,200, 0.5)";
        let preStyles = {
          padding: "0.5rem",
          backgroundColor: lightgrey
        };
        let codeStyles = {
          padding: "2px 4px",
          backgroundColor: lightgrey
        };
        let devInfo = null;
        {
          console.error("Error handled by React Router default ErrorBoundary:", error);
          devInfo = /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React__namespace.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React__namespace.createElement("code", {
            style: codeStyles
          }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React__namespace.createElement("code", {
            style: codeStyles
          }, "errorElement"), " prop on your route."));
        }
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React__namespace.createElement("h3", {
          style: {
            fontStyle: "italic"
          }
        }, message), stack ? /* @__PURE__ */ React__namespace.createElement("pre", {
          style: preStyles
        }, stack) : null, devInfo);
      }
      const defaultErrorElement = /* @__PURE__ */ React__namespace.createElement(DefaultErrorComponent, null);
      class RenderErrorBoundary extends React__namespace.Component {
        constructor(props) {
          super(props);
          this.state = {
            location: props.location,
            revalidation: props.revalidation,
            error: props.error
          };
        }
        static getDerivedStateFromError(error) {
          return {
            error
          };
        }
        static getDerivedStateFromProps(props, state) {
          if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
            return {
              error: props.error,
              location: props.location,
              revalidation: props.revalidation
            };
          }
          return {
            error: props.error !== void 0 ? props.error : state.error,
            location: state.location,
            revalidation: props.revalidation || state.revalidation
          };
        }
        componentDidCatch(error, errorInfo) {
          console.error("React Router caught the following error during render", error, errorInfo);
        }
        render() {
          return this.state.error !== void 0 ? /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
            value: this.props.routeContext
          }, /* @__PURE__ */ React__namespace.createElement(RouteErrorContext.Provider, {
            value: this.state.error,
            children: this.props.component
          })) : this.props.children;
        }
      }
      function RenderedRoute(_ref) {
        let {
          routeContext,
          match,
          children
        } = _ref;
        let dataRouterContext = React__namespace.useContext(DataRouterContext);
        if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
          dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
        }
        return /* @__PURE__ */ React__namespace.createElement(RouteContext.Provider, {
          value: routeContext
        }, children);
      }
      function _renderMatches(matches, parentMatches, dataRouterState, future) {
        var _dataRouterState;
        if (parentMatches === void 0) {
          parentMatches = [];
        }
        if (dataRouterState === void 0) {
          dataRouterState = null;
        }
        if (future === void 0) {
          future = null;
        }
        if (matches == null) {
          var _future;
          if (!dataRouterState) {
            return null;
          }
          if (dataRouterState.errors) {
            matches = dataRouterState.matches;
          } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
            matches = dataRouterState.matches;
          } else {
            return null;
          }
        }
        let renderedMatches = matches;
        let errors = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
        if (errors != null) {
          let errorIndex = renderedMatches.findIndex((m) => m.route.id && (errors == null ? void 0 : errors[m.route.id]) !== void 0);
          !(errorIndex >= 0) ? router.UNSAFE_invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : void 0;
          renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
        }
        let renderFallback = false;
        let fallbackIndex = -1;
        if (dataRouterState && future && future.v7_partialHydration) {
          for (let i = 0; i < renderedMatches.length; i++) {
            let match = renderedMatches[i];
            if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
              fallbackIndex = i;
            }
            if (match.route.id) {
              let {
                loaderData,
                errors: errors2
              } = dataRouterState;
              let needsToRunLoader = match.route.loader && loaderData[match.route.id] === void 0 && (!errors2 || errors2[match.route.id] === void 0);
              if (match.route.lazy || needsToRunLoader) {
                renderFallback = true;
                if (fallbackIndex >= 0) {
                  renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
                } else {
                  renderedMatches = [renderedMatches[0]];
                }
                break;
              }
            }
          }
        }
        return renderedMatches.reduceRight((outlet, match, index) => {
          let error;
          let shouldRenderHydrateFallback = false;
          let errorElement = null;
          let hydrateFallbackElement = null;
          if (dataRouterState) {
            error = errors && match.route.id ? errors[match.route.id] : void 0;
            errorElement = match.route.errorElement || defaultErrorElement;
            if (renderFallback) {
              if (fallbackIndex < 0 && index === 0) {
                warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
                shouldRenderHydrateFallback = true;
                hydrateFallbackElement = null;
              } else if (fallbackIndex === index) {
                shouldRenderHydrateFallback = true;
                hydrateFallbackElement = match.route.hydrateFallbackElement || null;
              }
            }
          }
          let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
          let getChildren = () => {
            let children;
            if (error) {
              children = errorElement;
            } else if (shouldRenderHydrateFallback) {
              children = hydrateFallbackElement;
            } else if (match.route.Component) {
              children = /* @__PURE__ */ React__namespace.createElement(match.route.Component, null);
            } else if (match.route.element) {
              children = match.route.element;
            } else {
              children = outlet;
            }
            return /* @__PURE__ */ React__namespace.createElement(RenderedRoute, {
              match,
              routeContext: {
                outlet,
                matches: matches2,
                isDataRoute: dataRouterState != null
              },
              children
            });
          };
          return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React__namespace.createElement(RenderErrorBoundary, {
            location: dataRouterState.location,
            revalidation: dataRouterState.revalidation,
            component: errorElement,
            error,
            children: getChildren(),
            routeContext: {
              outlet: null,
              matches: matches2,
              isDataRoute: true
            }
          }) : getChildren();
        }, null);
      }
      var DataRouterHook = /* @__PURE__ */ function(DataRouterHook2) {
        DataRouterHook2["UseBlocker"] = "useBlocker";
        DataRouterHook2["UseRevalidator"] = "useRevalidator";
        DataRouterHook2["UseNavigateStable"] = "useNavigate";
        return DataRouterHook2;
      }(DataRouterHook || {});
      var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook2) {
        DataRouterStateHook2["UseBlocker"] = "useBlocker";
        DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
        DataRouterStateHook2["UseActionData"] = "useActionData";
        DataRouterStateHook2["UseRouteError"] = "useRouteError";
        DataRouterStateHook2["UseNavigation"] = "useNavigation";
        DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
        DataRouterStateHook2["UseMatches"] = "useMatches";
        DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
        DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
        DataRouterStateHook2["UseRouteId"] = "useRouteId";
        return DataRouterStateHook2;
      }(DataRouterStateHook || {});
      function getDataRouterConsoleError(hookName) {
        return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
      }
      function useDataRouterContext(hookName) {
        let ctx = React__namespace.useContext(DataRouterContext);
        !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
        return ctx;
      }
      function useDataRouterState(hookName) {
        let state = React__namespace.useContext(DataRouterStateContext);
        !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
        return state;
      }
      function useRouteContext(hookName) {
        let route = React__namespace.useContext(RouteContext);
        !route ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
        return route;
      }
      function useCurrentRouteId(hookName) {
        let route = useRouteContext(hookName);
        let thisRoute = route.matches[route.matches.length - 1];
        !thisRoute.route.id ? router.UNSAFE_invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : void 0;
        return thisRoute.route.id;
      }
      function useRouteId() {
        return useCurrentRouteId(DataRouterStateHook.UseRouteId);
      }
      function useNavigation() {
        let state = useDataRouterState(DataRouterStateHook.UseNavigation);
        return state.navigation;
      }
      function useRevalidator() {
        let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);
        let state = useDataRouterState(DataRouterStateHook.UseRevalidator);
        return React__namespace.useMemo(() => ({
          revalidate: dataRouterContext.router.revalidate,
          state: state.revalidation
        }), [dataRouterContext.router.revalidate, state.revalidation]);
      }
      function useMatches() {
        let {
          matches,
          loaderData
        } = useDataRouterState(DataRouterStateHook.UseMatches);
        return React__namespace.useMemo(() => matches.map((m) => router.UNSAFE_convertRouteMatchToUiMatch(m, loaderData)), [matches, loaderData]);
      }
      function useLoaderData() {
        let state = useDataRouterState(DataRouterStateHook.UseLoaderData);
        let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
        if (state.errors && state.errors[routeId] != null) {
          console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
          return void 0;
        }
        return state.loaderData[routeId];
      }
      function useRouteLoaderData(routeId) {
        let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);
        return state.loaderData[routeId];
      }
      function useActionData() {
        let state = useDataRouterState(DataRouterStateHook.UseActionData);
        let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
        return state.actionData ? state.actionData[routeId] : void 0;
      }
      function useRouteError() {
        var _state$errors;
        let error = React__namespace.useContext(RouteErrorContext);
        let state = useDataRouterState(DataRouterStateHook.UseRouteError);
        let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
        if (error !== void 0) {
          return error;
        }
        return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
      }
      function useAsyncValue() {
        let value = React__namespace.useContext(AwaitContext);
        return value == null ? void 0 : value._data;
      }
      function useAsyncError() {
        let value = React__namespace.useContext(AwaitContext);
        return value == null ? void 0 : value._error;
      }
      let blockerId = 0;
      function useBlocker(shouldBlock) {
        let {
          router: router$1,
          basename
        } = useDataRouterContext(DataRouterHook.UseBlocker);
        let state = useDataRouterState(DataRouterStateHook.UseBlocker);
        let [blockerKey, setBlockerKey] = React__namespace.useState("");
        let blockerFunction = React__namespace.useCallback((arg) => {
          if (typeof shouldBlock !== "function") {
            return !!shouldBlock;
          }
          if (basename === "/") {
            return shouldBlock(arg);
          }
          let {
            currentLocation,
            nextLocation,
            historyAction
          } = arg;
          return shouldBlock({
            currentLocation: _extends({}, currentLocation, {
              pathname: router.stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
            }),
            nextLocation: _extends({}, nextLocation, {
              pathname: router.stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
            }),
            historyAction
          });
        }, [basename, shouldBlock]);
        React__namespace.useEffect(() => {
          let key = String(++blockerId);
          setBlockerKey(key);
          return () => router$1.deleteBlocker(key);
        }, [router$1]);
        React__namespace.useEffect(() => {
          if (blockerKey !== "") {
            router$1.getBlocker(blockerKey, blockerFunction);
          }
        }, [router$1, blockerKey, blockerFunction]);
        return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : router.IDLE_BLOCKER;
      }
      function useNavigateStable() {
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseNavigateStable);
        let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
        let activeRef = React__namespace.useRef(false);
        useIsomorphicLayoutEffect(() => {
          activeRef.current = true;
        });
        let navigate = React__namespace.useCallback(function(to, options) {
          if (options === void 0) {
            options = {};
          }
          router.UNSAFE_warning(activeRef.current, navigateEffectWarning);
          if (!activeRef.current) return;
          if (typeof to === "number") {
            router$1.navigate(to);
          } else {
            router$1.navigate(to, _extends({
              fromRouteId: id
            }, options));
          }
        }, [router$1, id]);
        return navigate;
      }
      const alreadyWarned = {};
      function warningOnce(key, cond, message) {
        if (!cond && !alreadyWarned[key]) {
          alreadyWarned[key] = true;
          router.UNSAFE_warning(false, message);
        }
      }
      const START_TRANSITION = "startTransition";
      const startTransitionImpl = React__namespace[START_TRANSITION];
      function RouterProvider(_ref) {
        let {
          fallbackElement,
          router: router$1,
          future
        } = _ref;
        let [state, setStateImpl] = React__namespace.useState(router$1.state);
        let {
          v7_startTransition
        } = future || {};
        let setState = React__namespace.useCallback((newState) => {
          if (v7_startTransition && startTransitionImpl) {
            startTransitionImpl(() => setStateImpl(newState));
          } else {
            setStateImpl(newState);
          }
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => router$1.subscribe(setState), [router$1, setState]);
        React__namespace.useEffect(() => {
          router.UNSAFE_warning(fallbackElement == null || !router$1.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
        }, []);
        let navigator2 = React__namespace.useMemo(() => {
          return {
            createHref: router$1.createHref,
            encodeLocation: router$1.encodeLocation,
            go: (n) => router$1.navigate(n),
            push: (to, state2, opts) => router$1.navigate(to, {
              state: state2,
              preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
            }),
            replace: (to, state2, opts) => router$1.navigate(to, {
              replace: true,
              state: state2,
              preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
            })
          };
        }, [router$1]);
        let basename = router$1.basename || "/";
        let dataRouterContext = React__namespace.useMemo(() => ({
          router: router$1,
          navigator: navigator2,
          static: false,
          basename
        }), [router$1, navigator2, basename]);
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(DataRouterContext.Provider, {
          value: dataRouterContext
        }, /* @__PURE__ */ React__namespace.createElement(DataRouterStateContext.Provider, {
          value: state
        }, /* @__PURE__ */ React__namespace.createElement(Router, {
          basename,
          location: state.location,
          navigationType: state.historyAction,
          navigator: navigator2,
          future: {
            v7_relativeSplatPath: router$1.future.v7_relativeSplatPath
          }
        }, state.initialized || router$1.future.v7_partialHydration ? /* @__PURE__ */ React__namespace.createElement(DataRoutes, {
          routes: router$1.routes,
          future: router$1.future,
          state
        }) : fallbackElement))), null);
      }
      function DataRoutes(_ref2) {
        let {
          routes,
          future,
          state
        } = _ref2;
        return useRoutesImpl(routes, void 0, state, future);
      }
      function MemoryRouter(_ref3) {
        let {
          basename,
          children,
          initialEntries,
          initialIndex,
          future
        } = _ref3;
        let historyRef = React__namespace.useRef();
        if (historyRef.current == null) {
          historyRef.current = router.createMemoryHistory({
            initialEntries,
            initialIndex,
            v5Compat: true
          });
        }
        let history = historyRef.current;
        let [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        });
        let {
          v7_startTransition
        } = future || {};
        let setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
        return /* @__PURE__ */ React__namespace.createElement(Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history,
          future
        });
      }
      function Navigate(_ref4) {
        let {
          to,
          replace,
          state,
          relative
        } = _ref4;
        !useInRouterContext() ? router.UNSAFE_invariant(
          false,
          // TODO: This error is probably because they somehow have 2 versions of
          // the router loaded. We can help them understand how to avoid that.
          "<Navigate> may be used only in the context of a <Router> component."
        ) : void 0;
        let {
          future,
          static: isStatic
        } = React__namespace.useContext(NavigationContext);
        router.UNSAFE_warning(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
        let {
          matches
        } = React__namespace.useContext(RouteContext);
        let {
          pathname: locationPathname
        } = useLocation();
        let navigate = useNavigate();
        let path = router.resolveTo(to, router.UNSAFE_getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
        let jsonPath = JSON.stringify(path);
        React__namespace.useEffect(() => navigate(JSON.parse(jsonPath), {
          replace,
          state,
          relative
        }), [navigate, jsonPath, relative, replace, state]);
        return null;
      }
      function Outlet(props) {
        return useOutlet(props.context);
      }
      function Route(_props) {
        router.UNSAFE_invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
      }
      function Router(_ref5) {
        let {
          basename: basenameProp = "/",
          children = null,
          location: locationProp,
          navigationType = router.Action.Pop,
          navigator: navigator2,
          static: staticProp = false,
          future
        } = _ref5;
        !!useInRouterContext() ? router.UNSAFE_invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : void 0;
        let basename = basenameProp.replace(/^\/*/, "/");
        let navigationContext = React__namespace.useMemo(() => ({
          basename,
          navigator: navigator2,
          static: staticProp,
          future: _extends({
            v7_relativeSplatPath: false
          }, future)
        }), [basename, future, navigator2, staticProp]);
        if (typeof locationProp === "string") {
          locationProp = router.parsePath(locationProp);
        }
        let {
          pathname = "/",
          search = "",
          hash = "",
          state = null,
          key = "default"
        } = locationProp;
        let locationContext = React__namespace.useMemo(() => {
          let trailingPathname = router.stripBasename(pathname, basename);
          if (trailingPathname == null) {
            return null;
          }
          return {
            location: {
              pathname: trailingPathname,
              search,
              hash,
              state,
              key
            },
            navigationType
          };
        }, [basename, pathname, search, hash, state, key, navigationType]);
        router.UNSAFE_warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.");
        if (locationContext == null) {
          return null;
        }
        return /* @__PURE__ */ React__namespace.createElement(NavigationContext.Provider, {
          value: navigationContext
        }, /* @__PURE__ */ React__namespace.createElement(LocationContext.Provider, {
          children,
          value: locationContext
        }));
      }
      function Routes(_ref6) {
        let {
          children,
          location
        } = _ref6;
        return useRoutes(createRoutesFromChildren(children), location);
      }
      function Await(_ref7) {
        let {
          children,
          errorElement,
          resolve
        } = _ref7;
        return /* @__PURE__ */ React__namespace.createElement(AwaitErrorBoundary, {
          resolve,
          errorElement
        }, /* @__PURE__ */ React__namespace.createElement(ResolveAwait, null, children));
      }
      var AwaitRenderStatus = /* @__PURE__ */ function(AwaitRenderStatus2) {
        AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
        AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
        AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
        return AwaitRenderStatus2;
      }(AwaitRenderStatus || {});
      const neverSettledPromise = new Promise(() => {
      });
      class AwaitErrorBoundary extends React__namespace.Component {
        constructor(props) {
          super(props);
          this.state = {
            error: null
          };
        }
        static getDerivedStateFromError(error) {
          return {
            error
          };
        }
        componentDidCatch(error, errorInfo) {
          console.error("<Await> caught the following error during render", error, errorInfo);
        }
        render() {
          let {
            children,
            errorElement,
            resolve
          } = this.props;
          let promise = null;
          let status = AwaitRenderStatus.pending;
          if (!(resolve instanceof Promise)) {
            status = AwaitRenderStatus.success;
            promise = Promise.resolve();
            Object.defineProperty(promise, "_tracked", {
              get: () => true
            });
            Object.defineProperty(promise, "_data", {
              get: () => resolve
            });
          } else if (this.state.error) {
            status = AwaitRenderStatus.error;
            let renderError = this.state.error;
            promise = Promise.reject().catch(() => {
            });
            Object.defineProperty(promise, "_tracked", {
              get: () => true
            });
            Object.defineProperty(promise, "_error", {
              get: () => renderError
            });
          } else if (resolve._tracked) {
            promise = resolve;
            status = "_error" in promise ? AwaitRenderStatus.error : "_data" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;
          } else {
            status = AwaitRenderStatus.pending;
            Object.defineProperty(resolve, "_tracked", {
              get: () => true
            });
            promise = resolve.then((data) => Object.defineProperty(resolve, "_data", {
              get: () => data
            }), (error) => Object.defineProperty(resolve, "_error", {
              get: () => error
            }));
          }
          if (status === AwaitRenderStatus.error && promise._error instanceof router.AbortedDeferredError) {
            throw neverSettledPromise;
          }
          if (status === AwaitRenderStatus.error && !errorElement) {
            throw promise._error;
          }
          if (status === AwaitRenderStatus.error) {
            return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
              value: promise,
              children: errorElement
            });
          }
          if (status === AwaitRenderStatus.success) {
            return /* @__PURE__ */ React__namespace.createElement(AwaitContext.Provider, {
              value: promise,
              children
            });
          }
          throw promise;
        }
      }
      function ResolveAwait(_ref8) {
        let {
          children
        } = _ref8;
        let data = useAsyncValue();
        let toRender = typeof children === "function" ? children(data) : children;
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, toRender);
      }
      function createRoutesFromChildren(children, parentPath) {
        if (parentPath === void 0) {
          parentPath = [];
        }
        let routes = [];
        React__namespace.Children.forEach(children, (element, index) => {
          if (!/* @__PURE__ */ React__namespace.isValidElement(element)) {
            return;
          }
          let treePath = [...parentPath, index];
          if (element.type === React__namespace.Fragment) {
            routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
            return;
          }
          !(element.type === Route) ? router.UNSAFE_invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : void 0;
          !(!element.props.index || !element.props.children) ? router.UNSAFE_invariant(false, "An index route cannot have child routes.") : void 0;
          let route = {
            id: element.props.id || treePath.join("-"),
            caseSensitive: element.props.caseSensitive,
            element: element.props.element,
            Component: element.props.Component,
            index: element.props.index,
            path: element.props.path,
            loader: element.props.loader,
            action: element.props.action,
            errorElement: element.props.errorElement,
            ErrorBoundary: element.props.ErrorBoundary,
            hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
            shouldRevalidate: element.props.shouldRevalidate,
            handle: element.props.handle,
            lazy: element.props.lazy
          };
          if (element.props.children) {
            route.children = createRoutesFromChildren(element.props.children, treePath);
          }
          routes.push(route);
        });
        return routes;
      }
      function renderMatches(matches) {
        return _renderMatches(matches);
      }
      function mapRouteProperties(route) {
        let updates = {
          // Note: this check also occurs in createRoutesFromChildren so update
          // there if you change this -- please and thank you!
          hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
        };
        if (route.Component) {
          {
            if (route.element) {
              router.UNSAFE_warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used.");
            }
          }
          Object.assign(updates, {
            element: /* @__PURE__ */ React__namespace.createElement(route.Component),
            Component: void 0
          });
        }
        if (route.HydrateFallback) {
          {
            if (route.hydrateFallbackElement) {
              router.UNSAFE_warning(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.");
            }
          }
          Object.assign(updates, {
            hydrateFallbackElement: /* @__PURE__ */ React__namespace.createElement(route.HydrateFallback),
            HydrateFallback: void 0
          });
        }
        if (route.ErrorBoundary) {
          {
            if (route.errorElement) {
              router.UNSAFE_warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.");
            }
          }
          Object.assign(updates, {
            errorElement: /* @__PURE__ */ React__namespace.createElement(route.ErrorBoundary),
            ErrorBoundary: void 0
          });
        }
        return updates;
      }
      function createMemoryRouter(routes, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
          }),
          history: router.createMemoryHistory({
            initialEntries: opts == null ? void 0 : opts.initialEntries,
            initialIndex: opts == null ? void 0 : opts.initialIndex
          }),
          hydrationData: opts == null ? void 0 : opts.hydrationData,
          routes,
          mapRouteProperties,
          dataStrategy: opts == null ? void 0 : opts.dataStrategy,
          patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation
        }).initialize();
      }
      Object.defineProperty(exports2, "AbortedDeferredError", {
        enumerable: true,
        get: function() {
          return router.AbortedDeferredError;
        }
      });
      Object.defineProperty(exports2, "NavigationType", {
        enumerable: true,
        get: function() {
          return router.Action;
        }
      });
      Object.defineProperty(exports2, "createPath", {
        enumerable: true,
        get: function() {
          return router.createPath;
        }
      });
      Object.defineProperty(exports2, "defer", {
        enumerable: true,
        get: function() {
          return router.defer;
        }
      });
      Object.defineProperty(exports2, "generatePath", {
        enumerable: true,
        get: function() {
          return router.generatePath;
        }
      });
      Object.defineProperty(exports2, "isRouteErrorResponse", {
        enumerable: true,
        get: function() {
          return router.isRouteErrorResponse;
        }
      });
      Object.defineProperty(exports2, "json", {
        enumerable: true,
        get: function() {
          return router.json;
        }
      });
      Object.defineProperty(exports2, "matchPath", {
        enumerable: true,
        get: function() {
          return router.matchPath;
        }
      });
      Object.defineProperty(exports2, "matchRoutes", {
        enumerable: true,
        get: function() {
          return router.matchRoutes;
        }
      });
      Object.defineProperty(exports2, "parsePath", {
        enumerable: true,
        get: function() {
          return router.parsePath;
        }
      });
      Object.defineProperty(exports2, "redirect", {
        enumerable: true,
        get: function() {
          return router.redirect;
        }
      });
      Object.defineProperty(exports2, "redirectDocument", {
        enumerable: true,
        get: function() {
          return router.redirectDocument;
        }
      });
      Object.defineProperty(exports2, "replace", {
        enumerable: true,
        get: function() {
          return router.replace;
        }
      });
      Object.defineProperty(exports2, "resolvePath", {
        enumerable: true,
        get: function() {
          return router.resolvePath;
        }
      });
      exports2.Await = Await;
      exports2.MemoryRouter = MemoryRouter;
      exports2.Navigate = Navigate;
      exports2.Outlet = Outlet;
      exports2.Route = Route;
      exports2.Router = Router;
      exports2.RouterProvider = RouterProvider;
      exports2.Routes = Routes;
      exports2.UNSAFE_DataRouterContext = DataRouterContext;
      exports2.UNSAFE_DataRouterStateContext = DataRouterStateContext;
      exports2.UNSAFE_LocationContext = LocationContext;
      exports2.UNSAFE_NavigationContext = NavigationContext;
      exports2.UNSAFE_RouteContext = RouteContext;
      exports2.UNSAFE_mapRouteProperties = mapRouteProperties;
      exports2.UNSAFE_useRouteId = useRouteId;
      exports2.UNSAFE_useRoutesImpl = useRoutesImpl;
      exports2.createMemoryRouter = createMemoryRouter;
      exports2.createRoutesFromChildren = createRoutesFromChildren;
      exports2.createRoutesFromElements = createRoutesFromChildren;
      exports2.renderMatches = renderMatches;
      exports2.useActionData = useActionData;
      exports2.useAsyncError = useAsyncError;
      exports2.useAsyncValue = useAsyncValue;
      exports2.useBlocker = useBlocker;
      exports2.useHref = useHref;
      exports2.useInRouterContext = useInRouterContext;
      exports2.useLoaderData = useLoaderData;
      exports2.useLocation = useLocation;
      exports2.useMatch = useMatch;
      exports2.useMatches = useMatches;
      exports2.useNavigate = useNavigate;
      exports2.useNavigation = useNavigation;
      exports2.useNavigationType = useNavigationType;
      exports2.useOutlet = useOutlet;
      exports2.useOutletContext = useOutletContext;
      exports2.useParams = useParams;
      exports2.useResolvedPath = useResolvedPath;
      exports2.useRevalidator = useRevalidator;
      exports2.useRouteError = useRouteError;
      exports2.useRouteLoaderData = useRouteLoaderData;
      exports2.useRoutes = useRoutes;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/react-router/dist/main.js
var require_main = __commonJS({
  "node_modules/react-router/dist/main.js"(exports, module) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV === "production") {
      module.exports = require_react_router_production_min();
    } else {
      module.exports = require_react_router_development();
    }
  }
});

// node_modules/react-router-dom/dist/umd/react-router-dom.production.min.js
var require_react_router_dom_production_min = __commonJS({
  "node_modules/react-router-dom/dist/umd/react-router-dom.production.min.js"(exports, module) {
    init_react_inject();
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? t(exports, require_react(), require_react_dom(), require_main(), require_router_cjs()) : "function" == typeof define && define.amd ? define(["exports", "react", "react-dom", "react-router", "@remix-run/router"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).ReactRouterDOM = {}, e.React, e.ReactDOM, e.ReactRouter, e.RemixRouter);
    }(exports, function(e, t, n, r, o) {
      "use strict";
      function a(e2) {
        if (e2 && e2.__esModule) return e2;
        var t2 = /* @__PURE__ */ Object.create(null);
        return e2 && Object.keys(e2).forEach(function(n2) {
          if ("default" !== n2) {
            var r2 = Object.getOwnPropertyDescriptor(e2, n2);
            Object.defineProperty(t2, n2, r2.get ? r2 : { enumerable: true, get: function() {
              return e2[n2];
            } });
          }
        }), t2.default = e2, Object.freeze(t2);
      }
      var i = a(t), u = a(n);
      function s() {
        return s = Object.assign ? Object.assign.bind() : function(e2) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var n2 = arguments[t2];
            for (var r2 in n2) Object.prototype.hasOwnProperty.call(n2, r2) && (e2[r2] = n2[r2]);
          }
          return e2;
        }, s.apply(this, arguments);
      }
      function c(e2, t2) {
        if (null == e2) return {};
        var n2, r2, o2 = {}, a2 = Object.keys(e2);
        for (r2 = 0; r2 < a2.length; r2++) n2 = a2[r2], t2.indexOf(n2) >= 0 || (o2[n2] = e2[n2]);
        return o2;
      }
      const l = "get", f = "application/x-www-form-urlencoded";
      function d(e2) {
        return null != e2 && "string" == typeof e2.tagName;
      }
      function m(e2) {
        return void 0 === e2 && (e2 = ""), new URLSearchParams("string" == typeof e2 || Array.isArray(e2) || e2 instanceof URLSearchParams ? e2 : Object.keys(e2).reduce((t2, n2) => {
          let r2 = e2[n2];
          return t2.concat(Array.isArray(r2) ? r2.map((e3) => [n2, e3]) : [[n2, r2]]);
        }, []));
      }
      let p = null;
      const v = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
      function h(e2) {
        return null == e2 || v.has(e2) ? e2 : null;
      }
      function b(e2, t2) {
        let n2, r2, a2, i2, u2;
        if (d(s2 = e2) && "form" === s2.tagName.toLowerCase()) {
          let u3 = e2.getAttribute("action");
          r2 = u3 ? o.stripBasename(u3, t2) : null, n2 = e2.getAttribute("method") || l, a2 = h(e2.getAttribute("enctype")) || f, i2 = new FormData(e2);
        } else if (function(e3) {
          return d(e3) && "button" === e3.tagName.toLowerCase();
        }(e2) || function(e3) {
          return d(e3) && "input" === e3.tagName.toLowerCase();
        }(e2) && ("submit" === e2.type || "image" === e2.type)) {
          let u3 = e2.form;
          if (null == u3) throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
          let s3 = e2.getAttribute("formaction") || u3.getAttribute("action");
          if (r2 = s3 ? o.stripBasename(s3, t2) : null, n2 = e2.getAttribute("formmethod") || u3.getAttribute("method") || l, a2 = h(e2.getAttribute("formenctype")) || h(u3.getAttribute("enctype")) || f, i2 = new FormData(u3, e2), !function() {
            if (null === p) try {
              new FormData(document.createElement("form"), 0), p = false;
            } catch (e3) {
              p = true;
            }
            return p;
          }()) {
            let { name: t3, type: n3, value: r3 } = e2;
            if ("image" === n3) {
              let e3 = t3 ? t3 + "." : "";
              i2.append(e3 + "x", "0"), i2.append(e3 + "y", "0");
            } else t3 && i2.append(t3, r3);
          }
        } else {
          if (d(e2)) throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
          n2 = l, r2 = null, a2 = f, u2 = e2;
        }
        var s2;
        return i2 && "text/plain" === a2 && (u2 = i2, i2 = void 0), { action: r2, method: n2.toLowerCase(), encType: a2, formData: i2, body: u2 };
      }
      const y = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"], g = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"], w = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
      try {
        window.__reactRouterVersion = "6";
      } catch (e2) {
      }
      function R() {
        var e2;
        let t2 = null == (e2 = window) ? void 0 : e2.__staticRouterHydrationData;
        return t2 && t2.errors && (t2 = s({}, t2, { errors: S(t2.errors) })), t2;
      }
      function S(e2) {
        if (!e2) return null;
        let t2 = Object.entries(e2), n2 = {};
        for (let [e3, r2] of t2) if (r2 && "RouteErrorResponse" === r2.__type) n2[e3] = new o.UNSAFE_ErrorResponseImpl(r2.status, r2.statusText, r2.data, true === r2.internal);
        else if (r2 && "Error" === r2.__type) {
          if (r2.__subType) {
            let t3 = window[r2.__subType];
            if ("function" == typeof t3) try {
              let o2 = new t3(r2.message);
              o2.stack = "", n2[e3] = o2;
            } catch (e4) {
            }
          }
          if (null == n2[e3]) {
            let t3 = new Error(r2.message);
            t3.stack = "", n2[e3] = t3;
          }
        } else n2[e3] = r2;
        return n2;
      }
      const E = i.createContext({ isTransitioning: false }), P = i.createContext(/* @__PURE__ */ new Map()), O = i.startTransition, N = u.flushSync, _ = i.useId;
      function A(e2) {
        N ? N(e2) : e2();
      }
      class C {
        constructor() {
          this.status = "pending", this.promise = new Promise((e2, t2) => {
            this.resolve = (t3) => {
              "pending" === this.status && (this.status = "resolved", e2(t3));
            }, this.reject = (e3) => {
              "pending" === this.status && (this.status = "rejected", t2(e3));
            };
          });
        }
      }
      const j = i.memo(x);
      function x(e2) {
        let { routes: t2, future: n2, state: o2 } = e2;
        return r.UNSAFE_useRoutesImpl(t2, void 0, o2, n2);
      }
      const F = "undefined" != typeof window && void 0 !== window.document && void 0 !== window.document.createElement, L = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i, T = i.forwardRef(function(e2, t2) {
        let n2, { onClick: a2, relative: u2, reloadDocument: l2, replace: f2, state: d2, target: m2, to: p2, preventScrollReset: v2, viewTransition: h2 } = e2, b2 = c(e2, y), { basename: g2 } = i.useContext(r.UNSAFE_NavigationContext), w2 = false;
        if ("string" == typeof p2 && L.test(p2) && (n2 = p2, F)) try {
          let e3 = new URL(window.location.href), t3 = p2.startsWith("//") ? new URL(e3.protocol + p2) : new URL(p2), n3 = o.stripBasename(t3.pathname, g2);
          t3.origin === e3.origin && null != n3 ? p2 = n3 + t3.search + t3.hash : w2 = true;
        } catch (e3) {
        }
        let R2 = r.useHref(p2, { relative: u2 }), S2 = I(p2, { replace: f2, state: d2, target: m2, preventScrollReset: v2, relative: u2, viewTransition: h2 });
        return i.createElement("a", s({}, b2, { href: n2 || R2, onClick: w2 || l2 ? a2 : function(e3) {
          a2 && a2(e3), e3.defaultPrevented || S2(e3);
        }, ref: t2, target: m2 }));
      }), U = i.forwardRef(function(e2, t2) {
        let { "aria-current": n2 = "page", caseSensitive: a2 = false, className: u2 = "", end: l2 = false, style: f2, to: d2, viewTransition: m2, children: p2 } = e2, v2 = c(e2, g), h2 = r.useResolvedPath(d2, { relative: v2.relative }), b2 = r.useLocation(), y2 = i.useContext(r.UNSAFE_DataRouterStateContext), { navigator: w2, basename: R2 } = i.useContext(r.UNSAFE_NavigationContext), S2 = null != y2 && G(h2) && true === m2, E2 = w2.encodeLocation ? w2.encodeLocation(h2).pathname : h2.pathname, P2 = b2.pathname, O2 = y2 && y2.navigation && y2.navigation.location ? y2.navigation.location.pathname : null;
        a2 || (P2 = P2.toLowerCase(), O2 = O2 ? O2.toLowerCase() : null, E2 = E2.toLowerCase()), O2 && R2 && (O2 = o.stripBasename(O2, R2) || O2);
        const N2 = "/" !== E2 && E2.endsWith("/") ? E2.length - 1 : E2.length;
        let _2, A2 = P2 === E2 || !l2 && P2.startsWith(E2) && "/" === P2.charAt(N2), C2 = null != O2 && (O2 === E2 || !l2 && O2.startsWith(E2) && "/" === O2.charAt(E2.length)), j2 = { isActive: A2, isPending: C2, isTransitioning: S2 }, x2 = A2 ? n2 : void 0;
        _2 = "function" == typeof u2 ? u2(j2) : [u2, A2 ? "active" : null, C2 ? "pending" : null, S2 ? "transitioning" : null].filter(Boolean).join(" ");
        let F2 = "function" == typeof f2 ? f2(j2) : f2;
        return i.createElement(T, s({}, v2, { "aria-current": x2, className: _2, ref: t2, style: F2, to: d2, viewTransition: m2 }), "function" == typeof p2 ? p2(j2) : p2);
      }), D = i.forwardRef((e2, t2) => {
        let { fetcherKey: n2, navigate: r2, reloadDocument: o2, replace: a2, state: u2, method: f2 = l, action: d2, onSubmit: m2, relative: p2, preventScrollReset: v2, viewTransition: h2 } = e2, b2 = c(e2, w), y2 = z(), g2 = q(d2, { relative: p2 }), R2 = "get" === f2.toLowerCase() ? "get" : "post";
        return i.createElement("form", s({ ref: t2, method: R2, action: g2, onSubmit: o2 ? m2 : (e3) => {
          if (m2 && m2(e3), e3.defaultPrevented) return;
          e3.preventDefault();
          let t3 = e3.nativeEvent.submitter, o3 = (null == t3 ? void 0 : t3.getAttribute("formmethod")) || f2;
          y2(t3 || e3.currentTarget, { fetcherKey: n2, method: o3, navigate: r2, replace: a2, state: u2, relative: p2, preventScrollReset: v2, viewTransition: h2 });
        } }, b2));
      });
      var k = function(e2) {
        return e2.UseScrollRestoration = "useScrollRestoration", e2.UseSubmit = "useSubmit", e2.UseSubmitFetcher = "useSubmitFetcher", e2.UseFetcher = "useFetcher", e2.useViewTransitionState = "useViewTransitionState", e2;
      }(k || {}), M = function(e2) {
        return e2.UseFetcher = "useFetcher", e2.UseFetchers = "useFetchers", e2.UseScrollRestoration = "useScrollRestoration", e2;
      }(M || {});
      function B(e2) {
        let t2 = i.useContext(r.UNSAFE_DataRouterContext);
        return t2 || o.UNSAFE_invariant(false), t2;
      }
      function H(e2) {
        let t2 = i.useContext(r.UNSAFE_DataRouterStateContext);
        return t2 || o.UNSAFE_invariant(false), t2;
      }
      function I(e2, t2) {
        let { target: n2, replace: o2, state: a2, preventScrollReset: u2, relative: s2, viewTransition: c2 } = void 0 === t2 ? {} : t2, l2 = r.useNavigate(), f2 = r.useLocation(), d2 = r.useResolvedPath(e2, { relative: s2 });
        return i.useCallback((t3) => {
          if (function(e3, t4) {
            return !(0 !== e3.button || t4 && "_self" !== t4 || function(e4) {
              return !!(e4.metaKey || e4.altKey || e4.ctrlKey || e4.shiftKey);
            }(e3));
          }(t3, n2)) {
            t3.preventDefault();
            let n3 = void 0 !== o2 ? o2 : r.createPath(f2) === r.createPath(d2);
            l2(e2, { replace: n3, state: a2, preventScrollReset: u2, relative: s2, viewTransition: c2 });
          }
        }, [f2, l2, d2, o2, a2, n2, e2, u2, s2, c2]);
      }
      let K = 0, V = () => "__" + String(++K) + "__";
      function z() {
        let { router: e2 } = B(k.UseSubmit), { basename: t2 } = i.useContext(r.UNSAFE_NavigationContext), n2 = r.UNSAFE_useRouteId();
        return i.useCallback(function(r2, o2) {
          void 0 === o2 && (o2 = {}), function() {
            if ("undefined" == typeof document) throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
          }();
          let { action: a2, method: i2, encType: u2, formData: s2, body: c2 } = b(r2, t2);
          if (false === o2.navigate) {
            let t3 = o2.fetcherKey || V();
            e2.fetch(t3, n2, o2.action || a2, { preventScrollReset: o2.preventScrollReset, formData: s2, body: c2, formMethod: o2.method || i2, formEncType: o2.encType || u2, flushSync: o2.flushSync });
          } else e2.navigate(o2.action || a2, { preventScrollReset: o2.preventScrollReset, formData: s2, body: c2, formMethod: o2.method || i2, formEncType: o2.encType || u2, replace: o2.replace, state: o2.state, fromRouteId: n2, flushSync: o2.flushSync, viewTransition: o2.viewTransition });
        }, [e2, t2, n2]);
      }
      function q(e2, t2) {
        let { relative: n2 } = void 0 === t2 ? {} : t2, { basename: a2 } = i.useContext(r.UNSAFE_NavigationContext), u2 = i.useContext(r.UNSAFE_RouteContext);
        u2 || o.UNSAFE_invariant(false);
        let [c2] = u2.matches.slice(-1), l2 = s({}, r.useResolvedPath(e2 || ".", { relative: n2 })), f2 = r.useLocation();
        if (null == e2) {
          l2.search = f2.search;
          let e3 = new URLSearchParams(l2.search), t3 = e3.getAll("index");
          if (t3.some((e4) => "" === e4)) {
            e3.delete("index"), t3.filter((e4) => e4).forEach((t4) => e3.append("index", t4));
            let n3 = e3.toString();
            l2.search = n3 ? "?" + n3 : "";
          }
        }
        return e2 && "." !== e2 || !c2.route.index || (l2.search = l2.search ? l2.search.replace(/^\?/, "?index&") : "?index"), "/" !== a2 && (l2.pathname = "/" === l2.pathname ? a2 : o.joinPaths([a2, l2.pathname])), r.createPath(l2);
      }
      const W = "react-router-scroll-positions";
      let Y = {};
      function J(e2) {
        let { getKey: t2, storageKey: n2 } = void 0 === e2 ? {} : e2, { router: a2 } = B(k.UseScrollRestoration), { restoreScrollPosition: u2, preventScrollReset: c2 } = H(M.UseScrollRestoration), { basename: l2 } = i.useContext(r.UNSAFE_NavigationContext), f2 = r.useLocation(), d2 = r.useMatches(), m2 = r.useNavigation();
        i.useEffect(() => (window.history.scrollRestoration = "manual", () => {
          window.history.scrollRestoration = "auto";
        }), []), function(e3, t3) {
          let { capture: n3 } = t3 || {};
          i.useEffect(() => {
            let t4 = null != n3 ? { capture: n3 } : void 0;
            return window.addEventListener("pagehide", e3, t4), () => {
              window.removeEventListener("pagehide", e3, t4);
            };
          }, [e3, n3]);
        }(i.useCallback(() => {
          if ("idle" === m2.state) {
            let e3 = (t2 ? t2(f2, d2) : null) || f2.key;
            Y[e3] = window.scrollY;
          }
          try {
            sessionStorage.setItem(n2 || W, JSON.stringify(Y));
          } catch (e3) {
          }
          window.history.scrollRestoration = "auto";
        }, [n2, t2, m2.state, f2, d2])), "undefined" != typeof document && (i.useLayoutEffect(() => {
          try {
            let e3 = sessionStorage.getItem(n2 || W);
            e3 && (Y = JSON.parse(e3));
          } catch (e3) {
          }
        }, [n2]), i.useLayoutEffect(() => {
          let e3 = t2 && "/" !== l2 ? (e4, n4) => t2(s({}, e4, { pathname: o.stripBasename(e4.pathname, l2) || e4.pathname }), n4) : t2, n3 = null == a2 ? void 0 : a2.enableScrollRestoration(Y, () => window.scrollY, e3);
          return () => n3 && n3();
        }, [a2, l2, t2]), i.useLayoutEffect(() => {
          if (false !== u2) if ("number" != typeof u2) {
            if (f2.hash) {
              let e3 = document.getElementById(decodeURIComponent(f2.hash.slice(1)));
              if (e3) return void e3.scrollIntoView();
            }
            true !== c2 && window.scrollTo(0, 0);
          } else window.scrollTo(0, u2);
        }, [f2, u2, c2]));
      }
      function G(e2, t2) {
        void 0 === t2 && (t2 = {});
        let n2 = i.useContext(E);
        null == n2 && o.UNSAFE_invariant(false);
        let { basename: a2 } = B(k.useViewTransitionState), u2 = r.useResolvedPath(e2, { relative: t2.relative });
        if (!n2.isTransitioning) return false;
        let s2 = o.stripBasename(n2.currentLocation.pathname, a2) || n2.currentLocation.pathname, c2 = o.stripBasename(n2.nextLocation.pathname, a2) || n2.nextLocation.pathname;
        return null != o.matchPath(u2.pathname, c2) || null != o.matchPath(u2.pathname, s2);
      }
      Object.defineProperty(e, "AbortedDeferredError", { enumerable: true, get: function() {
        return r.AbortedDeferredError;
      } }), Object.defineProperty(e, "Await", { enumerable: true, get: function() {
        return r.Await;
      } }), Object.defineProperty(e, "MemoryRouter", { enumerable: true, get: function() {
        return r.MemoryRouter;
      } }), Object.defineProperty(e, "Navigate", { enumerable: true, get: function() {
        return r.Navigate;
      } }), Object.defineProperty(e, "NavigationType", { enumerable: true, get: function() {
        return r.NavigationType;
      } }), Object.defineProperty(e, "Outlet", { enumerable: true, get: function() {
        return r.Outlet;
      } }), Object.defineProperty(e, "Route", { enumerable: true, get: function() {
        return r.Route;
      } }), Object.defineProperty(e, "Router", { enumerable: true, get: function() {
        return r.Router;
      } }), Object.defineProperty(e, "Routes", { enumerable: true, get: function() {
        return r.Routes;
      } }), Object.defineProperty(e, "UNSAFE_DataRouterContext", { enumerable: true, get: function() {
        return r.UNSAFE_DataRouterContext;
      } }), Object.defineProperty(e, "UNSAFE_DataRouterStateContext", { enumerable: true, get: function() {
        return r.UNSAFE_DataRouterStateContext;
      } }), Object.defineProperty(e, "UNSAFE_LocationContext", { enumerable: true, get: function() {
        return r.UNSAFE_LocationContext;
      } }), Object.defineProperty(e, "UNSAFE_NavigationContext", { enumerable: true, get: function() {
        return r.UNSAFE_NavigationContext;
      } }), Object.defineProperty(e, "UNSAFE_RouteContext", { enumerable: true, get: function() {
        return r.UNSAFE_RouteContext;
      } }), Object.defineProperty(e, "UNSAFE_useRouteId", { enumerable: true, get: function() {
        return r.UNSAFE_useRouteId;
      } }), Object.defineProperty(e, "createMemoryRouter", { enumerable: true, get: function() {
        return r.createMemoryRouter;
      } }), Object.defineProperty(e, "createPath", { enumerable: true, get: function() {
        return r.createPath;
      } }), Object.defineProperty(e, "createRoutesFromChildren", { enumerable: true, get: function() {
        return r.createRoutesFromChildren;
      } }), Object.defineProperty(e, "createRoutesFromElements", { enumerable: true, get: function() {
        return r.createRoutesFromElements;
      } }), Object.defineProperty(e, "defer", { enumerable: true, get: function() {
        return r.defer;
      } }), Object.defineProperty(e, "generatePath", { enumerable: true, get: function() {
        return r.generatePath;
      } }), Object.defineProperty(e, "isRouteErrorResponse", { enumerable: true, get: function() {
        return r.isRouteErrorResponse;
      } }), Object.defineProperty(e, "json", { enumerable: true, get: function() {
        return r.json;
      } }), Object.defineProperty(e, "matchPath", { enumerable: true, get: function() {
        return r.matchPath;
      } }), Object.defineProperty(e, "matchRoutes", { enumerable: true, get: function() {
        return r.matchRoutes;
      } }), Object.defineProperty(e, "parsePath", { enumerable: true, get: function() {
        return r.parsePath;
      } }), Object.defineProperty(e, "redirect", { enumerable: true, get: function() {
        return r.redirect;
      } }), Object.defineProperty(e, "redirectDocument", { enumerable: true, get: function() {
        return r.redirectDocument;
      } }), Object.defineProperty(e, "renderMatches", { enumerable: true, get: function() {
        return r.renderMatches;
      } }), Object.defineProperty(e, "replace", { enumerable: true, get: function() {
        return r.replace;
      } }), Object.defineProperty(e, "resolvePath", { enumerable: true, get: function() {
        return r.resolvePath;
      } }), Object.defineProperty(e, "useActionData", { enumerable: true, get: function() {
        return r.useActionData;
      } }), Object.defineProperty(e, "useAsyncError", { enumerable: true, get: function() {
        return r.useAsyncError;
      } }), Object.defineProperty(e, "useAsyncValue", { enumerable: true, get: function() {
        return r.useAsyncValue;
      } }), Object.defineProperty(e, "useBlocker", { enumerable: true, get: function() {
        return r.useBlocker;
      } }), Object.defineProperty(e, "useHref", { enumerable: true, get: function() {
        return r.useHref;
      } }), Object.defineProperty(e, "useInRouterContext", { enumerable: true, get: function() {
        return r.useInRouterContext;
      } }), Object.defineProperty(e, "useLoaderData", { enumerable: true, get: function() {
        return r.useLoaderData;
      } }), Object.defineProperty(e, "useLocation", { enumerable: true, get: function() {
        return r.useLocation;
      } }), Object.defineProperty(e, "useMatch", { enumerable: true, get: function() {
        return r.useMatch;
      } }), Object.defineProperty(e, "useMatches", { enumerable: true, get: function() {
        return r.useMatches;
      } }), Object.defineProperty(e, "useNavigate", { enumerable: true, get: function() {
        return r.useNavigate;
      } }), Object.defineProperty(e, "useNavigation", { enumerable: true, get: function() {
        return r.useNavigation;
      } }), Object.defineProperty(e, "useNavigationType", { enumerable: true, get: function() {
        return r.useNavigationType;
      } }), Object.defineProperty(e, "useOutlet", { enumerable: true, get: function() {
        return r.useOutlet;
      } }), Object.defineProperty(e, "useOutletContext", { enumerable: true, get: function() {
        return r.useOutletContext;
      } }), Object.defineProperty(e, "useParams", { enumerable: true, get: function() {
        return r.useParams;
      } }), Object.defineProperty(e, "useResolvedPath", { enumerable: true, get: function() {
        return r.useResolvedPath;
      } }), Object.defineProperty(e, "useRevalidator", { enumerable: true, get: function() {
        return r.useRevalidator;
      } }), Object.defineProperty(e, "useRouteError", { enumerable: true, get: function() {
        return r.useRouteError;
      } }), Object.defineProperty(e, "useRouteLoaderData", { enumerable: true, get: function() {
        return r.useRouteLoaderData;
      } }), Object.defineProperty(e, "useRoutes", { enumerable: true, get: function() {
        return r.useRoutes;
      } }), Object.defineProperty(e, "UNSAFE_ErrorResponseImpl", { enumerable: true, get: function() {
        return o.UNSAFE_ErrorResponseImpl;
      } }), e.BrowserRouter = function(e2) {
        let { basename: t2, children: n2, future: a2, window: u2 } = e2, s2 = i.useRef();
        null == s2.current && (s2.current = o.createBrowserHistory({ window: u2, v5Compat: true }));
        let c2 = s2.current, [l2, f2] = i.useState({ action: c2.action, location: c2.location }), { v7_startTransition: d2 } = a2 || {}, m2 = i.useCallback((e3) => {
          d2 && O ? O(() => f2(e3)) : f2(e3);
        }, [f2, d2]);
        return i.useLayoutEffect(() => c2.listen(m2), [c2, m2]), i.createElement(r.Router, { basename: t2, children: n2, location: l2.location, navigationType: l2.action, navigator: c2, future: a2 });
      }, e.Form = D, e.HashRouter = function(e2) {
        let { basename: t2, children: n2, future: a2, window: u2 } = e2, s2 = i.useRef();
        null == s2.current && (s2.current = o.createHashHistory({ window: u2, v5Compat: true }));
        let c2 = s2.current, [l2, f2] = i.useState({ action: c2.action, location: c2.location }), { v7_startTransition: d2 } = a2 || {}, m2 = i.useCallback((e3) => {
          d2 && O ? O(() => f2(e3)) : f2(e3);
        }, [f2, d2]);
        return i.useLayoutEffect(() => c2.listen(m2), [c2, m2]), i.createElement(r.Router, { basename: t2, children: n2, location: l2.location, navigationType: l2.action, navigator: c2, future: a2 });
      }, e.Link = T, e.NavLink = U, e.RouterProvider = function(e2) {
        let { fallbackElement: t2, router: n2, future: o2 } = e2, [a2, u2] = i.useState(n2.state), [s2, c2] = i.useState(), [l2, f2] = i.useState({ isTransitioning: false }), [d2, m2] = i.useState(), [p2, v2] = i.useState(), [h2, b2] = i.useState(), y2 = i.useRef(/* @__PURE__ */ new Map()), { v7_startTransition: g2 } = o2 || {}, w2 = i.useCallback((e3) => {
          g2 ? function(e4) {
            O ? O(e4) : e4();
          }(e3) : e3();
        }, [g2]), R2 = i.useCallback((e3, t3) => {
          let { deletedFetchers: r2, flushSync: o3, viewTransitionOpts: a3 } = t3;
          r2.forEach((e4) => y2.current.delete(e4)), e3.fetchers.forEach((e4, t4) => {
            void 0 !== e4.data && y2.current.set(t4, e4.data);
          });
          let i2 = null == n2.window || null == n2.window.document || "function" != typeof n2.window.document.startViewTransition;
          if (a3 && !i2) {
            if (o3) {
              A(() => {
                p2 && (d2 && d2.resolve(), p2.skipTransition()), f2({ isTransitioning: true, flushSync: true, currentLocation: a3.currentLocation, nextLocation: a3.nextLocation });
              });
              let t4 = n2.window.document.startViewTransition(() => {
                A(() => u2(e3));
              });
              return t4.finished.finally(() => {
                A(() => {
                  m2(void 0), v2(void 0), c2(void 0), f2({ isTransitioning: false });
                });
              }), void A(() => v2(t4));
            }
            p2 ? (d2 && d2.resolve(), p2.skipTransition(), b2({ state: e3, currentLocation: a3.currentLocation, nextLocation: a3.nextLocation })) : (c2(e3), f2({ isTransitioning: true, flushSync: false, currentLocation: a3.currentLocation, nextLocation: a3.nextLocation }));
          } else o3 ? A(() => u2(e3)) : w2(() => u2(e3));
        }, [n2.window, p2, d2, y2, w2]);
        i.useLayoutEffect(() => n2.subscribe(R2), [n2, R2]), i.useEffect(() => {
          l2.isTransitioning && !l2.flushSync && m2(new C());
        }, [l2]), i.useEffect(() => {
          if (d2 && s2 && n2.window) {
            let e3 = s2, t3 = d2.promise, r2 = n2.window.document.startViewTransition(async () => {
              w2(() => u2(e3)), await t3;
            });
            r2.finished.finally(() => {
              m2(void 0), v2(void 0), c2(void 0), f2({ isTransitioning: false });
            }), v2(r2);
          }
        }, [w2, s2, d2, n2.window]), i.useEffect(() => {
          d2 && s2 && a2.location.key === s2.location.key && d2.resolve();
        }, [d2, p2, a2.location, s2]), i.useEffect(() => {
          !l2.isTransitioning && h2 && (c2(h2.state), f2({ isTransitioning: true, flushSync: false, currentLocation: h2.currentLocation, nextLocation: h2.nextLocation }), b2(void 0));
        }, [l2.isTransitioning, h2]), i.useEffect(() => {
        }, []);
        let S2 = i.useMemo(() => ({ createHref: n2.createHref, encodeLocation: n2.encodeLocation, go: (e3) => n2.navigate(e3), push: (e3, t3, r2) => n2.navigate(e3, { state: t3, preventScrollReset: null == r2 ? void 0 : r2.preventScrollReset }), replace: (e3, t3, r2) => n2.navigate(e3, { replace: true, state: t3, preventScrollReset: null == r2 ? void 0 : r2.preventScrollReset }) }), [n2]), N2 = n2.basename || "/", _2 = i.useMemo(() => ({ router: n2, navigator: S2, static: false, basename: N2 }), [n2, S2, N2]), x2 = i.useMemo(() => ({ v7_relativeSplatPath: n2.future.v7_relativeSplatPath }), [n2.future.v7_relativeSplatPath]);
        return i.createElement(i.Fragment, null, i.createElement(r.UNSAFE_DataRouterContext.Provider, { value: _2 }, i.createElement(r.UNSAFE_DataRouterStateContext.Provider, { value: a2 }, i.createElement(P.Provider, { value: y2.current }, i.createElement(E.Provider, { value: l2 }, i.createElement(r.Router, { basename: N2, location: a2.location, navigationType: a2.historyAction, navigator: S2, future: x2 }, a2.initialized || n2.future.v7_partialHydration ? i.createElement(j, { routes: n2.routes, future: n2.future, state: a2 }) : t2))))), null);
      }, e.ScrollRestoration = function(e2) {
        let { getKey: t2, storageKey: n2 } = e2;
        return J({ getKey: t2, storageKey: n2 }), null;
      }, e.UNSAFE_FetchersContext = P, e.UNSAFE_ViewTransitionContext = E, e.UNSAFE_useScrollRestoration = J, e.createBrowserRouter = function(e2, t2) {
        return o.createRouter({ basename: null == t2 ? void 0 : t2.basename, future: s({}, null == t2 ? void 0 : t2.future, { v7_prependBasename: true }), history: o.createBrowserHistory({ window: null == t2 ? void 0 : t2.window }), hydrationData: (null == t2 ? void 0 : t2.hydrationData) || R(), routes: e2, mapRouteProperties: r.UNSAFE_mapRouteProperties, dataStrategy: null == t2 ? void 0 : t2.dataStrategy, patchRoutesOnNavigation: null == t2 ? void 0 : t2.patchRoutesOnNavigation, window: null == t2 ? void 0 : t2.window }).initialize();
      }, e.createHashRouter = function(e2, t2) {
        return o.createRouter({ basename: null == t2 ? void 0 : t2.basename, future: s({}, null == t2 ? void 0 : t2.future, { v7_prependBasename: true }), history: o.createHashHistory({ window: null == t2 ? void 0 : t2.window }), hydrationData: (null == t2 ? void 0 : t2.hydrationData) || R(), routes: e2, mapRouteProperties: r.UNSAFE_mapRouteProperties, dataStrategy: null == t2 ? void 0 : t2.dataStrategy, patchRoutesOnNavigation: null == t2 ? void 0 : t2.patchRoutesOnNavigation, window: null == t2 ? void 0 : t2.window }).initialize();
      }, e.createSearchParams = m, e.unstable_HistoryRouter = function(e2) {
        let { basename: t2, children: n2, future: o2, history: a2 } = e2, [u2, s2] = i.useState({ action: a2.action, location: a2.location }), { v7_startTransition: c2 } = o2 || {}, l2 = i.useCallback((e3) => {
          c2 && O ? O(() => s2(e3)) : s2(e3);
        }, [s2, c2]);
        return i.useLayoutEffect(() => a2.listen(l2), [a2, l2]), i.createElement(r.Router, { basename: t2, children: n2, location: u2.location, navigationType: u2.action, navigator: a2, future: o2 });
      }, e.unstable_usePrompt = function(e2) {
        let { when: t2, message: n2 } = e2, o2 = r.useBlocker(t2);
        i.useEffect(() => {
          if ("blocked" === o2.state) {
            window.confirm(n2) ? setTimeout(o2.proceed, 0) : o2.reset();
          }
        }, [o2, n2]), i.useEffect(() => {
          "blocked" !== o2.state || t2 || o2.reset();
        }, [o2, t2]);
      }, e.useBeforeUnload = function(e2, t2) {
        let { capture: n2 } = t2 || {};
        i.useEffect(() => {
          let t3 = null != n2 ? { capture: n2 } : void 0;
          return window.addEventListener("beforeunload", e2, t3), () => {
            window.removeEventListener("beforeunload", e2, t3);
          };
        }, [e2, n2]);
      }, e.useFetcher = function(e2) {
        var t2;
        let { key: n2 } = void 0 === e2 ? {} : e2, { router: a2 } = B(k.UseFetcher), u2 = H(M.UseFetcher), c2 = i.useContext(P), l2 = i.useContext(r.UNSAFE_RouteContext), f2 = null == (t2 = l2.matches[l2.matches.length - 1]) ? void 0 : t2.route.id;
        c2 || o.UNSAFE_invariant(false), l2 || o.UNSAFE_invariant(false), null == f2 && o.UNSAFE_invariant(false);
        let d2 = _ ? _() : "", [m2, p2] = i.useState(n2 || d2);
        n2 && n2 !== m2 ? p2(n2) : m2 || p2(V()), i.useEffect(() => (a2.getFetcher(m2), () => {
          a2.deleteFetcher(m2);
        }), [a2, m2]);
        let v2 = i.useCallback((e3, t3) => {
          f2 || o.UNSAFE_invariant(false), a2.fetch(m2, f2, e3, t3);
        }, [m2, f2, a2]), h2 = z(), b2 = i.useCallback((e3, t3) => {
          h2(e3, s({}, t3, { navigate: false, fetcherKey: m2 }));
        }, [m2, h2]), y2 = i.useMemo(() => i.forwardRef((e3, t3) => i.createElement(D, s({}, e3, { navigate: false, fetcherKey: m2, ref: t3 }))), [m2]), g2 = u2.fetchers.get(m2) || o.IDLE_FETCHER, w2 = c2.get(m2);
        return i.useMemo(() => s({ Form: y2, submit: b2, load: v2 }, g2, { data: w2 }), [y2, b2, v2, g2, w2]);
      }, e.useFetchers = function() {
        let e2 = H(M.UseFetchers);
        return Array.from(e2.fetchers.entries()).map((e3) => {
          let [t2, n2] = e3;
          return s({}, n2, { key: t2 });
        });
      }, e.useFormAction = q, e.useLinkClickHandler = I, e.useSearchParams = function(e2) {
        let t2 = i.useRef(m(e2)), n2 = i.useRef(false), o2 = r.useLocation(), a2 = i.useMemo(() => function(e3, t3) {
          let n3 = m(e3);
          return t3 && t3.forEach((e4, r2) => {
            n3.has(r2) || t3.getAll(r2).forEach((e5) => {
              n3.append(r2, e5);
            });
          }), n3;
        }(o2.search, n2.current ? null : t2.current), [o2.search]), u2 = r.useNavigate(), s2 = i.useCallback((e3, t3) => {
          const r2 = m("function" == typeof e3 ? e3(a2) : e3);
          n2.current = true, u2("?" + r2, t3);
        }, [u2, a2]);
        return [a2, s2];
      }, e.useSubmit = z, e.useViewTransitionState = G, Object.defineProperty(e, "__esModule", { value: true });
    });
  }
});

// node_modules/react-router-dom/dist/umd/react-router-dom.development.js
var require_react_router_dom_development = __commonJS({
  "node_modules/react-router-dom/dist/umd/react-router-dom.development.js"(exports, module) {
    init_react_inject();
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require_react(), require_react_dom(), require_main(), require_router_cjs()) : typeof define === "function" && define.amd ? define(["exports", "react", "react-dom", "react-router", "@remix-run/router"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.ReactRouterDOM = {}, global.React, global.ReactDOM, global.ReactRouter, global.RemixRouter));
    })(exports, function(exports2, React3, ReactDOM, reactRouter, router) {
      "use strict";
      function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React3);
      var ReactDOM__namespace = /* @__PURE__ */ _interopNamespace(ReactDOM);
      function _extends() {
        _extends = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        return _extends.apply(this, arguments);
      }
      function _objectWithoutPropertiesLoose(source, excluded) {
        if (source == null) return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0) continue;
          target[key] = source[key];
        }
        return target;
      }
      const defaultMethod = "get";
      const defaultEncType = "application/x-www-form-urlencoded";
      function isHtmlElement(object) {
        return object != null && typeof object.tagName === "string";
      }
      function isButtonElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
      }
      function isFormElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
      }
      function isInputElement(object) {
        return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
      }
      function isModifiedEvent(event) {
        return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
      }
      function shouldProcessLinkClick(event, target) {
        return event.button === 0 && // Ignore everything but left clicks
        (!target || target === "_self") && // Let browser handle "target=_blank" etc.
        !isModifiedEvent(event);
      }
      function createSearchParams(init) {
        if (init === void 0) {
          init = "";
        }
        return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
          let value = init[key];
          return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
        }, []));
      }
      function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
        let searchParams = createSearchParams(locationSearch);
        if (defaultSearchParams) {
          defaultSearchParams.forEach((_, key) => {
            if (!searchParams.has(key)) {
              defaultSearchParams.getAll(key).forEach((value) => {
                searchParams.append(key, value);
              });
            }
          });
        }
        return searchParams;
      }
      let _formDataSupportsSubmitter = null;
      function isFormDataSubmitterSupported() {
        if (_formDataSupportsSubmitter === null) {
          try {
            new FormData(
              document.createElement("form"),
              // @ts-expect-error if FormData supports the submitter parameter, this will throw
              0
            );
            _formDataSupportsSubmitter = false;
          } catch (e) {
            _formDataSupportsSubmitter = true;
          }
        }
        return _formDataSupportsSubmitter;
      }
      const supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
      function getFormEncType(encType) {
        if (encType != null && !supportedFormEncTypes.has(encType)) {
          router.UNSAFE_warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"'));
          return null;
        }
        return encType;
      }
      function getFormSubmissionInfo(target, basename) {
        let method;
        let action;
        let encType;
        let formData;
        let body;
        if (isFormElement(target)) {
          let attr = target.getAttribute("action");
          action = attr ? router.stripBasename(attr, basename) : null;
          method = target.getAttribute("method") || defaultMethod;
          encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
          formData = new FormData(target);
        } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
          let form = target.form;
          if (form == null) {
            throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
          }
          let attr = target.getAttribute("formaction") || form.getAttribute("action");
          action = attr ? router.stripBasename(attr, basename) : null;
          method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
          encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
          formData = new FormData(form, target);
          if (!isFormDataSubmitterSupported()) {
            let {
              name,
              type,
              value
            } = target;
            if (type === "image") {
              let prefix = name ? name + "." : "";
              formData.append(prefix + "x", "0");
              formData.append(prefix + "y", "0");
            } else if (name) {
              formData.append(name, value);
            }
          }
        } else if (isHtmlElement(target)) {
          throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
        } else {
          method = defaultMethod;
          action = null;
          encType = defaultEncType;
          body = target;
        }
        if (formData && encType === "text/plain") {
          body = formData;
          formData = void 0;
        }
        return {
          action,
          method: method.toLowerCase(),
          encType,
          formData,
          body
        };
      }
      const _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"], _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
      const REACT_ROUTER_VERSION = "6";
      try {
        window.__reactRouterVersion = REACT_ROUTER_VERSION;
      } catch (e) {
      }
      function createBrowserRouter(routes, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
          }),
          history: router.createBrowserHistory({
            window: opts == null ? void 0 : opts.window
          }),
          hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
          routes,
          mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties,
          dataStrategy: opts == null ? void 0 : opts.dataStrategy,
          patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
          window: opts == null ? void 0 : opts.window
        }).initialize();
      }
      function createHashRouter(routes, opts) {
        return router.createRouter({
          basename: opts == null ? void 0 : opts.basename,
          future: _extends({}, opts == null ? void 0 : opts.future, {
            v7_prependBasename: true
          }),
          history: router.createHashHistory({
            window: opts == null ? void 0 : opts.window
          }),
          hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
          routes,
          mapRouteProperties: reactRouter.UNSAFE_mapRouteProperties,
          dataStrategy: opts == null ? void 0 : opts.dataStrategy,
          patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
          window: opts == null ? void 0 : opts.window
        }).initialize();
      }
      function parseHydrationData() {
        var _window;
        let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
        if (state && state.errors) {
          state = _extends({}, state, {
            errors: deserializeErrors(state.errors)
          });
        }
        return state;
      }
      function deserializeErrors(errors) {
        if (!errors) return null;
        let entries = Object.entries(errors);
        let serialized = {};
        for (let [key, val] of entries) {
          if (val && val.__type === "RouteErrorResponse") {
            serialized[key] = new router.UNSAFE_ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
          } else if (val && val.__type === "Error") {
            if (val.__subType) {
              let ErrorConstructor = window[val.__subType];
              if (typeof ErrorConstructor === "function") {
                try {
                  let error = new ErrorConstructor(val.message);
                  error.stack = "";
                  serialized[key] = error;
                } catch (e) {
                }
              }
            }
            if (serialized[key] == null) {
              let error = new Error(val.message);
              error.stack = "";
              serialized[key] = error;
            }
          } else {
            serialized[key] = val;
          }
        }
        return serialized;
      }
      const ViewTransitionContext = /* @__PURE__ */ React__namespace.createContext({
        isTransitioning: false
      });
      {
        ViewTransitionContext.displayName = "ViewTransition";
      }
      const FetchersContext = /* @__PURE__ */ React__namespace.createContext(/* @__PURE__ */ new Map());
      {
        FetchersContext.displayName = "Fetchers";
      }
      const START_TRANSITION = "startTransition";
      const startTransitionImpl = React__namespace[START_TRANSITION];
      const FLUSH_SYNC = "flushSync";
      const flushSyncImpl = ReactDOM__namespace[FLUSH_SYNC];
      const USE_ID = "useId";
      const useIdImpl = React__namespace[USE_ID];
      function startTransitionSafe(cb) {
        if (startTransitionImpl) {
          startTransitionImpl(cb);
        } else {
          cb();
        }
      }
      function flushSyncSafe(cb) {
        if (flushSyncImpl) {
          flushSyncImpl(cb);
        } else {
          cb();
        }
      }
      class Deferred {
        // @ts-expect-error - no initializer
        // @ts-expect-error - no initializer
        constructor() {
          this.status = "pending";
          this.promise = new Promise((resolve, reject) => {
            this.resolve = (value) => {
              if (this.status === "pending") {
                this.status = "resolved";
                resolve(value);
              }
            };
            this.reject = (reason) => {
              if (this.status === "pending") {
                this.status = "rejected";
                reject(reason);
              }
            };
          });
        }
      }
      function RouterProvider(_ref) {
        let {
          fallbackElement,
          router: router$1,
          future
        } = _ref;
        let [state, setStateImpl] = React__namespace.useState(router$1.state);
        let [pendingState, setPendingState] = React__namespace.useState();
        let [vtContext, setVtContext] = React__namespace.useState({
          isTransitioning: false
        });
        let [renderDfd, setRenderDfd] = React__namespace.useState();
        let [transition, setTransition] = React__namespace.useState();
        let [interruption, setInterruption] = React__namespace.useState();
        let fetcherData = React__namespace.useRef(/* @__PURE__ */ new Map());
        let {
          v7_startTransition
        } = future || {};
        let optInStartTransition = React__namespace.useCallback((cb) => {
          if (v7_startTransition) {
            startTransitionSafe(cb);
          } else {
            cb();
          }
        }, [v7_startTransition]);
        let setState = React__namespace.useCallback((newState, _ref2) => {
          let {
            deletedFetchers,
            flushSync,
            viewTransitionOpts
          } = _ref2;
          deletedFetchers.forEach((key) => fetcherData.current.delete(key));
          newState.fetchers.forEach((fetcher, key) => {
            if (fetcher.data !== void 0) {
              fetcherData.current.set(key, fetcher.data);
            }
          });
          let isViewTransitionUnavailable = router$1.window == null || router$1.window.document == null || typeof router$1.window.document.startViewTransition !== "function";
          if (!viewTransitionOpts || isViewTransitionUnavailable) {
            if (flushSync) {
              flushSyncSafe(() => setStateImpl(newState));
            } else {
              optInStartTransition(() => setStateImpl(newState));
            }
            return;
          }
          if (flushSync) {
            flushSyncSafe(() => {
              if (transition) {
                renderDfd && renderDfd.resolve();
                transition.skipTransition();
              }
              setVtContext({
                isTransitioning: true,
                flushSync: true,
                currentLocation: viewTransitionOpts.currentLocation,
                nextLocation: viewTransitionOpts.nextLocation
              });
            });
            let t = router$1.window.document.startViewTransition(() => {
              flushSyncSafe(() => setStateImpl(newState));
            });
            t.finished.finally(() => {
              flushSyncSafe(() => {
                setRenderDfd(void 0);
                setTransition(void 0);
                setPendingState(void 0);
                setVtContext({
                  isTransitioning: false
                });
              });
            });
            flushSyncSafe(() => setTransition(t));
            return;
          }
          if (transition) {
            renderDfd && renderDfd.resolve();
            transition.skipTransition();
            setInterruption({
              state: newState,
              currentLocation: viewTransitionOpts.currentLocation,
              nextLocation: viewTransitionOpts.nextLocation
            });
          } else {
            setPendingState(newState);
            setVtContext({
              isTransitioning: true,
              flushSync: false,
              currentLocation: viewTransitionOpts.currentLocation,
              nextLocation: viewTransitionOpts.nextLocation
            });
          }
        }, [router$1.window, transition, renderDfd, fetcherData, optInStartTransition]);
        React__namespace.useLayoutEffect(() => router$1.subscribe(setState), [router$1, setState]);
        React__namespace.useEffect(() => {
          if (vtContext.isTransitioning && !vtContext.flushSync) {
            setRenderDfd(new Deferred());
          }
        }, [vtContext]);
        React__namespace.useEffect(() => {
          if (renderDfd && pendingState && router$1.window) {
            let newState = pendingState;
            let renderPromise = renderDfd.promise;
            let transition2 = router$1.window.document.startViewTransition(async () => {
              optInStartTransition(() => setStateImpl(newState));
              await renderPromise;
            });
            transition2.finished.finally(() => {
              setRenderDfd(void 0);
              setTransition(void 0);
              setPendingState(void 0);
              setVtContext({
                isTransitioning: false
              });
            });
            setTransition(transition2);
          }
        }, [optInStartTransition, pendingState, renderDfd, router$1.window]);
        React__namespace.useEffect(() => {
          if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
            renderDfd.resolve();
          }
        }, [renderDfd, transition, state.location, pendingState]);
        React__namespace.useEffect(() => {
          if (!vtContext.isTransitioning && interruption) {
            setPendingState(interruption.state);
            setVtContext({
              isTransitioning: true,
              flushSync: false,
              currentLocation: interruption.currentLocation,
              nextLocation: interruption.nextLocation
            });
            setInterruption(void 0);
          }
        }, [vtContext.isTransitioning, interruption]);
        React__namespace.useEffect(() => {
          router.UNSAFE_warning(fallbackElement == null || !router$1.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
        }, []);
        let navigator2 = React__namespace.useMemo(() => {
          return {
            createHref: router$1.createHref,
            encodeLocation: router$1.encodeLocation,
            go: (n) => router$1.navigate(n),
            push: (to, state2, opts) => router$1.navigate(to, {
              state: state2,
              preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
            }),
            replace: (to, state2, opts) => router$1.navigate(to, {
              replace: true,
              state: state2,
              preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
            })
          };
        }, [router$1]);
        let basename = router$1.basename || "/";
        let dataRouterContext = React__namespace.useMemo(() => ({
          router: router$1,
          navigator: navigator2,
          static: false,
          basename
        }), [router$1, navigator2, basename]);
        let routerFuture = React__namespace.useMemo(() => ({
          v7_relativeSplatPath: router$1.future.v7_relativeSplatPath
        }), [router$1.future.v7_relativeSplatPath]);
        return /* @__PURE__ */ React__namespace.createElement(React__namespace.Fragment, null, /* @__PURE__ */ React__namespace.createElement(reactRouter.UNSAFE_DataRouterContext.Provider, {
          value: dataRouterContext
        }, /* @__PURE__ */ React__namespace.createElement(reactRouter.UNSAFE_DataRouterStateContext.Provider, {
          value: state
        }, /* @__PURE__ */ React__namespace.createElement(FetchersContext.Provider, {
          value: fetcherData.current
        }, /* @__PURE__ */ React__namespace.createElement(ViewTransitionContext.Provider, {
          value: vtContext
        }, /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          location: state.location,
          navigationType: state.historyAction,
          navigator: navigator2,
          future: routerFuture
        }, state.initialized || router$1.future.v7_partialHydration ? /* @__PURE__ */ React__namespace.createElement(MemoizedDataRoutes, {
          routes: router$1.routes,
          future: router$1.future,
          state
        }) : fallbackElement))))), null);
      }
      const MemoizedDataRoutes = /* @__PURE__ */ React__namespace.memo(DataRoutes);
      function DataRoutes(_ref3) {
        let {
          routes,
          future,
          state
        } = _ref3;
        return reactRouter.UNSAFE_useRoutesImpl(routes, void 0, state, future);
      }
      function BrowserRouter(_ref4) {
        let {
          basename,
          children,
          future,
          window: window2
        } = _ref4;
        let historyRef = React__namespace.useRef();
        if (historyRef.current == null) {
          historyRef.current = router.createBrowserHistory({
            window: window2,
            v5Compat: true
          });
        }
        let history = historyRef.current;
        let [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        });
        let {
          v7_startTransition
        } = future || {};
        let setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
        return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history,
          future
        });
      }
      function HashRouter(_ref5) {
        let {
          basename,
          children,
          future,
          window: window2
        } = _ref5;
        let historyRef = React__namespace.useRef();
        if (historyRef.current == null) {
          historyRef.current = router.createHashHistory({
            window: window2,
            v5Compat: true
          });
        }
        let history = historyRef.current;
        let [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        });
        let {
          v7_startTransition
        } = future || {};
        let setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
        return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history,
          future
        });
      }
      function HistoryRouter(_ref6) {
        let {
          basename,
          children,
          future,
          history
        } = _ref6;
        let [state, setStateImpl] = React__namespace.useState({
          action: history.action,
          location: history.location
        });
        let {
          v7_startTransition
        } = future || {};
        let setState = React__namespace.useCallback((newState) => {
          v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
        }, [setStateImpl, v7_startTransition]);
        React__namespace.useLayoutEffect(() => history.listen(setState), [history, setState]);
        return /* @__PURE__ */ React__namespace.createElement(reactRouter.Router, {
          basename,
          children,
          location: state.location,
          navigationType: state.action,
          navigator: history,
          future
        });
      }
      {
        HistoryRouter.displayName = "unstable_HistoryRouter";
      }
      const isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
      const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
      const Link2 = /* @__PURE__ */ React__namespace.forwardRef(function LinkWithRef(_ref7, ref) {
        let {
          onClick,
          relative,
          reloadDocument,
          replace,
          state,
          target,
          to,
          preventScrollReset,
          viewTransition
        } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
        let {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        let absoluteHref;
        let isExternal = false;
        if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
          absoluteHref = to;
          if (isBrowser) {
            try {
              let currentUrl = new URL(window.location.href);
              let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
              let path = router.stripBasename(targetUrl.pathname, basename);
              if (targetUrl.origin === currentUrl.origin && path != null) {
                to = path + targetUrl.search + targetUrl.hash;
              } else {
                isExternal = true;
              }
            } catch (e) {
              router.UNSAFE_warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.');
            }
          }
        }
        let href = reactRouter.useHref(to, {
          relative
        });
        let internalOnClick = useLinkClickHandler(to, {
          replace,
          state,
          target,
          preventScrollReset,
          relative,
          viewTransition
        });
        function handleClick(event) {
          if (onClick) onClick(event);
          if (!event.defaultPrevented) {
            internalOnClick(event);
          }
        }
        return (
          // eslint-disable-next-line jsx-a11y/anchor-has-content
          /* @__PURE__ */ React__namespace.createElement("a", _extends({}, rest, {
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref,
            target
          }))
        );
      });
      {
        Link2.displayName = "Link";
      }
      const NavLink = /* @__PURE__ */ React__namespace.forwardRef(function NavLinkWithRef(_ref8, ref) {
        let {
          "aria-current": ariaCurrentProp = "page",
          caseSensitive = false,
          className: classNameProp = "",
          end = false,
          style: styleProp,
          to,
          viewTransition,
          children
        } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
        let path = reactRouter.useResolvedPath(to, {
          relative: rest.relative
        });
        let location = reactRouter.useLocation();
        let routerState = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);
        let {
          navigator: navigator2,
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
        // eslint-disable-next-line react-hooks/rules-of-hooks
        useViewTransitionState(path) && viewTransition === true;
        let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
        let locationPathname = location.pathname;
        let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
        if (!caseSensitive) {
          locationPathname = locationPathname.toLowerCase();
          nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
          toPathname = toPathname.toLowerCase();
        }
        if (nextLocationPathname && basename) {
          nextLocationPathname = router.stripBasename(nextLocationPathname, basename) || nextLocationPathname;
        }
        const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
        let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
        let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
        let renderProps = {
          isActive,
          isPending,
          isTransitioning
        };
        let ariaCurrent = isActive ? ariaCurrentProp : void 0;
        let className;
        if (typeof classNameProp === "function") {
          className = classNameProp(renderProps);
        } else {
          className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
        }
        let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
        return /* @__PURE__ */ React__namespace.createElement(Link2, _extends({}, rest, {
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        }), typeof children === "function" ? children(renderProps) : children);
      });
      {
        NavLink.displayName = "NavLink";
      }
      const Form = /* @__PURE__ */ React__namespace.forwardRef((_ref9, forwardedRef) => {
        let {
          fetcherKey,
          navigate,
          reloadDocument,
          replace,
          state,
          method = defaultMethod,
          action,
          onSubmit,
          relative,
          preventScrollReset,
          viewTransition
        } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
        let submit = useSubmit();
        let formAction = useFormAction(action, {
          relative
        });
        let formMethod = method.toLowerCase() === "get" ? "get" : "post";
        let submitHandler = (event) => {
          onSubmit && onSubmit(event);
          if (event.defaultPrevented) return;
          event.preventDefault();
          let submitter = event.nativeEvent.submitter;
          let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
          submit(submitter || event.currentTarget, {
            fetcherKey,
            method: submitMethod,
            navigate,
            replace,
            state,
            relative,
            preventScrollReset,
            viewTransition
          });
        };
        return /* @__PURE__ */ React__namespace.createElement("form", _extends({
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler
        }, props));
      });
      {
        Form.displayName = "Form";
      }
      function ScrollRestoration(_ref10) {
        let {
          getKey,
          storageKey
        } = _ref10;
        useScrollRestoration({
          getKey,
          storageKey
        });
        return null;
      }
      {
        ScrollRestoration.displayName = "ScrollRestoration";
      }
      var DataRouterHook = /* @__PURE__ */ function(DataRouterHook2) {
        DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
        DataRouterHook2["UseSubmit"] = "useSubmit";
        DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
        DataRouterHook2["UseFetcher"] = "useFetcher";
        DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
        return DataRouterHook2;
      }(DataRouterHook || {});
      var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook2) {
        DataRouterStateHook2["UseFetcher"] = "useFetcher";
        DataRouterStateHook2["UseFetchers"] = "useFetchers";
        DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
        return DataRouterStateHook2;
      }(DataRouterStateHook || {});
      function getDataRouterConsoleError(hookName) {
        return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
      }
      function useDataRouterContext(hookName) {
        let ctx = React__namespace.useContext(reactRouter.UNSAFE_DataRouterContext);
        !ctx ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
        return ctx;
      }
      function useDataRouterState(hookName) {
        let state = React__namespace.useContext(reactRouter.UNSAFE_DataRouterStateContext);
        !state ? router.UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : void 0;
        return state;
      }
      function useLinkClickHandler(to, _temp) {
        let {
          target,
          replace: replaceProp,
          state,
          preventScrollReset,
          relative,
          viewTransition
        } = _temp === void 0 ? {} : _temp;
        let navigate = reactRouter.useNavigate();
        let location = reactRouter.useLocation();
        let path = reactRouter.useResolvedPath(to, {
          relative
        });
        return React__namespace.useCallback((event) => {
          if (shouldProcessLinkClick(event, target)) {
            event.preventDefault();
            let replace = replaceProp !== void 0 ? replaceProp : reactRouter.createPath(location) === reactRouter.createPath(path);
            navigate(to, {
              replace,
              state,
              preventScrollReset,
              relative,
              viewTransition
            });
          }
        }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
      }
      function useSearchParams(defaultInit) {
        router.UNSAFE_warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.");
        let defaultSearchParamsRef = React__namespace.useRef(createSearchParams(defaultInit));
        let hasSetSearchParamsRef = React__namespace.useRef(false);
        let location = reactRouter.useLocation();
        let searchParams = React__namespace.useMemo(() => (
          // Only merge in the defaults if we haven't yet called setSearchParams.
          // Once we call that we want those to take precedence, otherwise you can't
          // remove a param with setSearchParams({}) if it has an initial value
          getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
        ), [location.search]);
        let navigate = reactRouter.useNavigate();
        let setSearchParams = React__namespace.useCallback((nextInit, navigateOptions) => {
          const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
          hasSetSearchParamsRef.current = true;
          navigate("?" + newSearchParams, navigateOptions);
        }, [navigate, searchParams]);
        return [searchParams, setSearchParams];
      }
      function validateClientSideSubmission() {
        if (typeof document === "undefined") {
          throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
        }
      }
      let fetcherId = 0;
      let getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
      function useSubmit() {
        let {
          router: router2
        } = useDataRouterContext(DataRouterHook.UseSubmit);
        let {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        let currentRouteId = reactRouter.UNSAFE_useRouteId();
        return React__namespace.useCallback(function(target, options) {
          if (options === void 0) {
            options = {};
          }
          validateClientSideSubmission();
          let {
            action,
            method,
            encType,
            formData,
            body
          } = getFormSubmissionInfo(target, basename);
          if (options.navigate === false) {
            let key = options.fetcherKey || getUniqueFetcherId();
            router2.fetch(key, currentRouteId, options.action || action, {
              preventScrollReset: options.preventScrollReset,
              formData,
              body,
              formMethod: options.method || method,
              formEncType: options.encType || encType,
              flushSync: options.flushSync
            });
          } else {
            router2.navigate(options.action || action, {
              preventScrollReset: options.preventScrollReset,
              formData,
              body,
              formMethod: options.method || method,
              formEncType: options.encType || encType,
              replace: options.replace,
              state: options.state,
              fromRouteId: currentRouteId,
              flushSync: options.flushSync,
              viewTransition: options.viewTransition
            });
          }
        }, [router2, basename, currentRouteId]);
      }
      function useFormAction(action, _temp2) {
        let {
          relative
        } = _temp2 === void 0 ? {} : _temp2;
        let {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        let routeContext = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
        !routeContext ? router.UNSAFE_invariant(false, "useFormAction must be used inside a RouteContext") : void 0;
        let [match] = routeContext.matches.slice(-1);
        let path = _extends({}, reactRouter.useResolvedPath(action ? action : ".", {
          relative
        }));
        let location = reactRouter.useLocation();
        if (action == null) {
          path.search = location.search;
          let params = new URLSearchParams(path.search);
          let indexValues = params.getAll("index");
          let hasNakedIndexParam = indexValues.some((v) => v === "");
          if (hasNakedIndexParam) {
            params.delete("index");
            indexValues.filter((v) => v).forEach((v) => params.append("index", v));
            let qs = params.toString();
            path.search = qs ? "?" + qs : "";
          }
        }
        if ((!action || action === ".") && match.route.index) {
          path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
        }
        if (basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : router.joinPaths([basename, path.pathname]);
        }
        return reactRouter.createPath(path);
      }
      function useFetcher(_temp3) {
        var _route$matches;
        let {
          key
        } = _temp3 === void 0 ? {} : _temp3;
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseFetcher);
        let state = useDataRouterState(DataRouterStateHook.UseFetcher);
        let fetcherData = React__namespace.useContext(FetchersContext);
        let route = React__namespace.useContext(reactRouter.UNSAFE_RouteContext);
        let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
        !fetcherData ? router.UNSAFE_invariant(false, "useFetcher must be used inside a FetchersContext") : void 0;
        !route ? router.UNSAFE_invariant(false, "useFetcher must be used inside a RouteContext") : void 0;
        !(routeId != null) ? router.UNSAFE_invariant(false, 'useFetcher can only be used on routes that contain a unique "id"') : void 0;
        let defaultKey = useIdImpl ? useIdImpl() : "";
        let [fetcherKey, setFetcherKey] = React__namespace.useState(key || defaultKey);
        if (key && key !== fetcherKey) {
          setFetcherKey(key);
        } else if (!fetcherKey) {
          setFetcherKey(getUniqueFetcherId());
        }
        React__namespace.useEffect(() => {
          router$1.getFetcher(fetcherKey);
          return () => {
            router$1.deleteFetcher(fetcherKey);
          };
        }, [router$1, fetcherKey]);
        let load = React__namespace.useCallback((href, opts) => {
          !routeId ? router.UNSAFE_invariant(false, "No routeId available for fetcher.load()") : void 0;
          router$1.fetch(fetcherKey, routeId, href, opts);
        }, [fetcherKey, routeId, router$1]);
        let submitImpl = useSubmit();
        let submit = React__namespace.useCallback((target, opts) => {
          submitImpl(target, _extends({}, opts, {
            navigate: false,
            fetcherKey
          }));
        }, [fetcherKey, submitImpl]);
        let FetcherForm = React__namespace.useMemo(() => {
          let FetcherForm2 = /* @__PURE__ */ React__namespace.forwardRef((props, ref) => {
            return /* @__PURE__ */ React__namespace.createElement(Form, _extends({}, props, {
              navigate: false,
              fetcherKey,
              ref
            }));
          });
          {
            FetcherForm2.displayName = "fetcher.Form";
          }
          return FetcherForm2;
        }, [fetcherKey]);
        let fetcher = state.fetchers.get(fetcherKey) || router.IDLE_FETCHER;
        let data = fetcherData.get(fetcherKey);
        let fetcherWithComponents = React__namespace.useMemo(() => _extends({
          Form: FetcherForm,
          submit,
          load
        }, fetcher, {
          data
        }), [FetcherForm, submit, load, fetcher, data]);
        return fetcherWithComponents;
      }
      function useFetchers() {
        let state = useDataRouterState(DataRouterStateHook.UseFetchers);
        return Array.from(state.fetchers.entries()).map((_ref11) => {
          let [key, fetcher] = _ref11;
          return _extends({}, fetcher, {
            key
          });
        });
      }
      const SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
      let savedScrollPositions = {};
      function useScrollRestoration(_temp4) {
        let {
          getKey,
          storageKey
        } = _temp4 === void 0 ? {} : _temp4;
        let {
          router: router$1
        } = useDataRouterContext(DataRouterHook.UseScrollRestoration);
        let {
          restoreScrollPosition,
          preventScrollReset
        } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);
        let {
          basename
        } = React__namespace.useContext(reactRouter.UNSAFE_NavigationContext);
        let location = reactRouter.useLocation();
        let matches = reactRouter.useMatches();
        let navigation = reactRouter.useNavigation();
        React__namespace.useEffect(() => {
          window.history.scrollRestoration = "manual";
          return () => {
            window.history.scrollRestoration = "auto";
          };
        }, []);
        usePageHide(React__namespace.useCallback(() => {
          if (navigation.state === "idle") {
            let key = (getKey ? getKey(location, matches) : null) || location.key;
            savedScrollPositions[key] = window.scrollY;
          }
          try {
            sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
          } catch (error) {
            router.UNSAFE_warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").");
          }
          window.history.scrollRestoration = "auto";
        }, [storageKey, getKey, navigation.state, location, matches]));
        if (typeof document !== "undefined") {
          React__namespace.useLayoutEffect(() => {
            try {
              let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
              if (sessionPositions) {
                savedScrollPositions = JSON.parse(sessionPositions);
              }
            } catch (e) {
            }
          }, [storageKey]);
          React__namespace.useLayoutEffect(() => {
            let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
              // Strip the basename to match useLocation()
              _extends({}, location2, {
                pathname: router.stripBasename(location2.pathname, basename) || location2.pathname
              }),
              matches2
            ) : getKey;
            let disableScrollRestoration = router$1 == null ? void 0 : router$1.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
            return () => disableScrollRestoration && disableScrollRestoration();
          }, [router$1, basename, getKey]);
          React__namespace.useLayoutEffect(() => {
            if (restoreScrollPosition === false) {
              return;
            }
            if (typeof restoreScrollPosition === "number") {
              window.scrollTo(0, restoreScrollPosition);
              return;
            }
            if (location.hash) {
              let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
              if (el) {
                el.scrollIntoView();
                return;
              }
            }
            if (preventScrollReset === true) {
              return;
            }
            window.scrollTo(0, 0);
          }, [location, restoreScrollPosition, preventScrollReset]);
        }
      }
      function useBeforeUnload(callback, options) {
        let {
          capture
        } = options || {};
        React__namespace.useEffect(() => {
          let opts = capture != null ? {
            capture
          } : void 0;
          window.addEventListener("beforeunload", callback, opts);
          return () => {
            window.removeEventListener("beforeunload", callback, opts);
          };
        }, [callback, capture]);
      }
      function usePageHide(callback, options) {
        let {
          capture
        } = options || {};
        React__namespace.useEffect(() => {
          let opts = capture != null ? {
            capture
          } : void 0;
          window.addEventListener("pagehide", callback, opts);
          return () => {
            window.removeEventListener("pagehide", callback, opts);
          };
        }, [callback, capture]);
      }
      function usePrompt(_ref12) {
        let {
          when,
          message
        } = _ref12;
        let blocker = reactRouter.useBlocker(when);
        React__namespace.useEffect(() => {
          if (blocker.state === "blocked") {
            let proceed = window.confirm(message);
            if (proceed) {
              setTimeout(blocker.proceed, 0);
            } else {
              blocker.reset();
            }
          }
        }, [blocker, message]);
        React__namespace.useEffect(() => {
          if (blocker.state === "blocked" && !when) {
            blocker.reset();
          }
        }, [blocker, when]);
      }
      function useViewTransitionState(to, opts) {
        if (opts === void 0) {
          opts = {};
        }
        let vtContext = React__namespace.useContext(ViewTransitionContext);
        !(vtContext != null) ? router.UNSAFE_invariant(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : void 0;
        let {
          basename
        } = useDataRouterContext(DataRouterHook.useViewTransitionState);
        let path = reactRouter.useResolvedPath(to, {
          relative: opts.relative
        });
        if (!vtContext.isTransitioning) {
          return false;
        }
        let currentPath = router.stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
        let nextPath = router.stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
        return router.matchPath(path.pathname, nextPath) != null || router.matchPath(path.pathname, currentPath) != null;
      }
      Object.defineProperty(exports2, "AbortedDeferredError", {
        enumerable: true,
        get: function() {
          return reactRouter.AbortedDeferredError;
        }
      });
      Object.defineProperty(exports2, "Await", {
        enumerable: true,
        get: function() {
          return reactRouter.Await;
        }
      });
      Object.defineProperty(exports2, "MemoryRouter", {
        enumerable: true,
        get: function() {
          return reactRouter.MemoryRouter;
        }
      });
      Object.defineProperty(exports2, "Navigate", {
        enumerable: true,
        get: function() {
          return reactRouter.Navigate;
        }
      });
      Object.defineProperty(exports2, "NavigationType", {
        enumerable: true,
        get: function() {
          return reactRouter.NavigationType;
        }
      });
      Object.defineProperty(exports2, "Outlet", {
        enumerable: true,
        get: function() {
          return reactRouter.Outlet;
        }
      });
      Object.defineProperty(exports2, "Route", {
        enumerable: true,
        get: function() {
          return reactRouter.Route;
        }
      });
      Object.defineProperty(exports2, "Router", {
        enumerable: true,
        get: function() {
          return reactRouter.Router;
        }
      });
      Object.defineProperty(exports2, "Routes", {
        enumerable: true,
        get: function() {
          return reactRouter.Routes;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_DataRouterContext", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_DataRouterContext;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_DataRouterStateContext", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_DataRouterStateContext;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_LocationContext", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_LocationContext;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_NavigationContext", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_NavigationContext;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_RouteContext", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_RouteContext;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_useRouteId", {
        enumerable: true,
        get: function() {
          return reactRouter.UNSAFE_useRouteId;
        }
      });
      Object.defineProperty(exports2, "createMemoryRouter", {
        enumerable: true,
        get: function() {
          return reactRouter.createMemoryRouter;
        }
      });
      Object.defineProperty(exports2, "createPath", {
        enumerable: true,
        get: function() {
          return reactRouter.createPath;
        }
      });
      Object.defineProperty(exports2, "createRoutesFromChildren", {
        enumerable: true,
        get: function() {
          return reactRouter.createRoutesFromChildren;
        }
      });
      Object.defineProperty(exports2, "createRoutesFromElements", {
        enumerable: true,
        get: function() {
          return reactRouter.createRoutesFromElements;
        }
      });
      Object.defineProperty(exports2, "defer", {
        enumerable: true,
        get: function() {
          return reactRouter.defer;
        }
      });
      Object.defineProperty(exports2, "generatePath", {
        enumerable: true,
        get: function() {
          return reactRouter.generatePath;
        }
      });
      Object.defineProperty(exports2, "isRouteErrorResponse", {
        enumerable: true,
        get: function() {
          return reactRouter.isRouteErrorResponse;
        }
      });
      Object.defineProperty(exports2, "json", {
        enumerable: true,
        get: function() {
          return reactRouter.json;
        }
      });
      Object.defineProperty(exports2, "matchPath", {
        enumerable: true,
        get: function() {
          return reactRouter.matchPath;
        }
      });
      Object.defineProperty(exports2, "matchRoutes", {
        enumerable: true,
        get: function() {
          return reactRouter.matchRoutes;
        }
      });
      Object.defineProperty(exports2, "parsePath", {
        enumerable: true,
        get: function() {
          return reactRouter.parsePath;
        }
      });
      Object.defineProperty(exports2, "redirect", {
        enumerable: true,
        get: function() {
          return reactRouter.redirect;
        }
      });
      Object.defineProperty(exports2, "redirectDocument", {
        enumerable: true,
        get: function() {
          return reactRouter.redirectDocument;
        }
      });
      Object.defineProperty(exports2, "renderMatches", {
        enumerable: true,
        get: function() {
          return reactRouter.renderMatches;
        }
      });
      Object.defineProperty(exports2, "replace", {
        enumerable: true,
        get: function() {
          return reactRouter.replace;
        }
      });
      Object.defineProperty(exports2, "resolvePath", {
        enumerable: true,
        get: function() {
          return reactRouter.resolvePath;
        }
      });
      Object.defineProperty(exports2, "useActionData", {
        enumerable: true,
        get: function() {
          return reactRouter.useActionData;
        }
      });
      Object.defineProperty(exports2, "useAsyncError", {
        enumerable: true,
        get: function() {
          return reactRouter.useAsyncError;
        }
      });
      Object.defineProperty(exports2, "useAsyncValue", {
        enumerable: true,
        get: function() {
          return reactRouter.useAsyncValue;
        }
      });
      Object.defineProperty(exports2, "useBlocker", {
        enumerable: true,
        get: function() {
          return reactRouter.useBlocker;
        }
      });
      Object.defineProperty(exports2, "useHref", {
        enumerable: true,
        get: function() {
          return reactRouter.useHref;
        }
      });
      Object.defineProperty(exports2, "useInRouterContext", {
        enumerable: true,
        get: function() {
          return reactRouter.useInRouterContext;
        }
      });
      Object.defineProperty(exports2, "useLoaderData", {
        enumerable: true,
        get: function() {
          return reactRouter.useLoaderData;
        }
      });
      Object.defineProperty(exports2, "useLocation", {
        enumerable: true,
        get: function() {
          return reactRouter.useLocation;
        }
      });
      Object.defineProperty(exports2, "useMatch", {
        enumerable: true,
        get: function() {
          return reactRouter.useMatch;
        }
      });
      Object.defineProperty(exports2, "useMatches", {
        enumerable: true,
        get: function() {
          return reactRouter.useMatches;
        }
      });
      Object.defineProperty(exports2, "useNavigate", {
        enumerable: true,
        get: function() {
          return reactRouter.useNavigate;
        }
      });
      Object.defineProperty(exports2, "useNavigation", {
        enumerable: true,
        get: function() {
          return reactRouter.useNavigation;
        }
      });
      Object.defineProperty(exports2, "useNavigationType", {
        enumerable: true,
        get: function() {
          return reactRouter.useNavigationType;
        }
      });
      Object.defineProperty(exports2, "useOutlet", {
        enumerable: true,
        get: function() {
          return reactRouter.useOutlet;
        }
      });
      Object.defineProperty(exports2, "useOutletContext", {
        enumerable: true,
        get: function() {
          return reactRouter.useOutletContext;
        }
      });
      Object.defineProperty(exports2, "useParams", {
        enumerable: true,
        get: function() {
          return reactRouter.useParams;
        }
      });
      Object.defineProperty(exports2, "useResolvedPath", {
        enumerable: true,
        get: function() {
          return reactRouter.useResolvedPath;
        }
      });
      Object.defineProperty(exports2, "useRevalidator", {
        enumerable: true,
        get: function() {
          return reactRouter.useRevalidator;
        }
      });
      Object.defineProperty(exports2, "useRouteError", {
        enumerable: true,
        get: function() {
          return reactRouter.useRouteError;
        }
      });
      Object.defineProperty(exports2, "useRouteLoaderData", {
        enumerable: true,
        get: function() {
          return reactRouter.useRouteLoaderData;
        }
      });
      Object.defineProperty(exports2, "useRoutes", {
        enumerable: true,
        get: function() {
          return reactRouter.useRoutes;
        }
      });
      Object.defineProperty(exports2, "UNSAFE_ErrorResponseImpl", {
        enumerable: true,
        get: function() {
          return router.UNSAFE_ErrorResponseImpl;
        }
      });
      exports2.BrowserRouter = BrowserRouter;
      exports2.Form = Form;
      exports2.HashRouter = HashRouter;
      exports2.Link = Link2;
      exports2.NavLink = NavLink;
      exports2.RouterProvider = RouterProvider;
      exports2.ScrollRestoration = ScrollRestoration;
      exports2.UNSAFE_FetchersContext = FetchersContext;
      exports2.UNSAFE_ViewTransitionContext = ViewTransitionContext;
      exports2.UNSAFE_useScrollRestoration = useScrollRestoration;
      exports2.createBrowserRouter = createBrowserRouter;
      exports2.createHashRouter = createHashRouter;
      exports2.createSearchParams = createSearchParams;
      exports2.unstable_HistoryRouter = HistoryRouter;
      exports2.unstable_usePrompt = usePrompt;
      exports2.useBeforeUnload = useBeforeUnload;
      exports2.useFetcher = useFetcher;
      exports2.useFetchers = useFetchers;
      exports2.useFormAction = useFormAction;
      exports2.useLinkClickHandler = useLinkClickHandler;
      exports2.useSearchParams = useSearchParams;
      exports2.useSubmit = useSubmit;
      exports2.useViewTransitionState = useViewTransitionState;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/react-router-dom/dist/main.js
var require_main2 = __commonJS({
  "node_modules/react-router-dom/dist/main.js"(exports, module) {
    "use strict";
    init_react_inject();
    if (process.env.NODE_ENV === "production") {
      module.exports = require_react_router_dom_production_min();
    } else {
      module.exports = require_react_router_dom_development();
    }
  }
});

// src/pages/ArticlePage.tsx
init_react_inject();
var import_lucide_react = __toESM(require_lucide_react(), 1);
var import_react_router_dom = __toESM(require_main2(), 1);
var ArticlePage = () => {
  const article = {
    title: "Probability Machines Need Probability Managers",
    date: "June 2025",
    readTime: "4 min read",
    content: `I just read that Business Insider scoop about Citi rolling out a "Citi AI" toolkit to 150,000 employees and dabbling in "agentic AI" for fraud checks and trade confirmations. It sounds moon-shotty until you notice every workflow in the memo still ends with a human click-off\u2014Wall Street hasn't forgotten 2008 and it's not about to let a language model push buttons unsupervised.

Almost in parallel, Apple's new paper, The Illusion of Thinking, walks through why LLM "reasoning" collapses as soon as task complexity inches up. The short version is: yes, the model strings thoughts together, but underneath it's still glorified pattern matching\u2014and patterns break.

That lands close to home. My first HR tech company, softgarden, never even tried to automate decisions; it was a plain-vanilla SaaS app and\u2014looking back\u2014that was probably wise for the time. Fast-forward to my CPO role at Paul's Job and we're now building recruiting agents that chat with candidates, chase missing docs, and juggle calendars. Early customer pilots with Teamwork in Ireland and security-staffing firm VD Mayr in Munich taught us the same lesson Citi's risk folks already know: an agent can draft ten interview slots in seconds, but someone on the hiring team still has to tap "send" before the emails fly. When we left that approval step out, the bot double-booked a candidate with two different line managers. With the checkpoint back in, error rates nose-dived and nobody lost sleep.

The developer crowd quietly behaves the same way. Cursor's agent mode will refactor your repo, but its own docs warn you to "review proposed changes carefully before confirming." Windsurf's new Cascade agent markets itself as "your ultimate partner," not a replacement, and Claude Code literally stops to ask before it writes to disk\u2014Anthropic calls that a "deliberately conservative" default.

Deloitte's 2025 forecast puts numbers to the vibe: only about a quarter of companies running Gen AI will even start an agentic pilot this year; everyone else is still arguing over guardrails.

So my working theory is simple: probability machines need probability managers. The art isn't in chasing full autonomy\u2014it's in designing that tiny, well-timed moment where a person glances at the agent's draft, says "yep," and the workflow cruises on. When the loop is tight, the human touch feels like steering, not babysitting, and the bot's speed advantage still shows up on the KPI dashboard.

That's where I'm planting my flag for now. True autonomy can wait; carefully-assisted agents are already useful, deployable, and\u2014crucially\u2014trustworthy enough for real work.`
  };
  return /* @__PURE__ */ React.createElement("div", { className: "min-h-screen relative overflow-hidden" }, /* @__PURE__ */ React.createElement(
    "div",
    {
      className: "absolute inset-0",
      style: {
        background: `
            linear-gradient(-45deg, 
              #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, 
              #ffeaa7, #dda0dd, #98d8c8, #f7dc6f
            )`,
        backgroundSize: "400% 400%",
        animation: "gradientShift 15s ease infinite"
      }
    }
  ), /* @__PURE__ */ React.createElement(
    "div",
    {
      className: "absolute inset-0 opacity-20",
      style: {
        backgroundImage: `url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E")`
      }
    }
  ), /* @__PURE__ */ React.createElement("div", { className: "absolute inset-0 bg-gradient-to-t from-black/10 via-transparent to-white/5" }), /* @__PURE__ */ React.createElement("div", { className: "absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent" }), /* @__PURE__ */ React.createElement("div", { className: "relative z-10 max-w-4xl mx-auto px-6 py-12" }, /* @__PURE__ */ React.createElement(
    import_react_router_dom.Link,
    {
      to: "/",
      className: "inline-flex items-center gap-2 text-slate-600 hover:text-slate-800 transition-colors mb-8"
    },
    /* @__PURE__ */ React.createElement(import_lucide_react.ArrowLeft, { className: "w-4 h-4" }),
    "Back to Home"
  ), /* @__PURE__ */ React.createElement("article", { className: "bg-white/70 backdrop-blur-md border border-white/70 rounded-2xl p-8 md:p-12" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-4 text-sm text-slate-600 mb-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-1" }, /* @__PURE__ */ React.createElement(import_lucide_react.Calendar, { className: "w-4 h-4" }), /* @__PURE__ */ React.createElement("span", null, article.date)), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-1" }, /* @__PURE__ */ React.createElement(import_lucide_react.Clock, { className: "w-4 h-4" }), /* @__PURE__ */ React.createElement("span", null, article.readTime))), /* @__PURE__ */ React.createElement("h1", { className: "text-3xl md:text-4xl font-bold text-slate-800 mb-8 leading-tight" }, article.title), /* @__PURE__ */ React.createElement("div", { className: "prose prose-lg prose-slate max-w-none" }, /* @__PURE__ */ React.createElement("div", { className: "text-slate-700 leading-relaxed whitespace-pre-line" }, article.content), /* @__PURE__ */ React.createElement("div", { className: "mt-8 pt-6 border-t border-slate-200" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm text-slate-500 italic" }, "This article was written with AI supervised by Dom")))), /* @__PURE__ */ React.createElement("div", { className: "mt-16 text-center" }, /* @__PURE__ */ React.createElement("p", { className: "text-slate-500 text-sm" }, "Made by Dom"))), /* @__PURE__ */ React.createElement("style", { dangerouslySetInnerHTML: {
    __html: `
          @keyframes gradientShift {
            0% {
              background-position: 0% 50%;
            }
            50% {
              background-position: 100% 50%;
            }
            100% {
              background-position: 0% 50%;
            }
          }
        `
  } }));
};
var ArticlePage_default = ArticlePage;
export {
  ArticlePage_default as default
};
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/cjs/lucide-react.js:
  (**
   * @license lucide-react v0.462.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

@remix-run/router/dist/router.cjs.js:
  (**
   * @remix-run/router v1.20.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/umd/react-router.production.min.js:
  (**
   * React Router v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/umd/react-router.development.js:
  (**
   * React Router v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/main.js:
  (**
   * React Router v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/umd/react-router-dom.production.min.js:
  (**
   * React Router DOM v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/umd/react-router-dom.development.js:
  (**
   * React Router DOM v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/main.js:
  (**
   * React Router DOM v6.27.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
